
_programs/bme280/out/bme280.elf:     file format elf32-littlearm
_programs/bme280/out/bme280.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00117d

Program Header:
0x70000001 off    0x00014c94 vaddr 0x1a004c94 paddr 0x1a004c94 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100b0 vaddr 0x100000b0 paddr 0x100000b0 align 2**16
         filesz 0x00000000 memsz 0x0000004c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004c9c memsz 0x00004c9c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004c9c align 2**16
         filesz 0x000000ac memsz 0x000000ac flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c90  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  10000000  1a004c9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
  6 .bss          0000004c  100000b0  100000b0  000100b0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 11 .init_array   00000004  1a004c90  1a004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004c94  1a004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200ac  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 18 .noinit       00000000  100000fc  100000fc  000200ac  2**2
                  CONTENTS
 19 .debug_info   00022e5a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004e2a  00000000  00000000  00042f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a76b  00000000  00000000  00047d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000bb8  00000000  00000000  0005249b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c48  00000000  00000000  00053053  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d861  00000000  00000000  00053c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000129d0  00000000  00000000  000614fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000290f2  00000000  00000000  00073ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009cfbe  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009d026  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000026f0  00000000  00000000  0009d058  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004c90 l    d  .init_array	00000000 .init_array
1a004c94 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000fc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 bme280.c
00000000 l    df *ABS*	00000000 sapi_bme280.c
1a0003b8 l     F .text	00000016 fill_filter_settings
1a0003ce l     F .text	00000012 fill_standby_settings
1a0003e0 l     F .text	00000016 fill_osr_press_settings
1a0003f6 l     F .text	00000012 fill_osr_temp_settings
1a000408 l     F .text	00000026 parse_device_settings
1a000430 l     F .text	00000108 compensate_temperature
1a000538 l     F .text	00000250 compensate_pressure
1a000788 l     F .text	00000178 compensate_humidity
1a000900 l     F .text	00000020 interleave_reg_addr
1a000920 l     F .text	00000080 parse_temp_press_calib_data
1a0009a0 l     F .text	00000040 parse_humidity_calib_data
1a0009e0 l     F .text	0000000c are_settings_changed
1a0009ec l     F .text	0000002a null_ptr_check
1a000bca l     F .text	00000052 get_calib_data
1a000ca8 l     F .text	0000005c set_osr_humidity_settings
1a000d04 l     F .text	0000005c set_osr_press_temp_settings
1a000d60 l     F .text	0000002e set_osr_settings
1a000d8e l     F .text	0000005c set_filter_standby_settings
1a000dea l     F .text	00000026 reload_device_settings
1a000e10 l     F .text	0000004c write_power_mode
1a000f44 l     F .text	0000003c put_device_to_sleep
100000b0 l     O .bss	0000000a uartBuff.13947
00000000 l    df *ABS*	00000000 system.c
100000bc l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a0012d0 l     F .text	00000044 Board_LED_Init
1a001314 l     F .text	00000040 Board_TEC_Init
1a001354 l     F .text	00000040 Board_GPIO_Init
1a001394 l     F .text	00000030 Board_ADC_Init
1a0013c4 l     F .text	00000038 Board_SPI_Init
1a0013fc l     F .text	00000024 Board_I2C_Init
1a0048fc l     O .text	00000008 GpioButtons
1a004904 l     O .text	0000000c GpioLeds
1a004910 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004928 l     O .text	00000004 InitClkStates
1a00492c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001570 l     F .text	0000002c Chip_UART_GetIndex
1a0049a0 l     O .text	00000008 UART_BClock
1a0049a8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00170c l     F .text	00000014 Chip_ADC_GetClockIndex
1a001720 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0017d4 l     F .text	000000a0 pll_calc_divs
1a001874 l     F .text	0000010c pll_get_frac
1a001980 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001bf4 l     F .text	00000022 Chip_Clock_GetDivRate
100000c0 l     O .bss	00000008 audio_usb_pll_freq
1a0049bc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004a28 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00224c l     F .text	00000014 Chip_SSP_GetClockIndex
1a002260 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004a70 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
100000c8 l     O .bss	00000004 callBackFuncParams
100000d0 l     O .bss	00000008 tickCounter
100000d8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0024f8 l     F .text	00000030 i2cHardwareInit
1a002528 l     F .text	00000040 i2cHardwareRead
1a002568 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0025f8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000dc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_convert.c
1a004ba0 l     O .text	00000058 rounders
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003c18 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004020 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
1000004c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004c94 l       .init_array	00000000 __init_array_end
1a004c90 l       .bss_RAM5	00000000 __preinit_array_end
1a004c90 l       .init_array	00000000 __init_array_start
1a004c90 l       .bss_RAM5	00000000 __preinit_array_start
1a001a18 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00121c g     F .text	00000012 _isatty_r
1a001e74 g     F .text	0000000e Chip_I2CM_Xfer
1a000ec4 g     F .text	00000080 bme280Init
1a003370 g     F .text	00000012 .hidden __aeabi_dcmple
1a003828 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0032ac g     F .text	0000007a .hidden __cmpdf2
1a0025a8 g     F .text	0000000e i2cInit
1a00122e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0032ac g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002e1c g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0037f8 g     F .text	00000030 printf
1a0014b6 g     F .text	00000008 __stdio_init
100000f0 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a004632 g     F .text	00000024 __sseek
1a003cc8 g     F .text	00000070 __sinit
1a003914 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002020 g     F .text	00000120 handleMasterXferState
1a003c6c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0017c6 g     F .text	0000000c Chip_ADC_SetResolution
1a00470c g     F .text	0000000c __malloc_unlock
1a0024cc g     F .text	0000002c SysTick_Handler
1a0015f0 g     F .text	00000040 Chip_UART_SetBaud
100000f1 g     O .bss	00000001 __lock___arc4random_mutex
1a00117a  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001458 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a004c9c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a00329c g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0025b6 g     F .text	00000028 i2cRead
1a001212 g     F .text	0000000a _fstat_r
53ff6712 g       *ABS*	00000000 __valid_user_code_checksum
1a004c9c g       .ARM.exidx	00000000 _etext
1a003338 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001c96 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003328 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003c60 g     F .text	0000000c _cleanup_r
1a002da4 g     F .text	00000022 .hidden __floatsidf
1a0021cc g     F .text	00000030 Chip_I2C_MasterStateHandler
1a0032a4 g     F .text	00000082 .hidden __ltdf2
1a00349c g     F .text	00000000 .hidden __aeabi_uldivmod
100000fc g       .noinit	00000000 _noinit
1a003904 g     F .text	00000010 puts
1a002416 g     F .text	00000016 uartWriteString
100000e8 g     O .bss	00000004 SystemCoreClock
1a000b38 g     F .text	00000056 bme280I2cWrite
1a00159c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001076 g     F .text	00000036 bme280ParseSensorData
1a000180  w    F .text	00000002 UsageFault_Handler
1a001d14 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0014f8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002d84 g     F .text	0000001e .hidden __aeabi_ui2d
1a00219c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0034cc g     F .text	000002d0 .hidden __udivmoddi4
1a002b00 g     F .text	00000000 .hidden __aeabi_drsub
1a0012b0 g     F .text	00000020 _sbrk_r
1a0048f8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001238 g     F .text	0000004e _read_r
1a00335c g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a002dc8 g     F .text	00000042 .hidden __extendsfdf2
1a0030cc g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002b0c g     F .text	00000276 .hidden __adddf3
1a000f80 g     F .text	000000b0 bme280SetSensorSettings
1a004c94 g       .ARM.exidx	00000000 __exidx_start
100000f2 g     O .bss	00000001 __lock___env_recursive_mutex
1a002e78 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
100000f3 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004c58 g     O .text	00000004 _global_impure_ptr
1a0037a0 g     F .text	00000048 __libc_init_array
1a000a18 g     F .text	000000e8 bme280PrintSensorData
1a0010ac g     F .text	00000072 bme280CompensateData
1a002d84 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001474 g     F .text	00000030 Board_Init
1a001206  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0033fc g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000fc g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00117c g     F .text	00000088 Reset_Handler
1a002450 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001e82 g     F .text	00000024 Chip_I2CM_XferBlocking
1a002988 g     F .text	00000178 floatToString
1a002164 g     F .text	00000038 Chip_I2C_SetClockRate
1a0033ac g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0019cc g     F .text	0000004c Chip_Clock_EnableCrystal
100000f4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002b0c g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a0032a4 g     F .text	00000082 .hidden __ledf2
1a002e0c g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004bf8 g     O .text	00000020 __sf_fake_stderr
1a002140 g     F .text	00000024 Chip_I2C_Init
1a003e04 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001b88 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004ab8 g     O .text	000000e6 gpioPinsInit
1a0023fc g     F .text	0000001a uartWriteByte
1a002278 g     F .text	00000012 Chip_SSP_SetClockRate
1a003398 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0028aa g     F .text	00000016 gpioToggle
1a00404e g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003c98 g     F .text	0000000c __sfp_lock_acquire
1a004660 g     F .text	00000000 memchr
1a003ed0 g     F .text	0000009c _free_r
1a001c70 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000b00 g     F .text	0000000a bme280Delay_ms
1a003384 g     F .text	00000012 .hidden __aeabi_dcmpge
100000b0 g       .bss	00000000 _bss
1a001794 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002b08 g     F .text	0000027a .hidden __aeabi_dsub
1a002e0c g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00228a g     F .text	0000003e Chip_SSP_SetBitRate
1a001ea6 g     F .text	00000002 Chip_GPIO_Init
1a004924 g     O .text	00000004 OscRateIn
1a002380 g     F .text	0000007c uartInit
100000fc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001208 g     F .text	0000000a _close_r
1a002da4 g     F .text	00000022 .hidden __aeabi_i2d
1a00262c g     F .text	000001ac gpioInit
1a0039b8 g     F .text	000000dc __swsetup_r
1a00379c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0030cc g     F .text	000001d0 .hidden __divdf3
1a003d38 g     F .text	0000008c __sfp
1a003cbc g     F .text	0000000c __sinit_lock_release
1a002e78 g     F .text	00000254 .hidden __muldf3
1a0045d8 g     F .text	00000022 __sread
1a0028c0 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004700 g     F .text	0000000c __malloc_lock
1a001444 g     F .text	00000014 Board_UARTPutChar
1a0021fc g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003ba0 g     F .text	00000078 _fflush_r
1a004c18 g     O .text	00000020 __sf_fake_stdin
1a001a34 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003e02 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0037e8 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000b8 main
1a003e00 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a004656 g     F .text	00000008 __sclose
1a0033fc g     F .text	0000009e .hidden __truncdfsf2
1a003f6c g     F .text	000000b4 _malloc_r
1a002e1c g     F .text	0000005a .hidden __aeabi_l2d
1a002354 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001ca4 g     F .text	0000003c Chip_Clock_EnableOpts
1a0014ae g     F .text	00000008 __stdio_getchar
1a000b0a g     F .text	0000002e bme280I2cRead
1a001a50 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c1c g     F .text	0000008c bme280SetRegs
1a001b08 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002300 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a000e5c g     F .text	0000002c bme280GetSensorMode
1a002950 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0032ac g     F .text	0000007a .hidden __nedf2
1a0027d8 g     F .text	0000006a gpioWrite
1a001204  w    F .text	00000002 _fini
1a0037f8 g     F .text	00000030 iprintf
1a001754 g     F .text	00000040 Chip_ADC_Init
100000ec g     O .bss	00000004 g_pUsbApi
1a0014c0 g     F .text	00000038 Board_SetupMuxing
1a001630 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00242c g     F .text	0000000c tickRead
1a001286 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0042c4 g     F .text	000000ea _printf_common
10000048 g     O .data	00000004 _impure_ptr
1a003a94 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000b8e g     F .text	0000003c bme280GetRegs
1a00236c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001d74 g     F .text	00000100 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
100000fc g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0022c8 g     F .text	00000038 Chip_SSP_Init
1a002214 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000e88 g     F .text	0000003a bme280SoftReset
1a003e06 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0025de g     F .text	00000018 i2cWrite
1a001420 g     F .text	00000024 Board_Debug_Init
1a003348 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0014a4 g     F .text	0000000a __stdio_putchar
100000ac g       .data	00000000 _edata
1a002000 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100000f5 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001ea8 g     F .text	00000158 Chip_SetupCoreClock
1a0045fa g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a004074 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003dc4 g     F .text	0000003c _fwalk_reent
1a001d60 g     F .text	00000014 SystemCoreClockUpdate
1a0033ac g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003ca4 g     F .text	0000000c __sfp_lock_release
1a004c38 g     O .text	00000020 __sf_fake_stdout
1a00379c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
100000f6 g     O .bss	00000001 __lock___dd_hash_mutex
1a003e50 g     F .text	00000080 __smakebuf_r
100000f7 g     O .bss	00000001 __lock___tz_mutex
1a0043b0 g     F .text	00000228 _printf_i
1a001ce0 g     F .text	00000034 Chip_Clock_Enable
1a003338 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a00329c g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100000e4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002842 g     F .text	00000068 gpioRead
1a002dc8 g     F .text	00000042 .hidden __aeabi_f2d
1a0028dc g     F .text	00000074 boardInit
100000e0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002b08 g     F .text	0000027a .hidden __subdf3
1a004074 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00111e g     F .text	0000005c bme280GetSensorData
1a002438 g     F .text	00000018 tickPowerSet
1a001c18 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002338 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100000f8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001030 g     F .text	00000046 bme280SetSensorMode
1a003cb0 g     F .text	0000000c __sinit_lock_acquire
1a001564 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 7d 11 00 1a 79 01 00 1a 7b 01 00 1a     ....}...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 12 67 ff 53     }............g.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	cd 24 00 1a                                         .$..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c1 28 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .(..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004c9c 	.word	0x1a004c9c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000ac 	.word	0x000000ac
1a000120:	1a004c9c 	.word	0x1a004c9c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004c9c 	.word	0x1a004c9c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004c9c 	.word	0x1a004c9c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004c9c 	.word	0x1a004c9c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b0 	.word	0x100000b0
1a000154:	0000004c 	.word	0x0000004c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*=====[Definitions of public global variables]==============================*/

/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/
int main(void) {
1a000300:	b500      	push	{lr}
1a000302:	b097      	sub	sp, #92	; 0x5c
	struct bme280_dev dev;
	int8_t rslt = BME280_OK;
	uint8_t settings_sel;
	struct bme280_data comp_data;

	dev.dev_id = BME280_I2C_ADDR_PRIM;
1a000304:	2376      	movs	r3, #118	; 0x76
1a000306:	f88d 3019 	strb.w	r3, [sp, #25]
	dev.intf = BME280_I2C_INTF;
1a00030a:	2301      	movs	r3, #1
1a00030c:	f88d 301a 	strb.w	r3, [sp, #26]
	dev.read = bme280I2cRead;
1a000310:	4b22      	ldr	r3, [pc, #136]	; (1a00039c <main+0x9c>)
1a000312:	9307      	str	r3, [sp, #28]
	dev.write = bme280I2cWrite;
1a000314:	4b22      	ldr	r3, [pc, #136]	; (1a0003a0 <main+0xa0>)
1a000316:	9308      	str	r3, [sp, #32]
	dev.delay_ms = bme280Delay_ms;
1a000318:	4b22      	ldr	r3, [pc, #136]	; (1a0003a4 <main+0xa4>)
1a00031a:	9309      	str	r3, [sp, #36]	; 0x24

	// ----- init -----------------------------------

	boardInit();
1a00031c:	f002 fade 	bl	1a0028dc <boardInit>

	uartConfig(UART_USB, 9600); // Inicializar periferico UART_USB
1a000320:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a000324:	2003      	movs	r0, #3
1a000326:	f002 f82b 	bl	1a002380 <uartInit>

	i2cInit(I2C0, BME280_I2C_RATE);
1a00032a:	491f      	ldr	r1, [pc, #124]	; (1a0003a8 <main+0xa8>)
1a00032c:	2000      	movs	r0, #0
1a00032e:	f002 f93b 	bl	1a0025a8 <i2cInit>

	rslt = bme280Init(&dev);
1a000332:	a806      	add	r0, sp, #24
1a000334:	f000 fdc6 	bl	1a000ec4 <bme280Init>

	if (rslt != BME280_OK) {
1a000338:	4601      	mov	r1, r0
1a00033a:	b338      	cbz	r0, 1a00038c <main+0x8c>
		printf("Fallo en la inicializacion (code %+d)\r\n", rslt);
1a00033c:	481b      	ldr	r0, [pc, #108]	; (1a0003ac <main+0xac>)
1a00033e:	f003 fa5b 	bl	1a0037f8 <iprintf>
	}
	// ----- bme280 sensor setup-----------------------------------

	/* Recommended mode operation: Indoor navigation */

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
1a000342:	2301      	movs	r3, #1
1a000344:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
	dev.settings.osr_p = BME280_OVERSAMPLING_1X;
1a000348:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	dev.settings.osr_t = BME280_OVERSAMPLING_16X;
1a00034c:	2205      	movs	r2, #5
1a00034e:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
	dev.settings.filter = BME280_FILTER_COEFF_16;
1a000352:	2204      	movs	r2, #4
1a000354:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
1a000358:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_STANDBY_SEL;
	settings_sel |= BME280_FILTER_SEL;

	rslt = bme280SetSensorSettings(settings_sel, &dev);
1a00035c:	a906      	add	r1, sp, #24
1a00035e:	201f      	movs	r0, #31
1a000360:	f000 fe0e 	bl	1a000f80 <bme280SetSensorSettings>
	rslt = bme280SetSensorMode(BME280_NORMAL_MODE, &dev);
1a000364:	a906      	add	r1, sp, #24
1a000366:	2003      	movs	r0, #3
1a000368:	f000 fe62 	bl	1a001030 <bme280SetSensorMode>

	/* ------------- REPETIR POR SIEMPRE ------------- */
	while (TRUE) {

		/* Wait for the measurement to complete and print data @25Hz */
		dev.delay_ms(2750);
1a00036c:	f640 20be 	movw	r0, #2750	; 0xabe
1a000370:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000372:	4798      	blx	r3

		rslt = bme280GetSensorData(BME280_ALL, &comp_data, &dev);
1a000374:	aa06      	add	r2, sp, #24
1a000376:	4669      	mov	r1, sp
1a000378:	2007      	movs	r0, #7
1a00037a:	f000 fed0 	bl	1a00111e <bme280GetSensorData>

		bme280PrintSensorData(&comp_data);
1a00037e:	4668      	mov	r0, sp
1a000380:	f000 fb4a 	bl	1a000a18 <bme280PrintSensorData>

		gpioToggle(LED);
1a000384:	202a      	movs	r0, #42	; 0x2a
1a000386:	f002 fa90 	bl	1a0028aa <gpioToggle>
1a00038a:	e7ef      	b.n	1a00036c <main+0x6c>
		printf("Resultado de la inicializacion (code %+d)\r\n", rslt);
1a00038c:	4808      	ldr	r0, [pc, #32]	; (1a0003b0 <main+0xb0>)
1a00038e:	f003 fa33 	bl	1a0037f8 <iprintf>
		printf("Temperature, Pressure, Humidity\r\n");
1a000392:	4808      	ldr	r0, [pc, #32]	; (1a0003b4 <main+0xb4>)
1a000394:	f003 fab6 	bl	1a003904 <puts>
1a000398:	e7d3      	b.n	1a000342 <main+0x42>
1a00039a:	bf00      	nop
1a00039c:	1a000b0b 	.word	0x1a000b0b
1a0003a0:	1a000b39 	.word	0x1a000b39
1a0003a4:	1a000b01 	.word	0x1a000b01
1a0003a8:	000186a0 	.word	0x000186a0
1a0003ac:	1a004718 	.word	0x1a004718
1a0003b0:	1a004740 	.word	0x1a004740
1a0003b4:	1a00476c 	.word	0x1a00476c

1a0003b8 <fill_filter_settings>:
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
1a0003b8:	f990 3000 	ldrsb.w	r3, [r0]
1a0003bc:	f023 031c 	bic.w	r3, r3, #28
1a0003c0:	78ca      	ldrb	r2, [r1, #3]
1a0003c2:	0092      	lsls	r2, r2, #2
1a0003c4:	f002 021c 	and.w	r2, r2, #28
1a0003c8:	4313      	orrs	r3, r2
1a0003ca:	7003      	strb	r3, [r0, #0]
}
1a0003cc:	4770      	bx	lr

1a0003ce <fill_standby_settings>:
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY,
1a0003ce:	f990 3000 	ldrsb.w	r3, [r0]
1a0003d2:	f003 031f 	and.w	r3, r3, #31
1a0003d6:	790a      	ldrb	r2, [r1, #4]
1a0003d8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
1a0003dc:	7003      	strb	r3, [r0, #0]
			settings->standby_time);
}
1a0003de:	4770      	bx	lr

1a0003e0 <fill_osr_press_settings>:
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
1a0003e0:	f990 3000 	ldrsb.w	r3, [r0]
1a0003e4:	f023 031c 	bic.w	r3, r3, #28
1a0003e8:	780a      	ldrb	r2, [r1, #0]
1a0003ea:	0092      	lsls	r2, r2, #2
1a0003ec:	f002 021c 	and.w	r2, r2, #28
1a0003f0:	4313      	orrs	r3, r2
1a0003f2:	7003      	strb	r3, [r0, #0]
}
1a0003f4:	4770      	bx	lr

1a0003f6 <fill_osr_temp_settings>:
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
1a0003f6:	f990 3000 	ldrsb.w	r3, [r0]
1a0003fa:	f003 031f 	and.w	r3, r3, #31
1a0003fe:	784a      	ldrb	r2, [r1, #1]
1a000400:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
1a000404:	7003      	strb	r3, [r0, #0]
}
1a000406:	4770      	bx	lr

1a000408 <parse_device_settings>:
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data,
		struct bme280_settings *settings) {
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
1a000408:	7803      	ldrb	r3, [r0, #0]
1a00040a:	f003 0307 	and.w	r3, r3, #7
1a00040e:	708b      	strb	r3, [r1, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
1a000410:	7883      	ldrb	r3, [r0, #2]
1a000412:	f3c3 0382 	ubfx	r3, r3, #2, #3
1a000416:	700b      	strb	r3, [r1, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
1a000418:	7883      	ldrb	r3, [r0, #2]
1a00041a:	095b      	lsrs	r3, r3, #5
1a00041c:	704b      	strb	r3, [r1, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
1a00041e:	78c3      	ldrb	r3, [r0, #3]
1a000420:	f3c3 0382 	ubfx	r3, r3, #2, #3
1a000424:	70cb      	strb	r3, [r1, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
1a000426:	78c3      	ldrb	r3, [r0, #3]
1a000428:	095b      	lsrs	r3, r3, #5
1a00042a:	710b      	strb	r3, [r1, #4]
}
1a00042c:	4770      	bx	lr
1a00042e:	Address 0x000000001a00042e is out of bounds.


1a000430 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(
		const struct bme280_uncomp_data *uncomp_data,
		struct bme280_calib_data *calib_data) {
1a000430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000434:	460c      	mov	r4, r1
	double var2;
	double temperature;
	double temperature_min = -40;
	double temperature_max = 85;

	var1 = ((double) uncomp_data->temperature) / 16384.0
1a000436:	6840      	ldr	r0, [r0, #4]
1a000438:	f002 fca4 	bl	1a002d84 <__aeabi_ui2d>
1a00043c:	4680      	mov	r8, r0
1a00043e:	4689      	mov	r9, r1
1a000440:	2200      	movs	r2, #0
1a000442:	4b36      	ldr	r3, [pc, #216]	; (1a00051c <compensate_temperature+0xec>)
1a000444:	f002 fd18 	bl	1a002e78 <__aeabi_dmul>
1a000448:	4606      	mov	r6, r0
1a00044a:	460f      	mov	r7, r1
			- ((double) calib_data->dig_T1) / 1024.0;
1a00044c:	8820      	ldrh	r0, [r4, #0]
1a00044e:	f002 fc99 	bl	1a002d84 <__aeabi_ui2d>
1a000452:	4682      	mov	sl, r0
1a000454:	468b      	mov	fp, r1
1a000456:	2200      	movs	r2, #0
1a000458:	4b31      	ldr	r3, [pc, #196]	; (1a000520 <compensate_temperature+0xf0>)
1a00045a:	f002 fd0d 	bl	1a002e78 <__aeabi_dmul>
	var1 = ((double) uncomp_data->temperature) / 16384.0
1a00045e:	4602      	mov	r2, r0
1a000460:	460b      	mov	r3, r1
1a000462:	4630      	mov	r0, r6
1a000464:	4639      	mov	r1, r7
1a000466:	f002 fb4f 	bl	1a002b08 <__aeabi_dsub>
1a00046a:	4606      	mov	r6, r0
1a00046c:	460f      	mov	r7, r1
	var1 = var1 * ((double) calib_data->dig_T2);
1a00046e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
1a000472:	f002 fc97 	bl	1a002da4 <__aeabi_i2d>
1a000476:	4632      	mov	r2, r6
1a000478:	463b      	mov	r3, r7
1a00047a:	f002 fcfd 	bl	1a002e78 <__aeabi_dmul>
1a00047e:	4606      	mov	r6, r0
1a000480:	460f      	mov	r7, r1
	var2 = (((double) uncomp_data->temperature) / 131072.0
1a000482:	2200      	movs	r2, #0
1a000484:	4b27      	ldr	r3, [pc, #156]	; (1a000524 <compensate_temperature+0xf4>)
1a000486:	4640      	mov	r0, r8
1a000488:	4649      	mov	r1, r9
1a00048a:	f002 fcf5 	bl	1a002e78 <__aeabi_dmul>
1a00048e:	4680      	mov	r8, r0
1a000490:	4689      	mov	r9, r1
			- ((double) calib_data->dig_T1) / 8192.0);
1a000492:	2200      	movs	r2, #0
1a000494:	4b24      	ldr	r3, [pc, #144]	; (1a000528 <compensate_temperature+0xf8>)
1a000496:	4650      	mov	r0, sl
1a000498:	4659      	mov	r1, fp
1a00049a:	f002 fced 	bl	1a002e78 <__aeabi_dmul>
	var2 = (((double) uncomp_data->temperature) / 131072.0
1a00049e:	4602      	mov	r2, r0
1a0004a0:	460b      	mov	r3, r1
1a0004a2:	4640      	mov	r0, r8
1a0004a4:	4649      	mov	r1, r9
1a0004a6:	f002 fb2f 	bl	1a002b08 <__aeabi_dsub>
	var2 = (var2 * var2) * ((double) calib_data->dig_T3);
1a0004aa:	4602      	mov	r2, r0
1a0004ac:	460b      	mov	r3, r1
1a0004ae:	f002 fce3 	bl	1a002e78 <__aeabi_dmul>
1a0004b2:	4680      	mov	r8, r0
1a0004b4:	4689      	mov	r9, r1
1a0004b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
1a0004ba:	f002 fc73 	bl	1a002da4 <__aeabi_i2d>
1a0004be:	4602      	mov	r2, r0
1a0004c0:	460b      	mov	r3, r1
1a0004c2:	4640      	mov	r0, r8
1a0004c4:	4649      	mov	r1, r9
1a0004c6:	f002 fcd7 	bl	1a002e78 <__aeabi_dmul>
	calib_data->t_fine = (int32_t)(var1 + var2);
1a0004ca:	4602      	mov	r2, r0
1a0004cc:	460b      	mov	r3, r1
1a0004ce:	4630      	mov	r0, r6
1a0004d0:	4639      	mov	r1, r7
1a0004d2:	f002 fb1b 	bl	1a002b0c <__adddf3>
1a0004d6:	4606      	mov	r6, r0
1a0004d8:	460f      	mov	r7, r1
1a0004da:	f002 ff67 	bl	1a0033ac <__aeabi_d2iz>
1a0004de:	6260      	str	r0, [r4, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
1a0004e0:	2200      	movs	r2, #0
1a0004e2:	4b12      	ldr	r3, [pc, #72]	; (1a00052c <compensate_temperature+0xfc>)
1a0004e4:	4630      	mov	r0, r6
1a0004e6:	4639      	mov	r1, r7
1a0004e8:	f002 fdf0 	bl	1a0030cc <__aeabi_ddiv>
1a0004ec:	4604      	mov	r4, r0
1a0004ee:	460d      	mov	r5, r1
	if (temperature < temperature_min) {
1a0004f0:	2200      	movs	r2, #0
1a0004f2:	4b0f      	ldr	r3, [pc, #60]	; (1a000530 <compensate_temperature+0x100>)
1a0004f4:	f002 ff32 	bl	1a00335c <__aeabi_dcmplt>
1a0004f8:	b948      	cbnz	r0, 1a00050e <compensate_temperature+0xde>
		temperature = temperature_min;
	} else if (temperature > temperature_max) {
1a0004fa:	2200      	movs	r2, #0
1a0004fc:	4b0d      	ldr	r3, [pc, #52]	; (1a000534 <compensate_temperature+0x104>)
1a0004fe:	4620      	mov	r0, r4
1a000500:	4629      	mov	r1, r5
1a000502:	f002 ff49 	bl	1a003398 <__aeabi_dcmpgt>
1a000506:	b120      	cbz	r0, 1a000512 <compensate_temperature+0xe2>
		temperature = temperature_max;
1a000508:	2400      	movs	r4, #0
1a00050a:	4d0a      	ldr	r5, [pc, #40]	; (1a000534 <compensate_temperature+0x104>)
	}

	return temperature;
1a00050c:	e001      	b.n	1a000512 <compensate_temperature+0xe2>
		temperature = temperature_min;
1a00050e:	2400      	movs	r4, #0
1a000510:	4d07      	ldr	r5, [pc, #28]	; (1a000530 <compensate_temperature+0x100>)
}
1a000512:	4620      	mov	r0, r4
1a000514:	4629      	mov	r1, r5
1a000516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00051a:	bf00      	nop
1a00051c:	3f100000 	.word	0x3f100000
1a000520:	3f500000 	.word	0x3f500000
1a000524:	3ee00000 	.word	0x3ee00000
1a000528:	3f200000 	.word	0x3f200000
1a00052c:	40b40000 	.word	0x40b40000
1a000530:	c0440000 	.word	0xc0440000
1a000534:	40554000 	.word	0x40554000

1a000538 <compensate_pressure>:
/*!
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
		const struct bme280_calib_data *calib_data) {
1a000538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00053c:	4605      	mov	r5, r0
1a00053e:	460c      	mov	r4, r1
	double var3;
	double pressure;
	double pressure_min = 30000.0;
	double pressure_max = 110000.0;

	var1 = ((double) calib_data->t_fine / 2.0) - 64000.0;
1a000540:	6a48      	ldr	r0, [r1, #36]	; 0x24
1a000542:	f002 fc2f 	bl	1a002da4 <__aeabi_i2d>
1a000546:	2200      	movs	r2, #0
1a000548:	4b87      	ldr	r3, [pc, #540]	; (1a000768 <compensate_pressure+0x230>)
1a00054a:	f002 fc95 	bl	1a002e78 <__aeabi_dmul>
1a00054e:	2200      	movs	r2, #0
1a000550:	4b86      	ldr	r3, [pc, #536]	; (1a00076c <compensate_pressure+0x234>)
1a000552:	f002 fad9 	bl	1a002b08 <__aeabi_dsub>
1a000556:	4606      	mov	r6, r0
1a000558:	460f      	mov	r7, r1
	var2 = var1 * var1 * ((double) calib_data->dig_P6) / 32768.0;
1a00055a:	4602      	mov	r2, r0
1a00055c:	460b      	mov	r3, r1
1a00055e:	f002 fc8b 	bl	1a002e78 <__aeabi_dmul>
1a000562:	4680      	mov	r8, r0
1a000564:	4689      	mov	r9, r1
1a000566:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
1a00056a:	f002 fc1b 	bl	1a002da4 <__aeabi_i2d>
1a00056e:	4602      	mov	r2, r0
1a000570:	460b      	mov	r3, r1
1a000572:	4640      	mov	r0, r8
1a000574:	4649      	mov	r1, r9
1a000576:	f002 fc7f 	bl	1a002e78 <__aeabi_dmul>
1a00057a:	2200      	movs	r2, #0
1a00057c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a000580:	f002 fc7a 	bl	1a002e78 <__aeabi_dmul>
1a000584:	4680      	mov	r8, r0
1a000586:	4689      	mov	r9, r1
	var2 = var2 + var1 * ((double) calib_data->dig_P5) * 2.0;
1a000588:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
1a00058c:	f002 fc0a 	bl	1a002da4 <__aeabi_i2d>
1a000590:	4632      	mov	r2, r6
1a000592:	463b      	mov	r3, r7
1a000594:	f002 fc70 	bl	1a002e78 <__aeabi_dmul>
1a000598:	4602      	mov	r2, r0
1a00059a:	460b      	mov	r3, r1
1a00059c:	f002 fab6 	bl	1a002b0c <__adddf3>
1a0005a0:	4642      	mov	r2, r8
1a0005a2:	464b      	mov	r3, r9
1a0005a4:	f002 fab2 	bl	1a002b0c <__adddf3>
	var2 = (var2 / 4.0) + (((double) calib_data->dig_P4) * 65536.0);
1a0005a8:	2200      	movs	r2, #0
1a0005aa:	4b71      	ldr	r3, [pc, #452]	; (1a000770 <compensate_pressure+0x238>)
1a0005ac:	f002 fc64 	bl	1a002e78 <__aeabi_dmul>
1a0005b0:	4680      	mov	r8, r0
1a0005b2:	4689      	mov	r9, r1
1a0005b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
1a0005b8:	f002 fbf4 	bl	1a002da4 <__aeabi_i2d>
1a0005bc:	2200      	movs	r2, #0
1a0005be:	4b6d      	ldr	r3, [pc, #436]	; (1a000774 <compensate_pressure+0x23c>)
1a0005c0:	f002 fc5a 	bl	1a002e78 <__aeabi_dmul>
1a0005c4:	4602      	mov	r2, r0
1a0005c6:	460b      	mov	r3, r1
1a0005c8:	4640      	mov	r0, r8
1a0005ca:	4649      	mov	r1, r9
1a0005cc:	f002 fa9e 	bl	1a002b0c <__adddf3>
1a0005d0:	4680      	mov	r8, r0
1a0005d2:	4689      	mov	r9, r1
	var3 = ((double) calib_data->dig_P3) * var1 * var1 / 524288.0;
1a0005d4:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
1a0005d8:	f002 fbe4 	bl	1a002da4 <__aeabi_i2d>
1a0005dc:	4632      	mov	r2, r6
1a0005de:	463b      	mov	r3, r7
1a0005e0:	f002 fc4a 	bl	1a002e78 <__aeabi_dmul>
1a0005e4:	4632      	mov	r2, r6
1a0005e6:	463b      	mov	r3, r7
1a0005e8:	f002 fc46 	bl	1a002e78 <__aeabi_dmul>
1a0005ec:	2200      	movs	r2, #0
1a0005ee:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a0005f2:	f002 fc41 	bl	1a002e78 <__aeabi_dmul>
1a0005f6:	4682      	mov	sl, r0
1a0005f8:	468b      	mov	fp, r1
	var1 = (var3 + ((double) calib_data->dig_P2) * var1) / 524288.0;
1a0005fa:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
1a0005fe:	f002 fbd1 	bl	1a002da4 <__aeabi_i2d>
1a000602:	4632      	mov	r2, r6
1a000604:	463b      	mov	r3, r7
1a000606:	f002 fc37 	bl	1a002e78 <__aeabi_dmul>
1a00060a:	4652      	mov	r2, sl
1a00060c:	465b      	mov	r3, fp
1a00060e:	f002 fa7d 	bl	1a002b0c <__adddf3>
1a000612:	2200      	movs	r2, #0
1a000614:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a000618:	f002 fc2e 	bl	1a002e78 <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0) * ((double) calib_data->dig_P1);
1a00061c:	2200      	movs	r2, #0
1a00061e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a000622:	f002 fc29 	bl	1a002e78 <__aeabi_dmul>
1a000626:	2200      	movs	r2, #0
1a000628:	4b53      	ldr	r3, [pc, #332]	; (1a000778 <compensate_pressure+0x240>)
1a00062a:	f002 fa6f 	bl	1a002b0c <__adddf3>
1a00062e:	4606      	mov	r6, r0
1a000630:	460f      	mov	r7, r1
1a000632:	88e0      	ldrh	r0, [r4, #6]
1a000634:	f002 fba6 	bl	1a002d84 <__aeabi_ui2d>
1a000638:	4602      	mov	r2, r0
1a00063a:	460b      	mov	r3, r1
1a00063c:	4630      	mov	r0, r6
1a00063e:	4639      	mov	r1, r7
1a000640:	f002 fc1a 	bl	1a002e78 <__aeabi_dmul>
1a000644:	4682      	mov	sl, r0
1a000646:	468b      	mov	fp, r1

	/* avoid exception caused by division by zero */
	if (var1) {
1a000648:	2200      	movs	r2, #0
1a00064a:	2300      	movs	r3, #0
1a00064c:	f002 fe7c 	bl	1a003348 <__aeabi_dcmpeq>
1a000650:	2800      	cmp	r0, #0
1a000652:	d16f      	bne.n	1a000734 <compensate_pressure+0x1fc>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
1a000654:	6828      	ldr	r0, [r5, #0]
1a000656:	f002 fb95 	bl	1a002d84 <__aeabi_ui2d>
1a00065a:	4602      	mov	r2, r0
1a00065c:	460b      	mov	r3, r1
1a00065e:	2000      	movs	r0, #0
1a000660:	4946      	ldr	r1, [pc, #280]	; (1a00077c <compensate_pressure+0x244>)
1a000662:	f002 fa51 	bl	1a002b08 <__aeabi_dsub>
1a000666:	4606      	mov	r6, r0
1a000668:	460f      	mov	r7, r1
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
1a00066a:	2200      	movs	r2, #0
1a00066c:	4b44      	ldr	r3, [pc, #272]	; (1a000780 <compensate_pressure+0x248>)
1a00066e:	4640      	mov	r0, r8
1a000670:	4649      	mov	r1, r9
1a000672:	f002 fc01 	bl	1a002e78 <__aeabi_dmul>
1a000676:	4602      	mov	r2, r0
1a000678:	460b      	mov	r3, r1
1a00067a:	4630      	mov	r0, r6
1a00067c:	4639      	mov	r1, r7
1a00067e:	f002 fa43 	bl	1a002b08 <__aeabi_dsub>
1a000682:	a333      	add	r3, pc, #204	; (adr r3, 1a000750 <compensate_pressure+0x218>)
1a000684:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000688:	f002 fbf6 	bl	1a002e78 <__aeabi_dmul>
1a00068c:	4652      	mov	r2, sl
1a00068e:	465b      	mov	r3, fp
1a000690:	f002 fd1c 	bl	1a0030cc <__aeabi_ddiv>
1a000694:	4606      	mov	r6, r0
1a000696:	460f      	mov	r7, r1
		var1 = ((double) calib_data->dig_P9) * pressure * pressure
1a000698:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
1a00069c:	f002 fb82 	bl	1a002da4 <__aeabi_i2d>
1a0006a0:	4632      	mov	r2, r6
1a0006a2:	463b      	mov	r3, r7
1a0006a4:	f002 fbe8 	bl	1a002e78 <__aeabi_dmul>
1a0006a8:	4632      	mov	r2, r6
1a0006aa:	463b      	mov	r3, r7
1a0006ac:	f002 fbe4 	bl	1a002e78 <__aeabi_dmul>
1a0006b0:	2200      	movs	r2, #0
1a0006b2:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
1a0006b6:	f002 fbdf 	bl	1a002e78 <__aeabi_dmul>
1a0006ba:	4680      	mov	r8, r0
1a0006bc:	4689      	mov	r9, r1
				/ 2147483648.0;
		var2 = pressure * ((double) calib_data->dig_P8) / 32768.0;
1a0006be:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
1a0006c2:	f002 fb6f 	bl	1a002da4 <__aeabi_i2d>
1a0006c6:	4632      	mov	r2, r6
1a0006c8:	463b      	mov	r3, r7
1a0006ca:	f002 fbd5 	bl	1a002e78 <__aeabi_dmul>
1a0006ce:	2200      	movs	r2, #0
1a0006d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a0006d4:	f002 fbd0 	bl	1a002e78 <__aeabi_dmul>
		pressure = pressure
				+ (var1 + var2 + ((double) calib_data->dig_P7)) / 16.0;
1a0006d8:	4602      	mov	r2, r0
1a0006da:	460b      	mov	r3, r1
1a0006dc:	4640      	mov	r0, r8
1a0006de:	4649      	mov	r1, r9
1a0006e0:	f002 fa14 	bl	1a002b0c <__adddf3>
1a0006e4:	4680      	mov	r8, r0
1a0006e6:	4689      	mov	r9, r1
1a0006e8:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
1a0006ec:	f002 fb5a 	bl	1a002da4 <__aeabi_i2d>
1a0006f0:	4602      	mov	r2, r0
1a0006f2:	460b      	mov	r3, r1
1a0006f4:	4640      	mov	r0, r8
1a0006f6:	4649      	mov	r1, r9
1a0006f8:	f002 fa08 	bl	1a002b0c <__adddf3>
1a0006fc:	2200      	movs	r2, #0
1a0006fe:	4b21      	ldr	r3, [pc, #132]	; (1a000784 <compensate_pressure+0x24c>)
1a000700:	f002 fbba 	bl	1a002e78 <__aeabi_dmul>
		pressure = pressure
1a000704:	4632      	mov	r2, r6
1a000706:	463b      	mov	r3, r7
1a000708:	f002 fa00 	bl	1a002b0c <__adddf3>
1a00070c:	4604      	mov	r4, r0
1a00070e:	460d      	mov	r5, r1
		if (pressure < pressure_min) {
1a000710:	a311      	add	r3, pc, #68	; (adr r3, 1a000758 <compensate_pressure+0x220>)
1a000712:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000716:	f002 fe21 	bl	1a00335c <__aeabi_dcmplt>
1a00071a:	b990      	cbnz	r0, 1a000742 <compensate_pressure+0x20a>
			pressure = pressure_min;
		} else if (pressure > pressure_max) {
1a00071c:	a310      	add	r3, pc, #64	; (adr r3, 1a000760 <compensate_pressure+0x228>)
1a00071e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000722:	4620      	mov	r0, r4
1a000724:	4629      	mov	r1, r5
1a000726:	f002 fe37 	bl	1a003398 <__aeabi_dcmpgt>
1a00072a:	b130      	cbz	r0, 1a00073a <compensate_pressure+0x202>
			pressure = pressure_max;
1a00072c:	a50c      	add	r5, pc, #48	; (adr r5, 1a000760 <compensate_pressure+0x228>)
1a00072e:	e9d5 4500 	ldrd	r4, r5, [r5]
	} else /* Invalid case */
	{
		pressure = pressure_min;
	}

	return pressure;
1a000732:	e002      	b.n	1a00073a <compensate_pressure+0x202>
		pressure = pressure_min;
1a000734:	a508      	add	r5, pc, #32	; (adr r5, 1a000758 <compensate_pressure+0x220>)
1a000736:	e9d5 4500 	ldrd	r4, r5, [r5]
}
1a00073a:	4620      	mov	r0, r4
1a00073c:	4629      	mov	r1, r5
1a00073e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pressure = pressure_min;
1a000742:	a505      	add	r5, pc, #20	; (adr r5, 1a000758 <compensate_pressure+0x220>)
1a000744:	e9d5 4500 	ldrd	r4, r5, [r5]
1a000748:	e7f7      	b.n	1a00073a <compensate_pressure+0x202>
1a00074a:	bf00      	nop
1a00074c:	f3af 8000 	nop.w
1a000750:	00000000 	.word	0x00000000
1a000754:	40b86a00 	.word	0x40b86a00
1a000758:	00000000 	.word	0x00000000
1a00075c:	40dd4c00 	.word	0x40dd4c00
1a000760:	00000000 	.word	0x00000000
1a000764:	40fadb00 	.word	0x40fadb00
1a000768:	3fe00000 	.word	0x3fe00000
1a00076c:	40ef4000 	.word	0x40ef4000
1a000770:	3fd00000 	.word	0x3fd00000
1a000774:	40f00000 	.word	0x40f00000
1a000778:	3ff00000 	.word	0x3ff00000
1a00077c:	41300000 	.word	0x41300000
1a000780:	3f300000 	.word	0x3f300000
1a000784:	3fb00000 	.word	0x3fb00000

1a000788 <compensate_humidity>:
/*!
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
		const struct bme280_calib_data *calib_data) {
1a000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00078c:	b084      	sub	sp, #16
1a00078e:	4680      	mov	r8, r0
1a000790:	468a      	mov	sl, r1
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double) calib_data->t_fine) - 76800.0;
1a000792:	6a48      	ldr	r0, [r1, #36]	; 0x24
1a000794:	f002 fb06 	bl	1a002da4 <__aeabi_i2d>
1a000798:	2200      	movs	r2, #0
1a00079a:	4b52      	ldr	r3, [pc, #328]	; (1a0008e4 <compensate_humidity+0x15c>)
1a00079c:	f002 f9b4 	bl	1a002b08 <__aeabi_dsub>
1a0007a0:	4606      	mov	r6, r0
1a0007a2:	460f      	mov	r7, r1
	var2 = (((double) calib_data->dig_H4) * 64.0
1a0007a4:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
1a0007a8:	f002 fafc 	bl	1a002da4 <__aeabi_i2d>
1a0007ac:	2200      	movs	r2, #0
1a0007ae:	4b4e      	ldr	r3, [pc, #312]	; (1a0008e8 <compensate_humidity+0x160>)
1a0007b0:	f002 fb62 	bl	1a002e78 <__aeabi_dmul>
1a0007b4:	4604      	mov	r4, r0
1a0007b6:	460d      	mov	r5, r1
			+ (((double) calib_data->dig_H5) / 16384.0) * var1);
1a0007b8:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
1a0007bc:	f002 faf2 	bl	1a002da4 <__aeabi_i2d>
1a0007c0:	2200      	movs	r2, #0
1a0007c2:	4b4a      	ldr	r3, [pc, #296]	; (1a0008ec <compensate_humidity+0x164>)
1a0007c4:	f002 fb58 	bl	1a002e78 <__aeabi_dmul>
1a0007c8:	4632      	mov	r2, r6
1a0007ca:	463b      	mov	r3, r7
1a0007cc:	f002 fb54 	bl	1a002e78 <__aeabi_dmul>
	var2 = (((double) calib_data->dig_H4) * 64.0
1a0007d0:	4602      	mov	r2, r0
1a0007d2:	460b      	mov	r3, r1
1a0007d4:	4620      	mov	r0, r4
1a0007d6:	4629      	mov	r1, r5
1a0007d8:	f002 f998 	bl	1a002b0c <__adddf3>
1a0007dc:	4604      	mov	r4, r0
1a0007de:	460d      	mov	r5, r1
	var3 = uncomp_data->humidity - var2;
1a0007e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
1a0007e4:	f002 face 	bl	1a002d84 <__aeabi_ui2d>
1a0007e8:	4622      	mov	r2, r4
1a0007ea:	462b      	mov	r3, r5
1a0007ec:	f002 f98c 	bl	1a002b08 <__aeabi_dsub>
1a0007f0:	e9cd 0100 	strd	r0, r1, [sp]
	var4 = ((double) calib_data->dig_H2) / 65536.0;
1a0007f4:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
1a0007f8:	f002 fad4 	bl	1a002da4 <__aeabi_i2d>
1a0007fc:	2200      	movs	r2, #0
1a0007fe:	4b3c      	ldr	r3, [pc, #240]	; (1a0008f0 <compensate_humidity+0x168>)
1a000800:	f002 fb3a 	bl	1a002e78 <__aeabi_dmul>
1a000804:	e9cd 0102 	strd	r0, r1, [sp, #8]
	var5 = (1.0 + (((double) calib_data->dig_H3) / 67108864.0) * var1);
1a000808:	f89a 001c 	ldrb.w	r0, [sl, #28]
1a00080c:	f002 faba 	bl	1a002d84 <__aeabi_ui2d>
1a000810:	2200      	movs	r2, #0
1a000812:	4b38      	ldr	r3, [pc, #224]	; (1a0008f4 <compensate_humidity+0x16c>)
1a000814:	f002 fb30 	bl	1a002e78 <__aeabi_dmul>
1a000818:	4632      	mov	r2, r6
1a00081a:	463b      	mov	r3, r7
1a00081c:	f002 fb2c 	bl	1a002e78 <__aeabi_dmul>
1a000820:	2200      	movs	r2, #0
1a000822:	4b35      	ldr	r3, [pc, #212]	; (1a0008f8 <compensate_humidity+0x170>)
1a000824:	f002 f972 	bl	1a002b0c <__adddf3>
1a000828:	4604      	mov	r4, r0
1a00082a:	460d      	mov	r5, r1
	var6 = 1.0 + (((double) calib_data->dig_H6) / 67108864.0) * var1 * var5;
1a00082c:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
1a000830:	f002 fab8 	bl	1a002da4 <__aeabi_i2d>
1a000834:	2200      	movs	r2, #0
1a000836:	4b2f      	ldr	r3, [pc, #188]	; (1a0008f4 <compensate_humidity+0x16c>)
1a000838:	f002 fb1e 	bl	1a002e78 <__aeabi_dmul>
1a00083c:	4632      	mov	r2, r6
1a00083e:	463b      	mov	r3, r7
1a000840:	f002 fb1a 	bl	1a002e78 <__aeabi_dmul>
1a000844:	4622      	mov	r2, r4
1a000846:	462b      	mov	r3, r5
1a000848:	f002 fb16 	bl	1a002e78 <__aeabi_dmul>
1a00084c:	2200      	movs	r2, #0
1a00084e:	4b2a      	ldr	r3, [pc, #168]	; (1a0008f8 <compensate_humidity+0x170>)
1a000850:	f002 f95c 	bl	1a002b0c <__adddf3>
1a000854:	4680      	mov	r8, r0
1a000856:	4689      	mov	r9, r1
	var6 = var3 * var4 * (var5 * var6);
1a000858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00085c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a000860:	f002 fb0a 	bl	1a002e78 <__aeabi_dmul>
1a000864:	4606      	mov	r6, r0
1a000866:	460f      	mov	r7, r1
1a000868:	4642      	mov	r2, r8
1a00086a:	464b      	mov	r3, r9
1a00086c:	4620      	mov	r0, r4
1a00086e:	4629      	mov	r1, r5
1a000870:	f002 fb02 	bl	1a002e78 <__aeabi_dmul>
1a000874:	4602      	mov	r2, r0
1a000876:	460b      	mov	r3, r1
1a000878:	4630      	mov	r0, r6
1a00087a:	4639      	mov	r1, r7
1a00087c:	f002 fafc 	bl	1a002e78 <__aeabi_dmul>
1a000880:	4604      	mov	r4, r0
1a000882:	460d      	mov	r5, r1
	humidity = var6 * (1.0 - ((double) calib_data->dig_H1) * var6 / 524288.0);
1a000884:	f89a 0018 	ldrb.w	r0, [sl, #24]
1a000888:	f002 fa7c 	bl	1a002d84 <__aeabi_ui2d>
1a00088c:	4622      	mov	r2, r4
1a00088e:	462b      	mov	r3, r5
1a000890:	f002 faf2 	bl	1a002e78 <__aeabi_dmul>
1a000894:	2200      	movs	r2, #0
1a000896:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a00089a:	f002 faed 	bl	1a002e78 <__aeabi_dmul>
1a00089e:	4602      	mov	r2, r0
1a0008a0:	460b      	mov	r3, r1
1a0008a2:	2000      	movs	r0, #0
1a0008a4:	4914      	ldr	r1, [pc, #80]	; (1a0008f8 <compensate_humidity+0x170>)
1a0008a6:	f002 f92f 	bl	1a002b08 <__aeabi_dsub>
1a0008aa:	4622      	mov	r2, r4
1a0008ac:	462b      	mov	r3, r5
1a0008ae:	f002 fae3 	bl	1a002e78 <__aeabi_dmul>
1a0008b2:	4604      	mov	r4, r0
1a0008b4:	460d      	mov	r5, r1
	if (humidity > humidity_max) {
1a0008b6:	2200      	movs	r2, #0
1a0008b8:	4b10      	ldr	r3, [pc, #64]	; (1a0008fc <compensate_humidity+0x174>)
1a0008ba:	f002 fd6d 	bl	1a003398 <__aeabi_dcmpgt>
1a0008be:	b948      	cbnz	r0, 1a0008d4 <compensate_humidity+0x14c>
		humidity = humidity_max;
	} else if (humidity < humidity_min) {
1a0008c0:	2200      	movs	r2, #0
1a0008c2:	2300      	movs	r3, #0
1a0008c4:	4620      	mov	r0, r4
1a0008c6:	4629      	mov	r1, r5
1a0008c8:	f002 fd48 	bl	1a00335c <__aeabi_dcmplt>
1a0008cc:	b120      	cbz	r0, 1a0008d8 <compensate_humidity+0x150>
		humidity = humidity_min;
1a0008ce:	2400      	movs	r4, #0
1a0008d0:	2500      	movs	r5, #0
	}

	return humidity;
1a0008d2:	e001      	b.n	1a0008d8 <compensate_humidity+0x150>
		humidity = humidity_max;
1a0008d4:	2400      	movs	r4, #0
1a0008d6:	4d09      	ldr	r5, [pc, #36]	; (1a0008fc <compensate_humidity+0x174>)
}
1a0008d8:	4620      	mov	r0, r4
1a0008da:	4629      	mov	r1, r5
1a0008dc:	b004      	add	sp, #16
1a0008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0008e2:	bf00      	nop
1a0008e4:	40f2c000 	.word	0x40f2c000
1a0008e8:	40500000 	.word	0x40500000
1a0008ec:	3f100000 	.word	0x3f100000
1a0008f0:	3ef00000 	.word	0x3ef00000
1a0008f4:	3e500000 	.word	0x3e500000
1a0008f8:	3ff00000 	.word	0x3ff00000
1a0008fc:	40590000 	.word	0x40590000

1a000900 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff,
		const uint8_t *reg_data, uint8_t len) {
1a000900:	b470      	push	{r4, r5, r6}
	uint8_t index;

	for (index = 1; index < len; index++) {
1a000902:	2401      	movs	r4, #1
1a000904:	429c      	cmp	r4, r3
1a000906:	d209      	bcs.n	1a00091c <interleave_reg_addr+0x1c>
		temp_buff[(index * 2) - 1] = reg_addr[index];
1a000908:	0065      	lsls	r5, r4, #1
1a00090a:	3d01      	subs	r5, #1
1a00090c:	5d06      	ldrb	r6, [r0, r4]
1a00090e:	554e      	strb	r6, [r1, r5]
		temp_buff[index * 2] = reg_data[index];
1a000910:	5d15      	ldrb	r5, [r2, r4]
1a000912:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
	for (index = 1; index < len; index++) {
1a000916:	3401      	adds	r4, #1
1a000918:	b2e4      	uxtb	r4, r4
1a00091a:	e7f3      	b.n	1a000904 <interleave_reg_addr+0x4>
	}
}
1a00091c:	bc70      	pop	{r4, r5, r6}
1a00091e:	4770      	bx	lr

1a000920 <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data,
		struct bme280_dev *dev) {
	struct bme280_calib_data *calib_data = &dev->calib_data;

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
1a000920:	7842      	ldrb	r2, [r0, #1]
1a000922:	7803      	ldrb	r3, [r0, #0]
1a000924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000928:	820b      	strh	r3, [r1, #16]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
1a00092a:	78c2      	ldrb	r2, [r0, #3]
1a00092c:	7883      	ldrb	r3, [r0, #2]
1a00092e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000932:	824b      	strh	r3, [r1, #18]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
1a000934:	7942      	ldrb	r2, [r0, #5]
1a000936:	7903      	ldrb	r3, [r0, #4]
1a000938:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00093c:	828b      	strh	r3, [r1, #20]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
1a00093e:	79c2      	ldrb	r2, [r0, #7]
1a000940:	7983      	ldrb	r3, [r0, #6]
1a000942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000946:	82cb      	strh	r3, [r1, #22]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
1a000948:	7a42      	ldrb	r2, [r0, #9]
1a00094a:	7a03      	ldrb	r3, [r0, #8]
1a00094c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000950:	830b      	strh	r3, [r1, #24]
	calib_data->dig_P3 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
1a000952:	7ac2      	ldrb	r2, [r0, #11]
1a000954:	7a83      	ldrb	r3, [r0, #10]
1a000956:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P3 =
1a00095a:	834b      	strh	r3, [r1, #26]
	calib_data->dig_P4 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
1a00095c:	7b42      	ldrb	r2, [r0, #13]
1a00095e:	7b03      	ldrb	r3, [r0, #12]
1a000960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P4 =
1a000964:	838b      	strh	r3, [r1, #28]
	calib_data->dig_P5 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
1a000966:	7bc2      	ldrb	r2, [r0, #15]
1a000968:	7b83      	ldrb	r3, [r0, #14]
1a00096a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P5 =
1a00096e:	83cb      	strh	r3, [r1, #30]
	calib_data->dig_P6 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
1a000970:	7c42      	ldrb	r2, [r0, #17]
1a000972:	7c03      	ldrb	r3, [r0, #16]
1a000974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P6 =
1a000978:	840b      	strh	r3, [r1, #32]
	calib_data->dig_P7 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
1a00097a:	7cc2      	ldrb	r2, [r0, #19]
1a00097c:	7c83      	ldrb	r3, [r0, #18]
1a00097e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P7 =
1a000982:	844b      	strh	r3, [r1, #34]	; 0x22
	calib_data->dig_P8 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
1a000984:	7d42      	ldrb	r2, [r0, #21]
1a000986:	7d03      	ldrb	r3, [r0, #20]
1a000988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P8 =
1a00098c:	848b      	strh	r3, [r1, #36]	; 0x24
	calib_data->dig_P9 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
1a00098e:	7dc2      	ldrb	r2, [r0, #23]
1a000990:	7d83      	ldrb	r3, [r0, #22]
1a000992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P9 =
1a000996:	84cb      	strh	r3, [r1, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
1a000998:	7e43      	ldrb	r3, [r0, #25]
1a00099a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
}
1a00099e:	4770      	bx	lr

1a0009a0 <parse_humidity_calib_data>:
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
1a0009a0:	7842      	ldrb	r2, [r0, #1]
1a0009a2:	7803      	ldrb	r3, [r0, #0]
1a0009a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0009a8:	854b      	strh	r3, [r1, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
1a0009aa:	7883      	ldrb	r3, [r0, #2]
1a0009ac:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
	dig_H4_msb = (int16_t) (int8_t) reg_data[3] * 16;
1a0009b0:	f990 3003 	ldrsb.w	r3, [r0, #3]
1a0009b4:	b29b      	uxth	r3, r3
1a0009b6:	011b      	lsls	r3, r3, #4
1a0009b8:	b21b      	sxth	r3, r3
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
1a0009ba:	7902      	ldrb	r2, [r0, #4]
1a0009bc:	f002 020f 	and.w	r2, r2, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
1a0009c0:	4313      	orrs	r3, r2
1a0009c2:	85cb      	strh	r3, [r1, #46]	; 0x2e
	dig_H5_msb = (int16_t) (int8_t) reg_data[5] * 16;
1a0009c4:	f990 3005 	ldrsb.w	r3, [r0, #5]
1a0009c8:	b29b      	uxth	r3, r3
1a0009ca:	011b      	lsls	r3, r3, #4
1a0009cc:	b21b      	sxth	r3, r3
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
1a0009ce:	7902      	ldrb	r2, [r0, #4]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
1a0009d0:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a0009d4:	860b      	strh	r3, [r1, #48]	; 0x30
	calib_data->dig_H6 = (int8_t) reg_data[6];
1a0009d6:	f990 3006 	ldrsb.w	r3, [r0, #6]
1a0009da:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
}
1a0009de:	4770      	bx	lr

1a0009e0 <are_settings_changed>:
 */
static uint8_t are_settings_changed(uint8_t sub_settings,
		uint8_t desired_settings) {
	uint8_t settings_changed = FALSE;

	if (sub_settings & desired_settings) {
1a0009e0:	4208      	tst	r0, r1
1a0009e2:	d001      	beq.n	1a0009e8 <are_settings_changed+0x8>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
1a0009e4:	2001      	movs	r0, #1
1a0009e6:	4770      	bx	lr
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
1a0009e8:	2000      	movs	r0, #0
	}

	return settings_changed;
}
1a0009ea:	4770      	bx	lr

1a0009ec <null_ptr_check>:
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev) {
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
1a0009ec:	b150      	cbz	r0, 1a000a04 <null_ptr_check+0x18>
1a0009ee:	6842      	ldr	r2, [r0, #4]
1a0009f0:	b15a      	cbz	r2, 1a000a0a <null_ptr_check+0x1e>
1a0009f2:	6882      	ldr	r2, [r0, #8]
1a0009f4:	b162      	cbz	r2, 1a000a10 <null_ptr_check+0x24>
			|| (dev->delay_ms == NULL)) {
1a0009f6:	68c3      	ldr	r3, [r0, #12]
1a0009f8:	b10b      	cbz	r3, 1a0009fe <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
1a0009fa:	2000      	movs	r0, #0
	}

	return rslt;
}
1a0009fc:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
1a0009fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a02:	4770      	bx	lr
1a000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a08:	4770      	bx	lr
1a000a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a0e:	4770      	bx	lr
1a000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a14:	4770      	bx	lr
1a000a16:	Address 0x000000001a000a16 is out of bounds.


1a000a18 <bme280PrintSensorData>:
void bme280PrintSensorData(struct bme280_data *comp_data) {
1a000a18:	b570      	push	{r4, r5, r6, lr}
1a000a1a:	b084      	sub	sp, #16
1a000a1c:	4605      	mov	r5, r0
	printf("%0.2f, %0.2f, %0.2f\r\n", comp_data->temperature,
1a000a1e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a000a22:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000a26:	e9d0 2300 	ldrd	r2, r3, [r0]
1a000a2a:	e9cd 2300 	strd	r2, r3, [sp]
1a000a2e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
1a000a32:	482a      	ldr	r0, [pc, #168]	; (1a000adc <bme280PrintSensorData+0xc4>)
1a000a34:	f002 fee0 	bl	1a0037f8 <iprintf>
	uartWriteString(UART_USB, "Temperature: ");
1a000a38:	4929      	ldr	r1, [pc, #164]	; (1a000ae0 <bme280PrintSensorData+0xc8>)
1a000a3a:	2003      	movs	r0, #3
1a000a3c:	f001 fceb 	bl	1a002416 <uartWriteString>
	floatToString(comp_data->temperature, uartBuff, 2);
1a000a40:	4c28      	ldr	r4, [pc, #160]	; (1a000ae4 <bme280PrintSensorData+0xcc>)
1a000a42:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
1a000a46:	f002 fcd9 	bl	1a0033fc <__aeabi_d2f>
1a000a4a:	ee00 0a10 	vmov	s0, r0
1a000a4e:	2102      	movs	r1, #2
1a000a50:	4620      	mov	r0, r4
1a000a52:	f001 ff99 	bl	1a002988 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000a56:	4621      	mov	r1, r4
1a000a58:	2003      	movs	r0, #3
1a000a5a:	f001 fcdc 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\rGrados C");
1a000a5e:	4922      	ldr	r1, [pc, #136]	; (1a000ae8 <bme280PrintSensorData+0xd0>)
1a000a60:	2003      	movs	r0, #3
1a000a62:	f001 fcd8 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000a66:	4e21      	ldr	r6, [pc, #132]	; (1a000aec <bme280PrintSensorData+0xd4>)
1a000a68:	4631      	mov	r1, r6
1a000a6a:	2003      	movs	r0, #3
1a000a6c:	f001 fcd3 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "Humidity: ");
1a000a70:	491f      	ldr	r1, [pc, #124]	; (1a000af0 <bme280PrintSensorData+0xd8>)
1a000a72:	2003      	movs	r0, #3
1a000a74:	f001 fccf 	bl	1a002416 <uartWriteString>
	floatToString(comp_data->humidity, uartBuff, 4);
1a000a78:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
1a000a7c:	f002 fcbe 	bl	1a0033fc <__aeabi_d2f>
1a000a80:	ee00 0a10 	vmov	s0, r0
1a000a84:	2104      	movs	r1, #4
1a000a86:	4620      	mov	r0, r4
1a000a88:	f001 ff7e 	bl	1a002988 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000a8c:	4621      	mov	r1, r4
1a000a8e:	2003      	movs	r0, #3
1a000a90:	f001 fcc1 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\r%");
1a000a94:	4917      	ldr	r1, [pc, #92]	; (1a000af4 <bme280PrintSensorData+0xdc>)
1a000a96:	2003      	movs	r0, #3
1a000a98:	f001 fcbd 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000a9c:	4631      	mov	r1, r6
1a000a9e:	2003      	movs	r0, #3
1a000aa0:	f001 fcb9 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "Pressure: ");
1a000aa4:	4914      	ldr	r1, [pc, #80]	; (1a000af8 <bme280PrintSensorData+0xe0>)
1a000aa6:	2003      	movs	r0, #3
1a000aa8:	f001 fcb5 	bl	1a002416 <uartWriteString>
	floatToString(comp_data->pressure, uartBuff, 2);
1a000aac:	e9d5 0100 	ldrd	r0, r1, [r5]
1a000ab0:	f002 fca4 	bl	1a0033fc <__aeabi_d2f>
1a000ab4:	ee00 0a10 	vmov	s0, r0
1a000ab8:	2102      	movs	r1, #2
1a000aba:	4620      	mov	r0, r4
1a000abc:	f001 ff64 	bl	1a002988 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000ac0:	4621      	mov	r1, r4
1a000ac2:	2003      	movs	r0, #3
1a000ac4:	f001 fca7 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\rPa");
1a000ac8:	490c      	ldr	r1, [pc, #48]	; (1a000afc <bme280PrintSensorData+0xe4>)
1a000aca:	2003      	movs	r0, #3
1a000acc:	f001 fca3 	bl	1a002416 <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000ad0:	4631      	mov	r1, r6
1a000ad2:	2003      	movs	r0, #3
1a000ad4:	f001 fc9f 	bl	1a002416 <uartWriteString>
}
1a000ad8:	b004      	add	sp, #16
1a000ada:	bd70      	pop	{r4, r5, r6, pc}
1a000adc:	1a0047cc 	.word	0x1a0047cc
1a000ae0:	1a0047e4 	.word	0x1a0047e4
1a000ae4:	100000b0 	.word	0x100000b0
1a000ae8:	1a0047f4 	.word	0x1a0047f4
1a000aec:	1a0048bc 	.word	0x1a0048bc
1a000af0:	1a004800 	.word	0x1a004800
1a000af4:	1a00480c 	.word	0x1a00480c
1a000af8:	1a004810 	.word	0x1a004810
1a000afc:	1a00481c 	.word	0x1a00481c

1a000b00 <bme280Delay_ms>:
void bme280Delay_ms(uint32_t period_ms) {
1a000b00:	b508      	push	{r3, lr}
	delay(period_ms);
1a000b02:	2100      	movs	r1, #0
1a000b04:	f001 ff24 	bl	1a002950 <delay>
}
1a000b08:	bd08      	pop	{r3, pc}

1a000b0a <bme280I2cRead>:
		uint16_t len) {
1a000b0a:	b500      	push	{lr}
1a000b0c:	b087      	sub	sp, #28
1a000b0e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (i2cRead(I2C0, dev_id, &reg_addr, 1, TRUE, reg_data, len, TRUE)) {
1a000b12:	2101      	movs	r1, #1
1a000b14:	9103      	str	r1, [sp, #12]
1a000b16:	9302      	str	r3, [sp, #8]
1a000b18:	9201      	str	r2, [sp, #4]
1a000b1a:	9100      	str	r1, [sp, #0]
1a000b1c:	460b      	mov	r3, r1
1a000b1e:	f10d 0217 	add.w	r2, sp, #23
1a000b22:	4601      	mov	r1, r0
1a000b24:	2000      	movs	r0, #0
1a000b26:	f001 fd46 	bl	1a0025b6 <i2cRead>
1a000b2a:	b118      	cbz	r0, 1a000b34 <bme280I2cRead+0x2a>
		rslt = BME280_OK;
1a000b2c:	2000      	movs	r0, #0
}
1a000b2e:	b007      	add	sp, #28
1a000b30:	f85d fb04 	ldr.w	pc, [sp], #4
		rslt = 5; //
1a000b34:	2005      	movs	r0, #5
1a000b36:	e7fa      	b.n	1a000b2e <bme280I2cRead+0x24>

1a000b38 <bme280I2cWrite>:
		uint16_t len) {
1a000b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000b3c:	b082      	sub	sp, #8
1a000b3e:	af02      	add	r7, sp, #8
1a000b40:	469e      	mov	lr, r3
	uint8_t nuevoLen = 2 * len;
1a000b42:	005b      	lsls	r3, r3, #1
1a000b44:	b2db      	uxtb	r3, r3
	uint8_t transmitDataBuffer[nuevoLen];
1a000b46:	1ddc      	adds	r4, r3, #7
1a000b48:	f404 74fc 	and.w	r4, r4, #504	; 0x1f8
1a000b4c:	ebad 0d04 	sub.w	sp, sp, r4
1a000b50:	f10d 0808 	add.w	r8, sp, #8
1a000b54:	4646      	mov	r6, r8
	for (i = 0; i < len; i += 2) {
1a000b56:	2400      	movs	r4, #0
1a000b58:	b2a5      	uxth	r5, r4
1a000b5a:	4575      	cmp	r5, lr
1a000b5c:	d209      	bcs.n	1a000b72 <bme280I2cWrite+0x3a>
		transmitDataBuffer[i] = reg_addr + i;
1a000b5e:	1865      	adds	r5, r4, r1
1a000b60:	5535      	strb	r5, [r6, r4]
		transmitDataBuffer[i + 1] = reg_data[i];
1a000b62:	1c65      	adds	r5, r4, #1
1a000b64:	f812 c004 	ldrb.w	ip, [r2, r4]
1a000b68:	f806 c005 	strb.w	ip, [r6, r5]
	for (i = 0; i < len; i += 2) {
1a000b6c:	3402      	adds	r4, #2
1a000b6e:	b2e4      	uxtb	r4, r4
1a000b70:	e7f2      	b.n	1a000b58 <bme280I2cWrite+0x20>
	if (i2cWrite(I2C0, dev_id, transmitDataBuffer, nuevoLen, TRUE)) {
1a000b72:	2201      	movs	r2, #1
1a000b74:	9200      	str	r2, [sp, #0]
1a000b76:	4642      	mov	r2, r8
1a000b78:	4601      	mov	r1, r0
1a000b7a:	2000      	movs	r0, #0
1a000b7c:	f001 fd2f 	bl	1a0025de <i2cWrite>
1a000b80:	b118      	cbz	r0, 1a000b8a <bme280I2cWrite+0x52>
		rslt = BME280_OK;
1a000b82:	2000      	movs	r0, #0
}
1a000b84:	46bd      	mov	sp, r7
1a000b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rslt = 5;	//@retval >0 -> Failure Info
1a000b8a:	2005      	movs	r0, #5
1a000b8c:	e7fa      	b.n	1a000b84 <bme280I2cWrite+0x4c>

1a000b8e <bme280GetRegs>:
		const struct bme280_dev *dev) {
1a000b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000b92:	4605      	mov	r5, r0
1a000b94:	4688      	mov	r8, r1
1a000b96:	4617      	mov	r7, r2
1a000b98:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
1a000b9a:	4618      	mov	r0, r3
1a000b9c:	f7ff ff26 	bl	1a0009ec <null_ptr_check>
	if (rslt == BME280_OK) {
1a000ba0:	4603      	mov	r3, r0
1a000ba2:	b960      	cbnz	r0, 1a000bbe <bme280GetRegs+0x30>
		if (dev->intf != BME280_I2C_INTF) {
1a000ba4:	78a3      	ldrb	r3, [r4, #2]
1a000ba6:	2b01      	cmp	r3, #1
1a000ba8:	d001      	beq.n	1a000bae <bme280GetRegs+0x20>
			reg_addr = reg_addr | 0x80;
1a000baa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
1a000bae:	6866      	ldr	r6, [r4, #4]
1a000bb0:	463b      	mov	r3, r7
1a000bb2:	4642      	mov	r2, r8
1a000bb4:	4629      	mov	r1, r5
1a000bb6:	7860      	ldrb	r0, [r4, #1]
1a000bb8:	47b0      	blx	r6
		if (rslt != BME280_OK) {
1a000bba:	4603      	mov	r3, r0
1a000bbc:	b910      	cbnz	r0, 1a000bc4 <bme280GetRegs+0x36>
}
1a000bbe:	4618      	mov	r0, r3
1a000bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = BME280_E_COMM_FAIL;
1a000bc4:	f06f 0303 	mvn.w	r3, #3
1a000bc8:	e7f9      	b.n	1a000bbe <bme280GetRegs+0x30>

1a000bca <get_calib_data>:
static int8_t get_calib_data(struct bme280_dev *dev) {
1a000bca:	b530      	push	{r4, r5, lr}
1a000bcc:	b089      	sub	sp, #36	; 0x24
1a000bce:	4604      	mov	r4, r0
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
1a000bd0:	2300      	movs	r3, #0
1a000bd2:	9301      	str	r3, [sp, #4]
1a000bd4:	9302      	str	r3, [sp, #8]
1a000bd6:	9303      	str	r3, [sp, #12]
1a000bd8:	9304      	str	r3, [sp, #16]
1a000bda:	9305      	str	r3, [sp, #20]
1a000bdc:	9306      	str	r3, [sp, #24]
1a000bde:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = bme280GetRegs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN,
1a000be2:	4603      	mov	r3, r0
1a000be4:	221a      	movs	r2, #26
1a000be6:	a901      	add	r1, sp, #4
1a000be8:	2088      	movs	r0, #136	; 0x88
1a000bea:	f7ff ffd0 	bl	1a000b8e <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000bee:	4605      	mov	r5, r0
1a000bf0:	b110      	cbz	r0, 1a000bf8 <get_calib_data+0x2e>
}
1a000bf2:	4628      	mov	r0, r5
1a000bf4:	b009      	add	sp, #36	; 0x24
1a000bf6:	bd30      	pop	{r4, r5, pc}
		parse_temp_press_calib_data(calib_data, dev);
1a000bf8:	4621      	mov	r1, r4
1a000bfa:	a801      	add	r0, sp, #4
1a000bfc:	f7ff fe90 	bl	1a000920 <parse_temp_press_calib_data>
		rslt = bme280GetRegs(reg_addr, calib_data,
1a000c00:	4623      	mov	r3, r4
1a000c02:	2207      	movs	r2, #7
1a000c04:	a901      	add	r1, sp, #4
1a000c06:	20e1      	movs	r0, #225	; 0xe1
1a000c08:	f7ff ffc1 	bl	1a000b8e <bme280GetRegs>
		if (rslt == BME280_OK) {
1a000c0c:	4605      	mov	r5, r0
1a000c0e:	2800      	cmp	r0, #0
1a000c10:	d1ef      	bne.n	1a000bf2 <get_calib_data+0x28>
			parse_humidity_calib_data(calib_data, dev);
1a000c12:	4621      	mov	r1, r4
1a000c14:	a801      	add	r0, sp, #4
1a000c16:	f7ff fec3 	bl	1a0009a0 <parse_humidity_calib_data>
1a000c1a:	e7ea      	b.n	1a000bf2 <get_calib_data+0x28>

1a000c1c <bme280SetRegs>:
		const struct bme280_dev *dev) {
1a000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c1e:	b087      	sub	sp, #28
1a000c20:	4605      	mov	r5, r0
1a000c22:	460f      	mov	r7, r1
1a000c24:	4614      	mov	r4, r2
1a000c26:	461e      	mov	r6, r3
	if (len > 10) {
1a000c28:	2a0a      	cmp	r2, #10
1a000c2a:	d900      	bls.n	1a000c2e <bme280SetRegs+0x12>
		len = 10;
1a000c2c:	240a      	movs	r4, #10
	rslt = null_ptr_check(dev);
1a000c2e:	4630      	mov	r0, r6
1a000c30:	f7ff fedc 	bl	1a0009ec <null_ptr_check>
	if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
1a000c34:	bb48      	cbnz	r0, 1a000c8a <bme280SetRegs+0x6e>
1a000c36:	b35d      	cbz	r5, 1a000c90 <bme280SetRegs+0x74>
1a000c38:	b36f      	cbz	r7, 1a000c96 <bme280SetRegs+0x7a>
		if (len != 0) {
1a000c3a:	b37c      	cbz	r4, 1a000c9c <bme280SetRegs+0x80>
			temp_buff[0] = reg_data[0];
1a000c3c:	783b      	ldrb	r3, [r7, #0]
1a000c3e:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
1a000c42:	78b3      	ldrb	r3, [r6, #2]
1a000c44:	2b01      	cmp	r3, #1
1a000c46:	d009      	beq.n	1a000c5c <bme280SetRegs+0x40>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++) {
1a000c48:	2200      	movs	r2, #0
1a000c4a:	4294      	cmp	r4, r2
1a000c4c:	d906      	bls.n	1a000c5c <bme280SetRegs+0x40>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
1a000c4e:	5ca9      	ldrb	r1, [r5, r2]
1a000c50:	f001 017f 	and.w	r1, r1, #127	; 0x7f
1a000c54:	54a9      	strb	r1, [r5, r2]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++) {
1a000c56:	3201      	adds	r2, #1
1a000c58:	b2d2      	uxtb	r2, r2
1a000c5a:	e7f6      	b.n	1a000c4a <bme280SetRegs+0x2e>
			if (len > 1) {
1a000c5c:	2c01      	cmp	r4, #1
1a000c5e:	d80a      	bhi.n	1a000c76 <bme280SetRegs+0x5a>
				temp_len = len;
1a000c60:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
1a000c62:	68b4      	ldr	r4, [r6, #8]
1a000c64:	aa01      	add	r2, sp, #4
1a000c66:	7829      	ldrb	r1, [r5, #0]
1a000c68:	7870      	ldrb	r0, [r6, #1]
1a000c6a:	47a0      	blx	r4
			if (rslt != BME280_OK) {
1a000c6c:	4603      	mov	r3, r0
1a000c6e:	b9c0      	cbnz	r0, 1a000ca2 <bme280SetRegs+0x86>
}
1a000c70:	4618      	mov	r0, r3
1a000c72:	b007      	add	sp, #28
1a000c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
1a000c76:	4623      	mov	r3, r4
1a000c78:	463a      	mov	r2, r7
1a000c7a:	a901      	add	r1, sp, #4
1a000c7c:	4628      	mov	r0, r5
1a000c7e:	f7ff fe3f 	bl	1a000900 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
1a000c82:	0064      	lsls	r4, r4, #1
1a000c84:	3c01      	subs	r4, #1
1a000c86:	b2a3      	uxth	r3, r4
1a000c88:	e7eb      	b.n	1a000c62 <bme280SetRegs+0x46>
		rslt = BME280_E_NULL_PTR;
1a000c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000c8e:	e7ef      	b.n	1a000c70 <bme280SetRegs+0x54>
1a000c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000c94:	e7ec      	b.n	1a000c70 <bme280SetRegs+0x54>
1a000c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000c9a:	e7e9      	b.n	1a000c70 <bme280SetRegs+0x54>
			rslt = BME280_E_INVALID_LEN;
1a000c9c:	f06f 0302 	mvn.w	r3, #2
1a000ca0:	e7e6      	b.n	1a000c70 <bme280SetRegs+0x54>
				rslt = BME280_E_COMM_FAIL;
1a000ca2:	f06f 0303 	mvn.w	r3, #3
1a000ca6:	e7e3      	b.n	1a000c70 <bme280SetRegs+0x54>

1a000ca8 <set_osr_humidity_settings>:
		const struct bme280_dev *dev) {
1a000ca8:	b510      	push	{r4, lr}
1a000caa:	b082      	sub	sp, #8
1a000cac:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
1a000cae:	23f2      	movs	r3, #242	; 0xf2
1a000cb0:	f88d 3005 	strb.w	r3, [sp, #5]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
1a000cb4:	7883      	ldrb	r3, [r0, #2]
1a000cb6:	f003 0307 	and.w	r3, r3, #7
1a000cba:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = bme280SetRegs(&reg_addr, &ctrl_hum, 1, dev);
1a000cbe:	460b      	mov	r3, r1
1a000cc0:	2201      	movs	r2, #1
1a000cc2:	f10d 0107 	add.w	r1, sp, #7
1a000cc6:	f10d 0005 	add.w	r0, sp, #5
1a000cca:	f7ff ffa7 	bl	1a000c1c <bme280SetRegs>
	if (rslt == BME280_OK) {
1a000cce:	4603      	mov	r3, r0
1a000cd0:	b110      	cbz	r0, 1a000cd8 <set_osr_humidity_settings+0x30>
}
1a000cd2:	4618      	mov	r0, r3
1a000cd4:	b002      	add	sp, #8
1a000cd6:	bd10      	pop	{r4, pc}
		reg_addr = BME280_CTRL_MEAS_ADDR;
1a000cd8:	20f4      	movs	r0, #244	; 0xf4
1a000cda:	f88d 0005 	strb.w	r0, [sp, #5]
		rslt = bme280GetRegs(reg_addr, &ctrl_meas, 1, dev);
1a000cde:	4623      	mov	r3, r4
1a000ce0:	2201      	movs	r2, #1
1a000ce2:	f10d 0106 	add.w	r1, sp, #6
1a000ce6:	f7ff ff52 	bl	1a000b8e <bme280GetRegs>
		if (rslt == BME280_OK) {
1a000cea:	4603      	mov	r3, r0
1a000cec:	2800      	cmp	r0, #0
1a000cee:	d1f0      	bne.n	1a000cd2 <set_osr_humidity_settings+0x2a>
			rslt = bme280SetRegs(&reg_addr, &ctrl_meas, 1, dev);
1a000cf0:	4623      	mov	r3, r4
1a000cf2:	2201      	movs	r2, #1
1a000cf4:	f10d 0106 	add.w	r1, sp, #6
1a000cf8:	f10d 0005 	add.w	r0, sp, #5
1a000cfc:	f7ff ff8e 	bl	1a000c1c <bme280SetRegs>
1a000d00:	4603      	mov	r3, r0
1a000d02:	e7e6      	b.n	1a000cd2 <set_osr_humidity_settings+0x2a>

1a000d04 <set_osr_press_temp_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000d04:	b570      	push	{r4, r5, r6, lr}
1a000d06:	b082      	sub	sp, #8
1a000d08:	4605      	mov	r5, r0
1a000d0a:	460e      	mov	r6, r1
1a000d0c:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
1a000d0e:	20f4      	movs	r0, #244	; 0xf4
1a000d10:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &reg_data, 1, dev);
1a000d14:	4613      	mov	r3, r2
1a000d16:	2201      	movs	r2, #1
1a000d18:	f10d 0106 	add.w	r1, sp, #6
1a000d1c:	f7ff ff37 	bl	1a000b8e <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000d20:	4603      	mov	r3, r0
1a000d22:	b970      	cbnz	r0, 1a000d42 <set_osr_press_temp_settings+0x3e>
		if (desired_settings & BME280_OSR_PRESS_SEL) {
1a000d24:	f015 0f01 	tst.w	r5, #1
1a000d28:	d10e      	bne.n	1a000d48 <set_osr_press_temp_settings+0x44>
		if (desired_settings & BME280_OSR_TEMP_SEL) {
1a000d2a:	f015 0f02 	tst.w	r5, #2
1a000d2e:	d111      	bne.n	1a000d54 <set_osr_press_temp_settings+0x50>
		rslt = bme280SetRegs(&reg_addr, &reg_data, 1, dev);
1a000d30:	4623      	mov	r3, r4
1a000d32:	2201      	movs	r2, #1
1a000d34:	f10d 0106 	add.w	r1, sp, #6
1a000d38:	f10d 0007 	add.w	r0, sp, #7
1a000d3c:	f7ff ff6e 	bl	1a000c1c <bme280SetRegs>
1a000d40:	4603      	mov	r3, r0
}
1a000d42:	4618      	mov	r0, r3
1a000d44:	b002      	add	sp, #8
1a000d46:	bd70      	pop	{r4, r5, r6, pc}
			fill_osr_press_settings(&reg_data, settings);
1a000d48:	4631      	mov	r1, r6
1a000d4a:	f10d 0006 	add.w	r0, sp, #6
1a000d4e:	f7ff fb47 	bl	1a0003e0 <fill_osr_press_settings>
1a000d52:	e7ea      	b.n	1a000d2a <set_osr_press_temp_settings+0x26>
			fill_osr_temp_settings(&reg_data, settings);
1a000d54:	4631      	mov	r1, r6
1a000d56:	f10d 0006 	add.w	r0, sp, #6
1a000d5a:	f7ff fb4c 	bl	1a0003f6 <fill_osr_temp_settings>
1a000d5e:	e7e7      	b.n	1a000d30 <set_osr_press_temp_settings+0x2c>

1a000d60 <set_osr_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000d60:	b570      	push	{r4, r5, r6, lr}
1a000d62:	4604      	mov	r4, r0
1a000d64:	460d      	mov	r5, r1
1a000d66:	4616      	mov	r6, r2
	if (desired_settings & BME280_OSR_HUM_SEL) {
1a000d68:	f010 0f04 	tst.w	r0, #4
1a000d6c:	d104      	bne.n	1a000d78 <set_osr_settings+0x18>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
1a000d6e:	2001      	movs	r0, #1
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL)) {
1a000d70:	f014 0f03 	tst.w	r4, #3
1a000d74:	d105      	bne.n	1a000d82 <set_osr_settings+0x22>
}
1a000d76:	bd70      	pop	{r4, r5, r6, pc}
		rslt = set_osr_humidity_settings(settings, dev);
1a000d78:	4611      	mov	r1, r2
1a000d7a:	4628      	mov	r0, r5
1a000d7c:	f7ff ff94 	bl	1a000ca8 <set_osr_humidity_settings>
1a000d80:	e7f6      	b.n	1a000d70 <set_osr_settings+0x10>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
1a000d82:	4632      	mov	r2, r6
1a000d84:	4629      	mov	r1, r5
1a000d86:	4620      	mov	r0, r4
1a000d88:	f7ff ffbc 	bl	1a000d04 <set_osr_press_temp_settings>
1a000d8c:	e7f3      	b.n	1a000d76 <set_osr_settings+0x16>

1a000d8e <set_filter_standby_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000d8e:	b570      	push	{r4, r5, r6, lr}
1a000d90:	b082      	sub	sp, #8
1a000d92:	4605      	mov	r5, r0
1a000d94:	460e      	mov	r6, r1
1a000d96:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CONFIG_ADDR;
1a000d98:	20f5      	movs	r0, #245	; 0xf5
1a000d9a:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &reg_data, 1, dev);
1a000d9e:	4613      	mov	r3, r2
1a000da0:	2201      	movs	r2, #1
1a000da2:	f10d 0106 	add.w	r1, sp, #6
1a000da6:	f7ff fef2 	bl	1a000b8e <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000daa:	4603      	mov	r3, r0
1a000dac:	b970      	cbnz	r0, 1a000dcc <set_filter_standby_settings+0x3e>
		if (desired_settings & BME280_FILTER_SEL) {
1a000dae:	f015 0f08 	tst.w	r5, #8
1a000db2:	d10e      	bne.n	1a000dd2 <set_filter_standby_settings+0x44>
		if (desired_settings & BME280_STANDBY_SEL) {
1a000db4:	f015 0f10 	tst.w	r5, #16
1a000db8:	d111      	bne.n	1a000dde <set_filter_standby_settings+0x50>
		rslt = bme280SetRegs(&reg_addr, &reg_data, 1, dev);
1a000dba:	4623      	mov	r3, r4
1a000dbc:	2201      	movs	r2, #1
1a000dbe:	f10d 0106 	add.w	r1, sp, #6
1a000dc2:	f10d 0007 	add.w	r0, sp, #7
1a000dc6:	f7ff ff29 	bl	1a000c1c <bme280SetRegs>
1a000dca:	4603      	mov	r3, r0
}
1a000dcc:	4618      	mov	r0, r3
1a000dce:	b002      	add	sp, #8
1a000dd0:	bd70      	pop	{r4, r5, r6, pc}
			fill_filter_settings(&reg_data, settings);
1a000dd2:	4631      	mov	r1, r6
1a000dd4:	f10d 0006 	add.w	r0, sp, #6
1a000dd8:	f7ff faee 	bl	1a0003b8 <fill_filter_settings>
1a000ddc:	e7ea      	b.n	1a000db4 <set_filter_standby_settings+0x26>
			fill_standby_settings(&reg_data, settings);
1a000dde:	4631      	mov	r1, r6
1a000de0:	f10d 0006 	add.w	r0, sp, #6
1a000de4:	f7ff faf3 	bl	1a0003ce <fill_standby_settings>
1a000de8:	e7e7      	b.n	1a000dba <set_filter_standby_settings+0x2c>

1a000dea <reload_device_settings>:
		const struct bme280_dev *dev) {
1a000dea:	b538      	push	{r3, r4, r5, lr}
1a000dec:	4604      	mov	r4, r0
1a000dee:	460d      	mov	r5, r1
	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
1a000df0:	460a      	mov	r2, r1
1a000df2:	4601      	mov	r1, r0
1a000df4:	201f      	movs	r0, #31
1a000df6:	f7ff ffb3 	bl	1a000d60 <set_osr_settings>
	if (rslt == BME280_OK) {
1a000dfa:	4603      	mov	r3, r0
1a000dfc:	b108      	cbz	r0, 1a000e02 <reload_device_settings+0x18>
}
1a000dfe:	4618      	mov	r0, r3
1a000e00:	bd38      	pop	{r3, r4, r5, pc}
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings,
1a000e02:	462a      	mov	r2, r5
1a000e04:	4621      	mov	r1, r4
1a000e06:	201f      	movs	r0, #31
1a000e08:	f7ff ffc1 	bl	1a000d8e <set_filter_standby_settings>
1a000e0c:	4603      	mov	r3, r0
1a000e0e:	e7f6      	b.n	1a000dfe <reload_device_settings+0x14>

1a000e10 <write_power_mode>:
		const struct bme280_dev *dev) {
1a000e10:	b530      	push	{r4, r5, lr}
1a000e12:	b083      	sub	sp, #12
1a000e14:	4605      	mov	r5, r0
1a000e16:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
1a000e18:	20f4      	movs	r0, #244	; 0xf4
1a000e1a:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &sensor_mode_reg_val, 1, dev);
1a000e1e:	460b      	mov	r3, r1
1a000e20:	2201      	movs	r2, #1
1a000e22:	f10d 0106 	add.w	r1, sp, #6
1a000e26:	f7ff feb2 	bl	1a000b8e <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000e2a:	4603      	mov	r3, r0
1a000e2c:	b110      	cbz	r0, 1a000e34 <write_power_mode+0x24>
}
1a000e2e:	4618      	mov	r0, r3
1a000e30:	b003      	add	sp, #12
1a000e32:	bd30      	pop	{r4, r5, pc}
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val,
1a000e34:	f89d 0006 	ldrb.w	r0, [sp, #6]
1a000e38:	f020 0003 	bic.w	r0, r0, #3
1a000e3c:	b240      	sxtb	r0, r0
1a000e3e:	f005 0503 	and.w	r5, r5, #3
1a000e42:	4328      	orrs	r0, r5
1a000e44:	f88d 0006 	strb.w	r0, [sp, #6]
		rslt = bme280SetRegs(&reg_addr, &sensor_mode_reg_val, 1, dev);
1a000e48:	4623      	mov	r3, r4
1a000e4a:	2201      	movs	r2, #1
1a000e4c:	f10d 0106 	add.w	r1, sp, #6
1a000e50:	f10d 0007 	add.w	r0, sp, #7
1a000e54:	f7ff fee2 	bl	1a000c1c <bme280SetRegs>
1a000e58:	4603      	mov	r3, r0
1a000e5a:	e7e8      	b.n	1a000e2e <write_power_mode+0x1e>

1a000e5c <bme280GetSensorMode>:
int8_t bme280GetSensorMode(uint8_t *sensor_mode, const struct bme280_dev *dev) {
1a000e5c:	b538      	push	{r3, r4, r5, lr}
1a000e5e:	4605      	mov	r5, r0
1a000e60:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
1a000e62:	4608      	mov	r0, r1
1a000e64:	f7ff fdc2 	bl	1a0009ec <null_ptr_check>
	if (rslt == BME280_OK) {
1a000e68:	4603      	mov	r3, r0
1a000e6a:	b108      	cbz	r0, 1a000e70 <bme280GetSensorMode+0x14>
}
1a000e6c:	4618      	mov	r0, r3
1a000e6e:	bd38      	pop	{r3, r4, r5, pc}
		rslt = bme280GetRegs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
1a000e70:	4623      	mov	r3, r4
1a000e72:	2201      	movs	r2, #1
1a000e74:	4629      	mov	r1, r5
1a000e76:	20f4      	movs	r0, #244	; 0xf4
1a000e78:	f7ff fe89 	bl	1a000b8e <bme280GetRegs>
1a000e7c:	4603      	mov	r3, r0
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
1a000e7e:	782a      	ldrb	r2, [r5, #0]
1a000e80:	f002 0203 	and.w	r2, r2, #3
1a000e84:	702a      	strb	r2, [r5, #0]
1a000e86:	e7f1      	b.n	1a000e6c <bme280GetSensorMode+0x10>

1a000e88 <bme280SoftReset>:
int8_t bme280SoftReset(const struct bme280_dev *dev) {
1a000e88:	b530      	push	{r4, r5, lr}
1a000e8a:	b083      	sub	sp, #12
1a000e8c:	4605      	mov	r5, r0
	uint8_t reg_addr = BME280_RESET_ADDR;
1a000e8e:	23e0      	movs	r3, #224	; 0xe0
1a000e90:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = 0xB6;
1a000e94:	23b6      	movs	r3, #182	; 0xb6
1a000e96:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
1a000e9a:	f7ff fda7 	bl	1a0009ec <null_ptr_check>
	if (rslt == BME280_OK) {
1a000e9e:	4604      	mov	r4, r0
1a000ea0:	b110      	cbz	r0, 1a000ea8 <bme280SoftReset+0x20>
}
1a000ea2:	4620      	mov	r0, r4
1a000ea4:	b003      	add	sp, #12
1a000ea6:	bd30      	pop	{r4, r5, pc}
		rslt = bme280SetRegs(&reg_addr, &soft_rst_cmd, 1, dev);
1a000ea8:	462b      	mov	r3, r5
1a000eaa:	2201      	movs	r2, #1
1a000eac:	f10d 0106 	add.w	r1, sp, #6
1a000eb0:	f10d 0007 	add.w	r0, sp, #7
1a000eb4:	f7ff feb2 	bl	1a000c1c <bme280SetRegs>
1a000eb8:	4604      	mov	r4, r0
		dev->delay_ms(2);
1a000eba:	68eb      	ldr	r3, [r5, #12]
1a000ebc:	2002      	movs	r0, #2
1a000ebe:	4798      	blx	r3
1a000ec0:	e7ef      	b.n	1a000ea2 <bme280SoftReset+0x1a>
1a000ec2:	Address 0x000000001a000ec2 is out of bounds.


1a000ec4 <bme280Init>:
int8_t bme280Init(struct bme280_dev *dev) {
1a000ec4:	b570      	push	{r4, r5, r6, lr}
1a000ec6:	b082      	sub	sp, #8
1a000ec8:	4605      	mov	r5, r0
	uint8_t chip_id = 0;
1a000eca:	2300      	movs	r3, #0
1a000ecc:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
1a000ed0:	f7ff fd8c 	bl	1a0009ec <null_ptr_check>
	if (rslt == BME280_OK) {
1a000ed4:	4606      	mov	r6, r0
1a000ed6:	b370      	cbz	r0, 1a000f36 <bme280Init+0x72>
}
1a000ed8:	4630      	mov	r0, r6
1a000eda:	b002      	add	sp, #8
1a000edc:	bd70      	pop	{r4, r5, r6, pc}
					rslt = get_calib_data(dev);
1a000ede:	4628      	mov	r0, r5
1a000ee0:	f7ff fe73 	bl	1a000bca <get_calib_data>
1a000ee4:	4606      	mov	r6, r0
					printf("Resultado de get_calib_data (code %+d)\r\n", rslt);
1a000ee6:	4601      	mov	r1, r0
1a000ee8:	4814      	ldr	r0, [pc, #80]	; (1a000f3c <bme280Init+0x78>)
1a000eea:	f002 fc85 	bl	1a0037f8 <iprintf>
1a000eee:	e01d      	b.n	1a000f2c <bme280Init+0x68>
			dev->delay_ms(1);
1a000ef0:	68eb      	ldr	r3, [r5, #12]
1a000ef2:	2001      	movs	r0, #1
1a000ef4:	4798      	blx	r3
			--try_count;
1a000ef6:	3c01      	subs	r4, #1
1a000ef8:	b2e4      	uxtb	r4, r4
		while (try_count) {
1a000efa:	b1bc      	cbz	r4, 1a000f2c <bme280Init+0x68>
			rslt = bme280GetRegs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
1a000efc:	462b      	mov	r3, r5
1a000efe:	2201      	movs	r2, #1
1a000f00:	f10d 0107 	add.w	r1, sp, #7
1a000f04:	20d0      	movs	r0, #208	; 0xd0
1a000f06:	f7ff fe42 	bl	1a000b8e <bme280GetRegs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
1a000f0a:	4606      	mov	r6, r0
1a000f0c:	2800      	cmp	r0, #0
1a000f0e:	d1ef      	bne.n	1a000ef0 <bme280Init+0x2c>
1a000f10:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000f14:	2960      	cmp	r1, #96	; 0x60
1a000f16:	d1eb      	bne.n	1a000ef0 <bme280Init+0x2c>
				dev->chip_id = chip_id;
1a000f18:	7029      	strb	r1, [r5, #0]
				printf("Chip id : %d \r\n", dev->chip_id);
1a000f1a:	4809      	ldr	r0, [pc, #36]	; (1a000f40 <bme280Init+0x7c>)
1a000f1c:	f002 fc6c 	bl	1a0037f8 <iprintf>
				rslt = bme280SoftReset(dev);
1a000f20:	4628      	mov	r0, r5
1a000f22:	f7ff ffb1 	bl	1a000e88 <bme280SoftReset>
				if (rslt == BME280_OK) {
1a000f26:	4606      	mov	r6, r0
1a000f28:	2800      	cmp	r0, #0
1a000f2a:	d0d8      	beq.n	1a000ede <bme280Init+0x1a>
		if (!try_count) {
1a000f2c:	2c00      	cmp	r4, #0
1a000f2e:	d1d3      	bne.n	1a000ed8 <bme280Init+0x14>
			rslt = BME280_E_DEV_NOT_FOUND;
1a000f30:	f06f 0601 	mvn.w	r6, #1
1a000f34:	e7d0      	b.n	1a000ed8 <bme280Init+0x14>
	uint8_t try_count = 5;
1a000f36:	2405      	movs	r4, #5
1a000f38:	e7df      	b.n	1a000efa <bme280Init+0x36>
1a000f3a:	bf00      	nop
1a000f3c:	1a0047a0 	.word	0x1a0047a0
1a000f40:	1a004790 	.word	0x1a004790

1a000f44 <put_device_to_sleep>:
static int8_t put_device_to_sleep(const struct bme280_dev *dev) {
1a000f44:	b510      	push	{r4, lr}
1a000f46:	b084      	sub	sp, #16
1a000f48:	4604      	mov	r4, r0
	rslt = bme280GetRegs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
1a000f4a:	4603      	mov	r3, r0
1a000f4c:	2204      	movs	r2, #4
1a000f4e:	a903      	add	r1, sp, #12
1a000f50:	20f2      	movs	r0, #242	; 0xf2
1a000f52:	f7ff fe1c 	bl	1a000b8e <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000f56:	4603      	mov	r3, r0
1a000f58:	b110      	cbz	r0, 1a000f60 <put_device_to_sleep+0x1c>
}
1a000f5a:	4618      	mov	r0, r3
1a000f5c:	b004      	add	sp, #16
1a000f5e:	bd10      	pop	{r4, pc}
		parse_device_settings(reg_data, &settings);
1a000f60:	a901      	add	r1, sp, #4
1a000f62:	a803      	add	r0, sp, #12
1a000f64:	f7ff fa50 	bl	1a000408 <parse_device_settings>
		rslt = bme280SoftReset(dev);
1a000f68:	4620      	mov	r0, r4
1a000f6a:	f7ff ff8d 	bl	1a000e88 <bme280SoftReset>
		if (rslt == BME280_OK) {
1a000f6e:	4603      	mov	r3, r0
1a000f70:	2800      	cmp	r0, #0
1a000f72:	d1f2      	bne.n	1a000f5a <put_device_to_sleep+0x16>
			rslt = reload_device_settings(&settings, dev);
1a000f74:	4621      	mov	r1, r4
1a000f76:	a801      	add	r0, sp, #4
1a000f78:	f7ff ff37 	bl	1a000dea <reload_device_settings>
1a000f7c:	4603      	mov	r3, r0
1a000f7e:	e7ec      	b.n	1a000f5a <put_device_to_sleep+0x16>

1a000f80 <bme280SetSensorSettings>:
		const struct bme280_dev *dev) {
1a000f80:	b570      	push	{r4, r5, r6, lr}
1a000f82:	b082      	sub	sp, #8
1a000f84:	4606      	mov	r6, r0
1a000f86:	460d      	mov	r5, r1
	rslt = null_ptr_check(dev);
1a000f88:	4608      	mov	r0, r1
1a000f8a:	f7ff fd2f 	bl	1a0009ec <null_ptr_check>
1a000f8e:	4604      	mov	r4, r0
	printf("null_ptr_check (code %+d)\r\n", rslt);
1a000f90:	4601      	mov	r1, r0
1a000f92:	4822      	ldr	r0, [pc, #136]	; (1a00101c <bme280SetSensorSettings+0x9c>)
1a000f94:	f002 fc30 	bl	1a0037f8 <iprintf>
	if (rslt == BME280_OK) {
1a000f98:	b114      	cbz	r4, 1a000fa0 <bme280SetSensorSettings+0x20>
}
1a000f9a:	4620      	mov	r0, r4
1a000f9c:	b002      	add	sp, #8
1a000f9e:	bd70      	pop	{r4, r5, r6, pc}
		rslt = bme280GetSensorMode(&sensor_mode, dev);
1a000fa0:	4629      	mov	r1, r5
1a000fa2:	f10d 0007 	add.w	r0, sp, #7
1a000fa6:	f7ff ff59 	bl	1a000e5c <bme280GetSensorMode>
1a000faa:	4604      	mov	r4, r0
		printf("Resultado de getSensorMode (code %+d)\r\n", rslt);
1a000fac:	4601      	mov	r1, r0
1a000fae:	481c      	ldr	r0, [pc, #112]	; (1a001020 <bme280SetSensorSettings+0xa0>)
1a000fb0:	f002 fc22 	bl	1a0037f8 <iprintf>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE)) {
1a000fb4:	b914      	cbnz	r4, 1a000fbc <bme280SetSensorSettings+0x3c>
1a000fb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000fba:	b9d3      	cbnz	r3, 1a000ff2 <bme280SetSensorSettings+0x72>
		if (rslt == BME280_OK) {
1a000fbc:	2c00      	cmp	r4, #0
1a000fbe:	d1ec      	bne.n	1a000f9a <bme280SetSensorSettings+0x1a>
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings)) {
1a000fc0:	4631      	mov	r1, r6
1a000fc2:	2007      	movs	r0, #7
1a000fc4:	f7ff fd0c 	bl	1a0009e0 <are_settings_changed>
1a000fc8:	b9e0      	cbnz	r0, 1a001004 <bme280SetSensorSettings+0x84>
			if ((rslt == BME280_OK)
1a000fca:	2c00      	cmp	r4, #0
1a000fcc:	d1e5      	bne.n	1a000f9a <bme280SetSensorSettings+0x1a>
					&& are_settings_changed(FILTER_STANDBY_SETTINGS,
1a000fce:	4631      	mov	r1, r6
1a000fd0:	2018      	movs	r0, #24
1a000fd2:	f7ff fd05 	bl	1a0009e0 <are_settings_changed>
1a000fd6:	2800      	cmp	r0, #0
1a000fd8:	d0df      	beq.n	1a000f9a <bme280SetSensorSettings+0x1a>
				rslt = set_filter_standby_settings(desired_settings,
1a000fda:	462a      	mov	r2, r5
1a000fdc:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a000fe0:	4630      	mov	r0, r6
1a000fe2:	f7ff fed4 	bl	1a000d8e <set_filter_standby_settings>
1a000fe6:	4604      	mov	r4, r0
				printf(
1a000fe8:	4601      	mov	r1, r0
1a000fea:	480e      	ldr	r0, [pc, #56]	; (1a001024 <bme280SetSensorSettings+0xa4>)
1a000fec:	f002 fc04 	bl	1a0037f8 <iprintf>
1a000ff0:	e7d3      	b.n	1a000f9a <bme280SetSensorSettings+0x1a>
			rslt = put_device_to_sleep(dev);
1a000ff2:	4628      	mov	r0, r5
1a000ff4:	f7ff ffa6 	bl	1a000f44 <put_device_to_sleep>
1a000ff8:	4604      	mov	r4, r0
			printf("Resultado de put_device_to_sleep (code %+d)\r\n", rslt);
1a000ffa:	4601      	mov	r1, r0
1a000ffc:	480a      	ldr	r0, [pc, #40]	; (1a001028 <bme280SetSensorSettings+0xa8>)
1a000ffe:	f002 fbfb 	bl	1a0037f8 <iprintf>
1a001002:	e7db      	b.n	1a000fbc <bme280SetSensorSettings+0x3c>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
1a001004:	462a      	mov	r2, r5
1a001006:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a00100a:	4630      	mov	r0, r6
1a00100c:	f7ff fea8 	bl	1a000d60 <set_osr_settings>
1a001010:	4604      	mov	r4, r0
				printf("Resultado de set_osr_settings (code %+d)\r\n", rslt);
1a001012:	4601      	mov	r1, r0
1a001014:	4805      	ldr	r0, [pc, #20]	; (1a00102c <bme280SetSensorSettings+0xac>)
1a001016:	f002 fbef 	bl	1a0037f8 <iprintf>
1a00101a:	e7d6      	b.n	1a000fca <bme280SetSensorSettings+0x4a>
1a00101c:	1a004820 	.word	0x1a004820
1a001020:	1a00483c 	.word	0x1a00483c
1a001024:	1a0048c0 	.word	0x1a0048c0
1a001028:	1a004864 	.word	0x1a004864
1a00102c:	1a004894 	.word	0x1a004894

1a001030 <bme280SetSensorMode>:
int8_t bme280SetSensorMode(uint8_t sensor_mode, const struct bme280_dev *dev) {
1a001030:	b530      	push	{r4, r5, lr}
1a001032:	b083      	sub	sp, #12
1a001034:	4605      	mov	r5, r0
1a001036:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
1a001038:	4608      	mov	r0, r1
1a00103a:	f7ff fcd7 	bl	1a0009ec <null_ptr_check>
	if (rslt == BME280_OK) {
1a00103e:	4603      	mov	r3, r0
1a001040:	b110      	cbz	r0, 1a001048 <bme280SetSensorMode+0x18>
}
1a001042:	4618      	mov	r0, r3
1a001044:	b003      	add	sp, #12
1a001046:	bd30      	pop	{r4, r5, pc}
		rslt = bme280GetSensorMode(&last_set_mode, dev);
1a001048:	4621      	mov	r1, r4
1a00104a:	f10d 0007 	add.w	r0, sp, #7
1a00104e:	f7ff ff05 	bl	1a000e5c <bme280GetSensorMode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE)) {
1a001052:	4603      	mov	r3, r0
1a001054:	b910      	cbnz	r0, 1a00105c <bme280SetSensorMode+0x2c>
1a001056:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a00105a:	b93a      	cbnz	r2, 1a00106c <bme280SetSensorMode+0x3c>
		if (rslt == BME280_OK) {
1a00105c:	2b00      	cmp	r3, #0
1a00105e:	d1f0      	bne.n	1a001042 <bme280SetSensorMode+0x12>
			rslt = write_power_mode(sensor_mode, dev);
1a001060:	4621      	mov	r1, r4
1a001062:	4628      	mov	r0, r5
1a001064:	f7ff fed4 	bl	1a000e10 <write_power_mode>
1a001068:	4603      	mov	r3, r0
1a00106a:	e7ea      	b.n	1a001042 <bme280SetSensorMode+0x12>
			rslt = put_device_to_sleep(dev);
1a00106c:	4620      	mov	r0, r4
1a00106e:	f7ff ff69 	bl	1a000f44 <put_device_to_sleep>
1a001072:	4603      	mov	r3, r0
1a001074:	e7f2      	b.n	1a00105c <bme280SetSensorMode+0x2c>

1a001076 <bme280ParseSensorData>:
		struct bme280_uncomp_data *uncomp_data) {
1a001076:	b410      	push	{r4}
	data_msb = (uint32_t) reg_data[0] << 12;
1a001078:	7804      	ldrb	r4, [r0, #0]
	data_lsb = (uint32_t) reg_data[1] << 4;
1a00107a:	7843      	ldrb	r3, [r0, #1]
1a00107c:	011b      	lsls	r3, r3, #4
	data_xlsb = (uint32_t) reg_data[2] >> 4;
1a00107e:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
1a001080:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
1a001084:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a001088:	600b      	str	r3, [r1, #0]
	data_msb = (uint32_t) reg_data[3] << 12;
1a00108a:	78c4      	ldrb	r4, [r0, #3]
	data_lsb = (uint32_t) reg_data[4] << 4;
1a00108c:	7903      	ldrb	r3, [r0, #4]
1a00108e:	011b      	lsls	r3, r3, #4
	data_xlsb = (uint32_t) reg_data[5] >> 4;
1a001090:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
1a001092:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
1a001096:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a00109a:	604b      	str	r3, [r1, #4]
	data_lsb = (uint32_t) reg_data[6] << 8;
1a00109c:	7982      	ldrb	r2, [r0, #6]
	data_msb = (uint32_t) reg_data[7];
1a00109e:	79c3      	ldrb	r3, [r0, #7]
	uncomp_data->humidity = data_msb | data_lsb;
1a0010a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010a4:	608b      	str	r3, [r1, #8]
}
1a0010a6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0010aa:	4770      	bx	lr

1a0010ac <bme280CompensateData>:
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
1a0010ac:	b361      	cbz	r1, 1a001108 <bme280CompensateData+0x5c>
		struct bme280_data *comp_data, struct bme280_calib_data *calib_data) {
1a0010ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0010b0:	460f      	mov	r7, r1
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
1a0010b2:	b362      	cbz	r2, 1a00110e <bme280CompensateData+0x62>
1a0010b4:	b373      	cbz	r3, 1a001114 <bme280CompensateData+0x68>
1a0010b6:	461e      	mov	r6, r3
1a0010b8:	4614      	mov	r4, r2
1a0010ba:	4605      	mov	r5, r0
		comp_data->temperature = 0;
1a0010bc:	2200      	movs	r2, #0
1a0010be:	2300      	movs	r3, #0
1a0010c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
		comp_data->pressure = 0;
1a0010c4:	e9c4 2300 	strd	r2, r3, [r4]
		comp_data->humidity = 0;
1a0010c8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
1a0010cc:	f010 0f07 	tst.w	r0, #7
1a0010d0:	d113      	bne.n	1a0010fa <bme280CompensateData+0x4e>
		if (sensor_comp & BME280_PRESS) {
1a0010d2:	f015 0f01 	tst.w	r5, #1
1a0010d6:	d005      	beq.n	1a0010e4 <bme280CompensateData+0x38>
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
1a0010d8:	4631      	mov	r1, r6
1a0010da:	4638      	mov	r0, r7
1a0010dc:	f7ff fa2c 	bl	1a000538 <compensate_pressure>
1a0010e0:	e9c4 0100 	strd	r0, r1, [r4]
		if (sensor_comp & BME280_HUM) {
1a0010e4:	f015 0f04 	tst.w	r5, #4
1a0010e8:	d017      	beq.n	1a00111a <bme280CompensateData+0x6e>
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
1a0010ea:	4631      	mov	r1, r6
1a0010ec:	4638      	mov	r0, r7
1a0010ee:	f7ff fb4b 	bl	1a000788 <compensate_humidity>
1a0010f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
	int8_t rslt = BME280_OK;
1a0010f6:	2000      	movs	r0, #0
}
1a0010f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			comp_data->temperature = compensate_temperature(uncomp_data,
1a0010fa:	4631      	mov	r1, r6
1a0010fc:	4638      	mov	r0, r7
1a0010fe:	f7ff f997 	bl	1a000430 <compensate_temperature>
1a001102:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a001106:	e7e4      	b.n	1a0010d2 <bme280CompensateData+0x26>
		rslt = BME280_E_NULL_PTR;
1a001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00110c:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
1a00110e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001112:	e7f1      	b.n	1a0010f8 <bme280CompensateData+0x4c>
1a001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001118:	e7ee      	b.n	1a0010f8 <bme280CompensateData+0x4c>
	int8_t rslt = BME280_OK;
1a00111a:	2000      	movs	r0, #0
1a00111c:	e7ec      	b.n	1a0010f8 <bme280CompensateData+0x4c>

1a00111e <bme280GetSensorData>:
		struct bme280_dev *dev) {
1a00111e:	b570      	push	{r4, r5, r6, lr}
1a001120:	b086      	sub	sp, #24
1a001122:	4606      	mov	r6, r0
1a001124:	460d      	mov	r5, r1
1a001126:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
1a001128:	2300      	movs	r3, #0
1a00112a:	9304      	str	r3, [sp, #16]
1a00112c:	9305      	str	r3, [sp, #20]
	struct bme280_uncomp_data uncomp_data = { 0 };
1a00112e:	9301      	str	r3, [sp, #4]
1a001130:	9302      	str	r3, [sp, #8]
1a001132:	9303      	str	r3, [sp, #12]
	rslt = null_ptr_check(dev);
1a001134:	4610      	mov	r0, r2
1a001136:	f7ff fc59 	bl	1a0009ec <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
1a00113a:	b9c0      	cbnz	r0, 1a00116e <bme280GetSensorData+0x50>
1a00113c:	b1d5      	cbz	r5, 1a001174 <bme280GetSensorData+0x56>
		rslt = bme280GetRegs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN,
1a00113e:	4623      	mov	r3, r4
1a001140:	2208      	movs	r2, #8
1a001142:	a904      	add	r1, sp, #16
1a001144:	20f7      	movs	r0, #247	; 0xf7
1a001146:	f7ff fd22 	bl	1a000b8e <bme280GetRegs>
		if (rslt == BME280_OK) {
1a00114a:	4603      	mov	r3, r0
1a00114c:	b110      	cbz	r0, 1a001154 <bme280GetSensorData+0x36>
}
1a00114e:	4618      	mov	r0, r3
1a001150:	b006      	add	sp, #24
1a001152:	bd70      	pop	{r4, r5, r6, pc}
			bme280ParseSensorData(reg_data, &uncomp_data);
1a001154:	a901      	add	r1, sp, #4
1a001156:	a804      	add	r0, sp, #16
1a001158:	f7ff ff8d 	bl	1a001076 <bme280ParseSensorData>
			rslt = bme280CompensateData(sensor_comp, &uncomp_data, comp_data,
1a00115c:	f104 0310 	add.w	r3, r4, #16
1a001160:	462a      	mov	r2, r5
1a001162:	a901      	add	r1, sp, #4
1a001164:	4630      	mov	r0, r6
1a001166:	f7ff ffa1 	bl	1a0010ac <bme280CompensateData>
1a00116a:	4603      	mov	r3, r0
1a00116c:	e7ef      	b.n	1a00114e <bme280GetSensorData+0x30>
		rslt = BME280_E_NULL_PTR;
1a00116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001172:	e7ec      	b.n	1a00114e <bme280GetSensorData+0x30>
1a001174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001178:	e7e9      	b.n	1a00114e <bme280GetSensorData+0x30>

1a00117a <initialise_monitor_handles>:
}
1a00117a:	4770      	bx	lr

1a00117c <Reset_Handler>:
void Reset_Handler(void) {
1a00117c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00117e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001180:	4b19      	ldr	r3, [pc, #100]	; (1a0011e8 <Reset_Handler+0x6c>)
1a001182:	4a1a      	ldr	r2, [pc, #104]	; (1a0011ec <Reset_Handler+0x70>)
1a001184:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001186:	3304      	adds	r3, #4
1a001188:	4a19      	ldr	r2, [pc, #100]	; (1a0011f0 <Reset_Handler+0x74>)
1a00118a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00118c:	2300      	movs	r3, #0
1a00118e:	e005      	b.n	1a00119c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001190:	4a18      	ldr	r2, [pc, #96]	; (1a0011f4 <Reset_Handler+0x78>)
1a001192:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00119a:	3301      	adds	r3, #1
1a00119c:	2b07      	cmp	r3, #7
1a00119e:	d9f7      	bls.n	1a001190 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0011a0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0011a2:	4b15      	ldr	r3, [pc, #84]	; (1a0011f8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0011a4:	e007      	b.n	1a0011b6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0011a6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011aa:	689a      	ldr	r2, [r3, #8]
1a0011ac:	6859      	ldr	r1, [r3, #4]
1a0011ae:	6818      	ldr	r0, [r3, #0]
1a0011b0:	f7fe ffeb 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0011b4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011b6:	4a11      	ldr	r2, [pc, #68]	; (1a0011fc <Reset_Handler+0x80>)
1a0011b8:	4293      	cmp	r3, r2
1a0011ba:	d3f4      	bcc.n	1a0011a6 <Reset_Handler+0x2a>
1a0011bc:	e006      	b.n	1a0011cc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0011be:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011c0:	6859      	ldr	r1, [r3, #4]
1a0011c2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0011c6:	f7fe ffef 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0011ca:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011cc:	4a0c      	ldr	r2, [pc, #48]	; (1a001200 <Reset_Handler+0x84>)
1a0011ce:	4293      	cmp	r3, r2
1a0011d0:	d3f5      	bcc.n	1a0011be <Reset_Handler+0x42>
    SystemInit();
1a0011d2:	f001 f895 	bl	1a002300 <SystemInit>
    __libc_init_array();
1a0011d6:	f002 fae3 	bl	1a0037a0 <__libc_init_array>
    initialise_monitor_handles();
1a0011da:	f7ff ffce 	bl	1a00117a <initialise_monitor_handles>
    main();
1a0011de:	f7ff f88f 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a0011e2:	bf30      	wfi
1a0011e4:	e7fd      	b.n	1a0011e2 <Reset_Handler+0x66>
1a0011e6:	bf00      	nop
1a0011e8:	40053100 	.word	0x40053100
1a0011ec:	10df1000 	.word	0x10df1000
1a0011f0:	01dff7ff 	.word	0x01dff7ff
1a0011f4:	e000e280 	.word	0xe000e280
1a0011f8:	1a000114 	.word	0x1a000114
1a0011fc:	1a000150 	.word	0x1a000150
1a001200:	1a000178 	.word	0x1a000178

1a001204 <_fini>:
void _fini(void) {}
1a001204:	4770      	bx	lr

1a001206 <_init>:
void _init(void) {}
1a001206:	4770      	bx	lr

1a001208 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001208:	2309      	movs	r3, #9
1a00120a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001210:	4770      	bx	lr

1a001212 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001212:	2358      	movs	r3, #88	; 0x58
1a001214:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00121a:	4770      	bx	lr

1a00121c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00121c:	2902      	cmp	r1, #2
1a00121e:	d904      	bls.n	1a00122a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a001220:	2309      	movs	r3, #9
1a001222:	6003      	str	r3, [r0, #0]
       return -1;
1a001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001228:	4770      	bx	lr
       return 1;
1a00122a:	2001      	movs	r0, #1
   }
}
1a00122c:	4770      	bx	lr

1a00122e <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00122e:	2358      	movs	r3, #88	; 0x58
1a001230:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001236:	4770      	bx	lr

1a001238 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001238:	2902      	cmp	r1, #2
1a00123a:	d81f      	bhi.n	1a00127c <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001240:	461d      	mov	r5, r3
1a001242:	4617      	mov	r7, r2
1a001244:	4606      	mov	r6, r0
  size_t i = 0;
1a001246:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001248:	42ac      	cmp	r4, r5
1a00124a:	d211      	bcs.n	1a001270 <_read_r+0x38>
         int c = __stdio_getchar();
1a00124c:	f000 f92f 	bl	1a0014ae <__stdio_getchar>
         if( c != -1 ){
1a001250:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001254:	d0f8      	beq.n	1a001248 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a001256:	f104 0801 	add.w	r8, r4, #1
1a00125a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00125c:	280d      	cmp	r0, #13
1a00125e:	d003      	beq.n	1a001268 <_read_r+0x30>
1a001260:	280a      	cmp	r0, #10
1a001262:	d001      	beq.n	1a001268 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a001264:	4644      	mov	r4, r8
1a001266:	e7ef      	b.n	1a001248 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001268:	f000 f921 	bl	1a0014ae <__stdio_getchar>
               return i;
1a00126c:	4640      	mov	r0, r8
1a00126e:	e003      	b.n	1a001278 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a001270:	2313      	movs	r3, #19
1a001272:	6033      	str	r3, [r6, #0]
      return -1;
1a001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00127c:	2313      	movs	r3, #19
1a00127e:	6003      	str	r3, [r0, #0]
      return -1;
1a001280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001284:	4770      	bx	lr

1a001286 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a001286:	2902      	cmp	r1, #2
1a001288:	d80c      	bhi.n	1a0012a4 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00128a:	b570      	push	{r4, r5, r6, lr}
1a00128c:	461d      	mov	r5, r3
1a00128e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001290:	2400      	movs	r4, #0
1a001292:	42ac      	cmp	r4, r5
1a001294:	d204      	bcs.n	1a0012a0 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a001296:	5d30      	ldrb	r0, [r6, r4]
1a001298:	f000 f904 	bl	1a0014a4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00129c:	3401      	adds	r4, #1
1a00129e:	e7f8      	b.n	1a001292 <_write_r+0xc>
       return n;
1a0012a0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0012a2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0012a4:	2313      	movs	r3, #19
1a0012a6:	6003      	str	r3, [r0, #0]
       return -1;
1a0012a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012ac:	4770      	bx	lr
1a0012ae:	Address 0x000000001a0012ae is out of bounds.


1a0012b0 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0012b0:	4b05      	ldr	r3, [pc, #20]	; (1a0012c8 <_sbrk_r+0x18>)
1a0012b2:	681b      	ldr	r3, [r3, #0]
1a0012b4:	b123      	cbz	r3, 1a0012c0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0012b6:	4b04      	ldr	r3, [pc, #16]	; (1a0012c8 <_sbrk_r+0x18>)
1a0012b8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0012ba:	4401      	add	r1, r0
1a0012bc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0012be:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0012c0:	4b01      	ldr	r3, [pc, #4]	; (1a0012c8 <_sbrk_r+0x18>)
1a0012c2:	4a02      	ldr	r2, [pc, #8]	; (1a0012cc <_sbrk_r+0x1c>)
1a0012c4:	601a      	str	r2, [r3, #0]
1a0012c6:	e7f6      	b.n	1a0012b6 <_sbrk_r+0x6>
1a0012c8:	100000bc 	.word	0x100000bc
1a0012cc:	100000fc 	.word	0x100000fc

1a0012d0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0012d0:	2200      	movs	r2, #0
1a0012d2:	2a05      	cmp	r2, #5
1a0012d4:	d819      	bhi.n	1a00130a <Board_LED_Init+0x3a>
{
1a0012d6:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0012d8:	490c      	ldr	r1, [pc, #48]	; (1a00130c <Board_LED_Init+0x3c>)
1a0012da:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0012de:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0012e2:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0012e4:	4b0a      	ldr	r3, [pc, #40]	; (1a001310 <Board_LED_Init+0x40>)
1a0012e6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0012ea:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0012ee:	2001      	movs	r0, #1
1a0012f0:	40a0      	lsls	r0, r4
1a0012f2:	4301      	orrs	r1, r0
1a0012f4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0012f8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0012fc:	2100      	movs	r1, #0
1a0012fe:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001300:	3201      	adds	r2, #1
1a001302:	2a05      	cmp	r2, #5
1a001304:	d9e8      	bls.n	1a0012d8 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a001306:	bc70      	pop	{r4, r5, r6}
1a001308:	4770      	bx	lr
1a00130a:	4770      	bx	lr
1a00130c:	1a004904 	.word	0x1a004904
1a001310:	400f4000 	.word	0x400f4000

1a001314 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001314:	2300      	movs	r3, #0
1a001316:	2b03      	cmp	r3, #3
1a001318:	d816      	bhi.n	1a001348 <Board_TEC_Init+0x34>
{
1a00131a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00131c:	490b      	ldr	r1, [pc, #44]	; (1a00134c <Board_TEC_Init+0x38>)
1a00131e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001322:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001326:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001328:	4c09      	ldr	r4, [pc, #36]	; (1a001350 <Board_TEC_Init+0x3c>)
1a00132a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00132e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001332:	2001      	movs	r0, #1
1a001334:	40a8      	lsls	r0, r5
1a001336:	ea21 0100 	bic.w	r1, r1, r0
1a00133a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00133e:	3301      	adds	r3, #1
1a001340:	2b03      	cmp	r3, #3
1a001342:	d9eb      	bls.n	1a00131c <Board_TEC_Init+0x8>
   }
}
1a001344:	bc30      	pop	{r4, r5}
1a001346:	4770      	bx	lr
1a001348:	4770      	bx	lr
1a00134a:	bf00      	nop
1a00134c:	1a0048fc 	.word	0x1a0048fc
1a001350:	400f4000 	.word	0x400f4000

1a001354 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001354:	2300      	movs	r3, #0
1a001356:	2b08      	cmp	r3, #8
1a001358:	d816      	bhi.n	1a001388 <Board_GPIO_Init+0x34>
{
1a00135a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00135c:	490b      	ldr	r1, [pc, #44]	; (1a00138c <Board_GPIO_Init+0x38>)
1a00135e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001362:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001366:	784d      	ldrb	r5, [r1, #1]
1a001368:	4c09      	ldr	r4, [pc, #36]	; (1a001390 <Board_GPIO_Init+0x3c>)
1a00136a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00136e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001372:	2001      	movs	r0, #1
1a001374:	40a8      	lsls	r0, r5
1a001376:	ea21 0100 	bic.w	r1, r1, r0
1a00137a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00137e:	3301      	adds	r3, #1
1a001380:	2b08      	cmp	r3, #8
1a001382:	d9eb      	bls.n	1a00135c <Board_GPIO_Init+0x8>
   }
}
1a001384:	bc30      	pop	{r4, r5}
1a001386:	4770      	bx	lr
1a001388:	4770      	bx	lr
1a00138a:	bf00      	nop
1a00138c:	1a004910 	.word	0x1a004910
1a001390:	400f4000 	.word	0x400f4000

1a001394 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001394:	b510      	push	{r4, lr}
1a001396:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a001398:	4c08      	ldr	r4, [pc, #32]	; (1a0013bc <Board_ADC_Init+0x28>)
1a00139a:	4669      	mov	r1, sp
1a00139c:	4620      	mov	r0, r4
1a00139e:	f000 f9d9 	bl	1a001754 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0013a2:	4a07      	ldr	r2, [pc, #28]	; (1a0013c0 <Board_ADC_Init+0x2c>)
1a0013a4:	4669      	mov	r1, sp
1a0013a6:	4620      	mov	r0, r4
1a0013a8:	f000 f9f4 	bl	1a001794 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0013ac:	2200      	movs	r2, #0
1a0013ae:	4669      	mov	r1, sp
1a0013b0:	4620      	mov	r0, r4
1a0013b2:	f000 fa08 	bl	1a0017c6 <Chip_ADC_SetResolution>
}
1a0013b6:	b002      	add	sp, #8
1a0013b8:	bd10      	pop	{r4, pc}
1a0013ba:	bf00      	nop
1a0013bc:	400e3000 	.word	0x400e3000
1a0013c0:	00061a80 	.word	0x00061a80

1a0013c4 <Board_SPI_Init>:
{
1a0013c4:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0013c6:	4c0b      	ldr	r4, [pc, #44]	; (1a0013f4 <Board_SPI_Init+0x30>)
1a0013c8:	4620      	mov	r0, r4
1a0013ca:	f000 ff7d 	bl	1a0022c8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0013ce:	6863      	ldr	r3, [r4, #4]
1a0013d0:	f023 0304 	bic.w	r3, r3, #4
1a0013d4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0013d6:	6823      	ldr	r3, [r4, #0]
1a0013d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0013dc:	f043 0307 	orr.w	r3, r3, #7
1a0013e0:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0013e2:	4905      	ldr	r1, [pc, #20]	; (1a0013f8 <Board_SPI_Init+0x34>)
1a0013e4:	4620      	mov	r0, r4
1a0013e6:	f000 ff50 	bl	1a00228a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0013ea:	6863      	ldr	r3, [r4, #4]
1a0013ec:	f043 0302 	orr.w	r3, r3, #2
1a0013f0:	6063      	str	r3, [r4, #4]
}
1a0013f2:	bd10      	pop	{r4, pc}
1a0013f4:	400c5000 	.word	0x400c5000
1a0013f8:	000186a0 	.word	0x000186a0

1a0013fc <Board_I2C_Init>:
{
1a0013fc:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0013fe:	2000      	movs	r0, #0
1a001400:	f000 fe9e 	bl	1a002140 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001404:	4b04      	ldr	r3, [pc, #16]	; (1a001418 <Board_I2C_Init+0x1c>)
1a001406:	f640 0208 	movw	r2, #2056	; 0x808
1a00140a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00140e:	4903      	ldr	r1, [pc, #12]	; (1a00141c <Board_I2C_Init+0x20>)
1a001410:	2000      	movs	r0, #0
1a001412:	f000 fea7 	bl	1a002164 <Chip_I2C_SetClockRate>
}
1a001416:	bd08      	pop	{r3, pc}
1a001418:	40086000 	.word	0x40086000
1a00141c:	000f4240 	.word	0x000f4240

1a001420 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001420:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a001422:	4c07      	ldr	r4, [pc, #28]	; (1a001440 <Board_Debug_Init+0x20>)
1a001424:	4620      	mov	r0, r4
1a001426:	f000 f8b9 	bl	1a00159c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00142a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00142e:	4620      	mov	r0, r4
1a001430:	f000 f8fe 	bl	1a001630 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001434:	2303      	movs	r3, #3
1a001436:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001438:	2301      	movs	r3, #1
1a00143a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a00143c:	bd10      	pop	{r4, pc}
1a00143e:	bf00      	nop
1a001440:	400c1000 	.word	0x400c1000

1a001444 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001444:	4b03      	ldr	r3, [pc, #12]	; (1a001454 <Board_UARTPutChar+0x10>)
1a001446:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a001448:	f013 0f20 	tst.w	r3, #32
1a00144c:	d0fa      	beq.n	1a001444 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a00144e:	4b01      	ldr	r3, [pc, #4]	; (1a001454 <Board_UARTPutChar+0x10>)
1a001450:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a001452:	4770      	bx	lr
1a001454:	400c1000 	.word	0x400c1000

1a001458 <Board_UARTGetChar>:
	return pUART->LSR;
1a001458:	4b05      	ldr	r3, [pc, #20]	; (1a001470 <Board_UARTGetChar+0x18>)
1a00145a:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a00145c:	f013 0f01 	tst.w	r3, #1
1a001460:	d003      	beq.n	1a00146a <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001462:	4b03      	ldr	r3, [pc, #12]	; (1a001470 <Board_UARTGetChar+0x18>)
1a001464:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a001466:	b2c0      	uxtb	r0, r0
1a001468:	4770      	bx	lr
   }
   return EOF;
1a00146a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00146e:	4770      	bx	lr
1a001470:	400c1000 	.word	0x400c1000

1a001474 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001474:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001476:	f7ff ffd3 	bl	1a001420 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00147a:	4809      	ldr	r0, [pc, #36]	; (1a0014a0 <Board_Init+0x2c>)
1a00147c:	f000 fd13 	bl	1a001ea6 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a001480:	f7ff ff68 	bl	1a001354 <Board_GPIO_Init>
   Board_ADC_Init();
1a001484:	f7ff ff86 	bl	1a001394 <Board_ADC_Init>
   Board_SPI_Init();
1a001488:	f7ff ff9c 	bl	1a0013c4 <Board_SPI_Init>
   Board_I2C_Init();
1a00148c:	f7ff ffb6 	bl	1a0013fc <Board_I2C_Init>

   Board_LED_Init();
1a001490:	f7ff ff1e 	bl	1a0012d0 <Board_LED_Init>
   Board_TEC_Init();
1a001494:	f7ff ff3e 	bl	1a001314 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a001498:	f000 fc62 	bl	1a001d60 <SystemCoreClockUpdate>
}
1a00149c:	bd08      	pop	{r3, pc}
1a00149e:	bf00      	nop
1a0014a0:	400f4000 	.word	0x400f4000

1a0014a4 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0014a4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0014a6:	b2c0      	uxtb	r0, r0
1a0014a8:	f7ff ffcc 	bl	1a001444 <Board_UARTPutChar>
}
1a0014ac:	bd08      	pop	{r3, pc}

1a0014ae <__stdio_getchar>:

int __stdio_getchar()
{
1a0014ae:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0014b0:	f7ff ffd2 	bl	1a001458 <Board_UARTGetChar>
}
1a0014b4:	bd08      	pop	{r3, pc}

1a0014b6 <__stdio_init>:

void __stdio_init()
{
1a0014b6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0014b8:	f7ff ffb2 	bl	1a001420 <Board_Debug_Init>
1a0014bc:	bd08      	pop	{r3, pc}
1a0014be:	Address 0x000000001a0014be is out of bounds.


1a0014c0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0014c0:	2300      	movs	r3, #0
1a0014c2:	2b1c      	cmp	r3, #28
1a0014c4:	d812      	bhi.n	1a0014ec <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0014c6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0014c8:	4a09      	ldr	r2, [pc, #36]	; (1a0014f0 <Board_SetupMuxing+0x30>)
1a0014ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0014ce:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0014d2:	784a      	ldrb	r2, [r1, #1]
1a0014d4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0014d6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0014da:	4906      	ldr	r1, [pc, #24]	; (1a0014f4 <Board_SetupMuxing+0x34>)
1a0014dc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0014e0:	3301      	adds	r3, #1
1a0014e2:	2b1c      	cmp	r3, #28
1a0014e4:	d9f0      	bls.n	1a0014c8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014ea:	4770      	bx	lr
1a0014ec:	4770      	bx	lr
1a0014ee:	bf00      	nop
1a0014f0:	1a00492c 	.word	0x1a00492c
1a0014f4:	40086000 	.word	0x40086000

1a0014f8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0014f8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0014fa:	4a17      	ldr	r2, [pc, #92]	; (1a001558 <Board_SetupClocking+0x60>)
1a0014fc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001504:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001508:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00150c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001514:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001518:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00151c:	2201      	movs	r2, #1
1a00151e:	490f      	ldr	r1, [pc, #60]	; (1a00155c <Board_SetupClocking+0x64>)
1a001520:	2006      	movs	r0, #6
1a001522:	f000 fcc1 	bl	1a001ea8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001526:	2400      	movs	r4, #0
1a001528:	b14c      	cbz	r4, 1a00153e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00152a:	4b0b      	ldr	r3, [pc, #44]	; (1a001558 <Board_SetupClocking+0x60>)
1a00152c:	685a      	ldr	r2, [r3, #4]
1a00152e:	f022 020c 	bic.w	r2, r2, #12
1a001532:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001534:	685a      	ldr	r2, [r3, #4]
1a001536:	f042 0203 	orr.w	r2, r2, #3
1a00153a:	605a      	str	r2, [r3, #4]
}
1a00153c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00153e:	4808      	ldr	r0, [pc, #32]	; (1a001560 <Board_SetupClocking+0x68>)
1a001540:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001544:	2301      	movs	r3, #1
1a001546:	788a      	ldrb	r2, [r1, #2]
1a001548:	7849      	ldrb	r1, [r1, #1]
1a00154a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00154e:	f000 fb63 	bl	1a001c18 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001552:	3401      	adds	r4, #1
1a001554:	e7e8      	b.n	1a001528 <Board_SetupClocking+0x30>
1a001556:	bf00      	nop
1a001558:	40043000 	.word	0x40043000
1a00155c:	0c28cb00 	.word	0x0c28cb00
1a001560:	1a004928 	.word	0x1a004928

1a001564 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001564:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001566:	f7ff ffab 	bl	1a0014c0 <Board_SetupMuxing>
    Board_SetupClocking();
1a00156a:	f7ff ffc5 	bl	1a0014f8 <Board_SetupClocking>
}
1a00156e:	bd08      	pop	{r3, pc}

1a001570 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001570:	4b09      	ldr	r3, [pc, #36]	; (1a001598 <Chip_UART_GetIndex+0x28>)
1a001572:	4298      	cmp	r0, r3
1a001574:	d009      	beq.n	1a00158a <Chip_UART_GetIndex+0x1a>
1a001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00157a:	4298      	cmp	r0, r3
1a00157c:	d007      	beq.n	1a00158e <Chip_UART_GetIndex+0x1e>
1a00157e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001582:	4298      	cmp	r0, r3
1a001584:	d005      	beq.n	1a001592 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001586:	2000      	movs	r0, #0
1a001588:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00158a:	2002      	movs	r0, #2
1a00158c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00158e:	2003      	movs	r0, #3
1a001590:	4770      	bx	lr
			return 1;
1a001592:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001594:	4770      	bx	lr
1a001596:	bf00      	nop
1a001598:	400c1000 	.word	0x400c1000

1a00159c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00159c:	b530      	push	{r4, r5, lr}
1a00159e:	b083      	sub	sp, #12
1a0015a0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0015a2:	f7ff ffe5 	bl	1a001570 <Chip_UART_GetIndex>
1a0015a6:	2301      	movs	r3, #1
1a0015a8:	461a      	mov	r2, r3
1a0015aa:	4619      	mov	r1, r3
1a0015ac:	4d0e      	ldr	r5, [pc, #56]	; (1a0015e8 <Chip_UART_Init+0x4c>)
1a0015ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0015b2:	f000 fb77 	bl	1a001ca4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0015b6:	2307      	movs	r3, #7
1a0015b8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0015ba:	2300      	movs	r3, #0
1a0015bc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0015be:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0015c0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0015c2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0015c4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0015c6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0015c8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0015ca:	4b08      	ldr	r3, [pc, #32]	; (1a0015ec <Chip_UART_Init+0x50>)
1a0015cc:	429c      	cmp	r4, r3
1a0015ce:	d006      	beq.n	1a0015de <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0015d0:	2303      	movs	r3, #3
1a0015d2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0015d4:	2310      	movs	r3, #16
1a0015d6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0015d8:	9b01      	ldr	r3, [sp, #4]
}
1a0015da:	b003      	add	sp, #12
1a0015dc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0015de:	2300      	movs	r3, #0
1a0015e0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0015e2:	69a3      	ldr	r3, [r4, #24]
1a0015e4:	9301      	str	r3, [sp, #4]
1a0015e6:	e7f3      	b.n	1a0015d0 <Chip_UART_Init+0x34>
1a0015e8:	1a0049a8 	.word	0x1a0049a8
1a0015ec:	40082000 	.word	0x40082000

1a0015f0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0015f0:	b538      	push	{r3, r4, r5, lr}
1a0015f2:	4605      	mov	r5, r0
1a0015f4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0015f6:	f7ff ffbb 	bl	1a001570 <Chip_UART_GetIndex>
1a0015fa:	4b0c      	ldr	r3, [pc, #48]	; (1a00162c <Chip_UART_SetBaud+0x3c>)
1a0015fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001600:	f000 fb88 	bl	1a001d14 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001604:	0123      	lsls	r3, r4, #4
1a001606:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00160a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00160c:	68ea      	ldr	r2, [r5, #12]
1a00160e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001612:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a001614:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001616:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00161a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00161c:	68ea      	ldr	r2, [r5, #12]
1a00161e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001622:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001624:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001628:	0900      	lsrs	r0, r0, #4
1a00162a:	bd38      	pop	{r3, r4, r5, pc}
1a00162c:	1a0049a0 	.word	0x1a0049a0

1a001630 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001634:	b083      	sub	sp, #12
1a001636:	9001      	str	r0, [sp, #4]
1a001638:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00163a:	f7ff ff99 	bl	1a001570 <Chip_UART_GetIndex>
1a00163e:	4b32      	ldr	r3, [pc, #200]	; (1a001708 <Chip_UART_SetBaudFDR+0xd8>)
1a001640:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001644:	f000 fb66 	bl	1a001d14 <Chip_Clock_GetRate>
1a001648:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00164a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00164e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001650:	f04f 0b00 	mov.w	fp, #0
1a001654:	46a2      	mov	sl, r4
1a001656:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001658:	e02a      	b.n	1a0016b0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00165a:	4242      	negs	r2, r0
				div ++;
1a00165c:	1c4b      	adds	r3, r1, #1
1a00165e:	e017      	b.n	1a001690 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001660:	b30a      	cbz	r2, 1a0016a6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001662:	4617      	mov	r7, r2
			sd = d;
1a001664:	46ab      	mov	fp, r5
			sm = m;
1a001666:	46a2      	mov	sl, r4
			sdiv = div;
1a001668:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00166a:	3501      	adds	r5, #1
1a00166c:	42ac      	cmp	r4, r5
1a00166e:	d91e      	bls.n	1a0016ae <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001670:	0933      	lsrs	r3, r6, #4
1a001672:	0730      	lsls	r0, r6, #28
1a001674:	fba4 0100 	umull	r0, r1, r4, r0
1a001678:	fb04 1103 	mla	r1, r4, r3, r1
1a00167c:	1962      	adds	r2, r4, r5
1a00167e:	fb08 f202 	mul.w	r2, r8, r2
1a001682:	2300      	movs	r3, #0
1a001684:	f001 ff0a 	bl	1a00349c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001688:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00168a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00168c:	2800      	cmp	r0, #0
1a00168e:	dbe4      	blt.n	1a00165a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001690:	4297      	cmp	r7, r2
1a001692:	d3ea      	bcc.n	1a00166a <Chip_UART_SetBaudFDR+0x3a>
1a001694:	2b00      	cmp	r3, #0
1a001696:	d0e8      	beq.n	1a00166a <Chip_UART_SetBaudFDR+0x3a>
1a001698:	0c19      	lsrs	r1, r3, #16
1a00169a:	d1e6      	bne.n	1a00166a <Chip_UART_SetBaudFDR+0x3a>
1a00169c:	2b02      	cmp	r3, #2
1a00169e:	d8df      	bhi.n	1a001660 <Chip_UART_SetBaudFDR+0x30>
1a0016a0:	2d00      	cmp	r5, #0
1a0016a2:	d0dd      	beq.n	1a001660 <Chip_UART_SetBaudFDR+0x30>
1a0016a4:	e7e1      	b.n	1a00166a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0016a6:	4617      	mov	r7, r2
			sd = d;
1a0016a8:	46ab      	mov	fp, r5
			sm = m;
1a0016aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0016ac:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0016ae:	3401      	adds	r4, #1
1a0016b0:	b11f      	cbz	r7, 1a0016ba <Chip_UART_SetBaudFDR+0x8a>
1a0016b2:	2c0f      	cmp	r4, #15
1a0016b4:	d801      	bhi.n	1a0016ba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0016b6:	2500      	movs	r5, #0
1a0016b8:	e7d8      	b.n	1a00166c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0016ba:	f1b9 0f00 	cmp.w	r9, #0
1a0016be:	d01e      	beq.n	1a0016fe <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0016c0:	9a01      	ldr	r2, [sp, #4]
1a0016c2:	4611      	mov	r1, r2
1a0016c4:	68d3      	ldr	r3, [r2, #12]
1a0016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0016ca:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0016cc:	fa5f f389 	uxtb.w	r3, r9
1a0016d0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0016d2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0016d6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0016d8:	68d3      	ldr	r3, [r2, #12]
1a0016da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016de:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0016e0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0016e4:	b2db      	uxtb	r3, r3
1a0016e6:	f00b 020f 	and.w	r2, fp, #15
1a0016ea:	4313      	orrs	r3, r2
1a0016ec:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0016ee:	0933      	lsrs	r3, r6, #4
1a0016f0:	fb0a f303 	mul.w	r3, sl, r3
1a0016f4:	44da      	add	sl, fp
1a0016f6:	fb09 f90a 	mul.w	r9, r9, sl
1a0016fa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0016fe:	4648      	mov	r0, r9
1a001700:	b003      	add	sp, #12
1a001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001706:	bf00      	nop
1a001708:	1a0049a0 	.word	0x1a0049a0

1a00170c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00170c:	4b03      	ldr	r3, [pc, #12]	; (1a00171c <Chip_ADC_GetClockIndex+0x10>)
1a00170e:	4298      	cmp	r0, r3
1a001710:	d001      	beq.n	1a001716 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001712:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001714:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001716:	2004      	movs	r0, #4
1a001718:	4770      	bx	lr
1a00171a:	bf00      	nop
1a00171c:	400e4000 	.word	0x400e4000

1a001720 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001720:	b570      	push	{r4, r5, r6, lr}
1a001722:	460d      	mov	r5, r1
1a001724:	4614      	mov	r4, r2
1a001726:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001728:	f7ff fff0 	bl	1a00170c <Chip_ADC_GetClockIndex>
1a00172c:	f000 faf2 	bl	1a001d14 <Chip_Clock_GetRate>
	if (burstMode) {
1a001730:	b155      	cbz	r5, 1a001748 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a001732:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001736:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00173a:	0064      	lsls	r4, r4, #1
1a00173c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001740:	b2c0      	uxtb	r0, r0
1a001742:	3801      	subs	r0, #1
	return div;
}
1a001744:	b2c0      	uxtb	r0, r0
1a001746:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001748:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00174c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001750:	e7f1      	b.n	1a001736 <getClkDiv+0x16>
1a001752:	Address 0x000000001a001752 is out of bounds.


1a001754 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001754:	b538      	push	{r3, r4, r5, lr}
1a001756:	4605      	mov	r5, r0
1a001758:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00175a:	f7ff ffd7 	bl	1a00170c <Chip_ADC_GetClockIndex>
1a00175e:	2301      	movs	r3, #1
1a001760:	461a      	mov	r2, r3
1a001762:	4619      	mov	r1, r3
1a001764:	f000 fa9e 	bl	1a001ca4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001768:	2100      	movs	r1, #0
1a00176a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00176c:	4a08      	ldr	r2, [pc, #32]	; (1a001790 <Chip_ADC_Init+0x3c>)
1a00176e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001770:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001772:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001774:	230b      	movs	r3, #11
1a001776:	4628      	mov	r0, r5
1a001778:	f7ff ffd2 	bl	1a001720 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00177c:	0200      	lsls	r0, r0, #8
1a00177e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001782:	7920      	ldrb	r0, [r4, #4]
1a001784:	0440      	lsls	r0, r0, #17
1a001786:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00178a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00178c:	6028      	str	r0, [r5, #0]
}
1a00178e:	bd38      	pop	{r3, r4, r5, pc}
1a001790:	00061a80 	.word	0x00061a80

1a001794 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001794:	b570      	push	{r4, r5, r6, lr}
1a001796:	4605      	mov	r5, r0
1a001798:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00179a:	6804      	ldr	r4, [r0, #0]
1a00179c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0017a0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0017a4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0017a6:	790b      	ldrb	r3, [r1, #4]
1a0017a8:	f1c3 030b 	rsb	r3, r3, #11
1a0017ac:	b2db      	uxtb	r3, r3
1a0017ae:	7949      	ldrb	r1, [r1, #5]
1a0017b0:	f7ff ffb6 	bl	1a001720 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0017b4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0017b8:	7933      	ldrb	r3, [r6, #4]
1a0017ba:	045b      	lsls	r3, r3, #17
1a0017bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0017c0:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0017c2:	602b      	str	r3, [r5, #0]
}
1a0017c4:	bd70      	pop	{r4, r5, r6, pc}

1a0017c6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0017c6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0017c8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0017ca:	680a      	ldr	r2, [r1, #0]
1a0017cc:	f7ff ffe2 	bl	1a001794 <Chip_ADC_SetSampleRate>
}
1a0017d0:	bd08      	pop	{r3, pc}
1a0017d2:	Address 0x000000001a0017d2 is out of bounds.


1a0017d4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0017d4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0017d6:	680b      	ldr	r3, [r1, #0]
1a0017d8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0017dc:	d002      	beq.n	1a0017e4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0017de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0017e2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0017e4:	4607      	mov	r7, r0
1a0017e6:	2501      	movs	r5, #1
1a0017e8:	e03a      	b.n	1a001860 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0017ea:	694b      	ldr	r3, [r1, #20]
1a0017ec:	fb03 f302 	mul.w	r3, r3, r2
1a0017f0:	fbb3 f3f5 	udiv	r3, r3, r5
1a0017f4:	e01c      	b.n	1a001830 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0017f6:	461c      	mov	r4, r3
	if (val < 0)
1a0017f8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0017fc:	d427      	bmi.n	1a00184e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0017fe:	4567      	cmp	r7, ip
1a001800:	d906      	bls.n	1a001810 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001802:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001804:	1c77      	adds	r7, r6, #1
1a001806:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001808:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00180a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00180c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00180e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001810:	3201      	adds	r2, #1
1a001812:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001816:	dc1d      	bgt.n	1a001854 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001818:	680c      	ldr	r4, [r1, #0]
1a00181a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00181e:	d0e4      	beq.n	1a0017ea <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001820:	1c73      	adds	r3, r6, #1
1a001822:	fa02 fc03 	lsl.w	ip, r2, r3
1a001826:	694b      	ldr	r3, [r1, #20]
1a001828:	fb03 f30c 	mul.w	r3, r3, ip
1a00182c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001830:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a00186c <pll_calc_divs+0x98>
1a001834:	4563      	cmp	r3, ip
1a001836:	d9eb      	bls.n	1a001810 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001838:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001870 <pll_calc_divs+0x9c>
1a00183c:	4563      	cmp	r3, ip
1a00183e:	d809      	bhi.n	1a001854 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001840:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001844:	d1d7      	bne.n	1a0017f6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001846:	1c74      	adds	r4, r6, #1
1a001848:	fa23 f404 	lsr.w	r4, r3, r4
1a00184c:	e7d4      	b.n	1a0017f8 <pll_calc_divs+0x24>
		return -val;
1a00184e:	f1cc 0c00 	rsb	ip, ip, #0
1a001852:	e7d4      	b.n	1a0017fe <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001854:	3601      	adds	r6, #1
1a001856:	2e03      	cmp	r6, #3
1a001858:	dc01      	bgt.n	1a00185e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00185a:	2201      	movs	r2, #1
1a00185c:	e7d9      	b.n	1a001812 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00185e:	3501      	adds	r5, #1
1a001860:	2d04      	cmp	r5, #4
1a001862:	dc01      	bgt.n	1a001868 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001864:	2600      	movs	r6, #0
1a001866:	e7f6      	b.n	1a001856 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001868:	bcf0      	pop	{r4, r5, r6, r7}
1a00186a:	4770      	bx	lr
1a00186c:	094c5eff 	.word	0x094c5eff
1a001870:	1312d000 	.word	0x1312d000

1a001874 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001874:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001876:	b099      	sub	sp, #100	; 0x64
1a001878:	4605      	mov	r5, r0
1a00187a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00187c:	225c      	movs	r2, #92	; 0x5c
1a00187e:	2100      	movs	r1, #0
1a001880:	a801      	add	r0, sp, #4
1a001882:	f001 ffb1 	bl	1a0037e8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001886:	2380      	movs	r3, #128	; 0x80
1a001888:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00188a:	6963      	ldr	r3, [r4, #20]
1a00188c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00188e:	7923      	ldrb	r3, [r4, #4]
1a001890:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001894:	4669      	mov	r1, sp
1a001896:	4628      	mov	r0, r5
1a001898:	f7ff ff9c 	bl	1a0017d4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00189c:	9b06      	ldr	r3, [sp, #24]
1a00189e:	42ab      	cmp	r3, r5
1a0018a0:	d027      	beq.n	1a0018f2 <pll_get_frac+0x7e>
	if (val < 0)
1a0018a2:	1aeb      	subs	r3, r5, r3
1a0018a4:	d42e      	bmi.n	1a001904 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0018a6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0018a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0018aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0018ae:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0018b0:	6963      	ldr	r3, [r4, #20]
1a0018b2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0018b4:	7923      	ldrb	r3, [r4, #4]
1a0018b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0018ba:	a910      	add	r1, sp, #64	; 0x40
1a0018bc:	4628      	mov	r0, r5
1a0018be:	f7ff ff89 	bl	1a0017d4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0018c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0018c4:	42ab      	cmp	r3, r5
1a0018c6:	d01f      	beq.n	1a001908 <pll_get_frac+0x94>
	if (val < 0)
1a0018c8:	1aeb      	subs	r3, r5, r3
1a0018ca:	d425      	bmi.n	1a001918 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0018cc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0018ce:	4b2b      	ldr	r3, [pc, #172]	; (1a00197c <pll_get_frac+0x108>)
1a0018d0:	429d      	cmp	r5, r3
1a0018d2:	d923      	bls.n	1a00191c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0018d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0018d6:	1aed      	subs	r5, r5, r3
1a0018d8:	d433      	bmi.n	1a001942 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0018da:	42ae      	cmp	r6, r5
1a0018dc:	dc3b      	bgt.n	1a001956 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0018de:	42be      	cmp	r6, r7
1a0018e0:	dc31      	bgt.n	1a001946 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0018e2:	466d      	mov	r5, sp
1a0018e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018f0:	e006      	b.n	1a001900 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0018f2:	466d      	mov	r5, sp
1a0018f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001900:	b019      	add	sp, #100	; 0x64
1a001902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001904:	425b      	negs	r3, r3
1a001906:	e7ce      	b.n	1a0018a6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001908:	ad10      	add	r5, sp, #64	; 0x40
1a00190a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00190e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001916:	e7f3      	b.n	1a001900 <pll_get_frac+0x8c>
		return -val;
1a001918:	425b      	negs	r3, r3
1a00191a:	e7d7      	b.n	1a0018cc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00191c:	2340      	movs	r3, #64	; 0x40
1a00191e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001920:	6963      	ldr	r3, [r4, #20]
1a001922:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001924:	a908      	add	r1, sp, #32
1a001926:	4628      	mov	r0, r5
1a001928:	f7ff ff54 	bl	1a0017d4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00192c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00192e:	42ab      	cmp	r3, r5
1a001930:	d1d0      	bne.n	1a0018d4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001932:	ad08      	add	r5, sp, #32
1a001934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001938:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001940:	e7de      	b.n	1a001900 <pll_get_frac+0x8c>
		return -val;
1a001942:	426d      	negs	r5, r5
1a001944:	e7c9      	b.n	1a0018da <pll_get_frac+0x66>
			*ppll = pll[2];
1a001946:	ad10      	add	r5, sp, #64	; 0x40
1a001948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00194a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00194c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001954:	e7d4      	b.n	1a001900 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001956:	42af      	cmp	r7, r5
1a001958:	db07      	blt.n	1a00196a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00195a:	ad08      	add	r5, sp, #32
1a00195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001960:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001968:	e7ca      	b.n	1a001900 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00196a:	ad10      	add	r5, sp, #64	; 0x40
1a00196c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00196e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001978:	e7c2      	b.n	1a001900 <pll_get_frac+0x8c>
1a00197a:	bf00      	nop
1a00197c:	068e7780 	.word	0x068e7780

1a001980 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001980:	b430      	push	{r4, r5}
1a001982:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001984:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001986:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001988:	e000      	b.n	1a00198c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00198a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00198c:	281c      	cmp	r0, #28
1a00198e:	d118      	bne.n	1a0019c2 <Chip_Clock_FindBaseClock+0x42>
1a001990:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001994:	0051      	lsls	r1, r2, #1
1a001996:	4a0c      	ldr	r2, [pc, #48]	; (1a0019c8 <Chip_Clock_FindBaseClock+0x48>)
1a001998:	440a      	add	r2, r1
1a00199a:	7914      	ldrb	r4, [r2, #4]
1a00199c:	4284      	cmp	r4, r0
1a00199e:	d010      	beq.n	1a0019c2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0019a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0019a4:	004a      	lsls	r2, r1, #1
1a0019a6:	4908      	ldr	r1, [pc, #32]	; (1a0019c8 <Chip_Clock_FindBaseClock+0x48>)
1a0019a8:	5a8a      	ldrh	r2, [r1, r2]
1a0019aa:	42aa      	cmp	r2, r5
1a0019ac:	d8ed      	bhi.n	1a00198a <Chip_Clock_FindBaseClock+0xa>
1a0019ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0019b2:	0051      	lsls	r1, r2, #1
1a0019b4:	4a04      	ldr	r2, [pc, #16]	; (1a0019c8 <Chip_Clock_FindBaseClock+0x48>)
1a0019b6:	440a      	add	r2, r1
1a0019b8:	8852      	ldrh	r2, [r2, #2]
1a0019ba:	42aa      	cmp	r2, r5
1a0019bc:	d3e5      	bcc.n	1a00198a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0019be:	4620      	mov	r0, r4
1a0019c0:	e7e4      	b.n	1a00198c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0019c2:	bc30      	pop	{r4, r5}
1a0019c4:	4770      	bx	lr
1a0019c6:	bf00      	nop
1a0019c8:	1a0049bc 	.word	0x1a0049bc

1a0019cc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0019cc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0019d2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0019d4:	4a0d      	ldr	r2, [pc, #52]	; (1a001a0c <Chip_Clock_EnableCrystal+0x40>)
1a0019d6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0019d8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0019dc:	6992      	ldr	r2, [r2, #24]
1a0019de:	428a      	cmp	r2, r1
1a0019e0:	d001      	beq.n	1a0019e6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0019e2:	4a0a      	ldr	r2, [pc, #40]	; (1a001a0c <Chip_Clock_EnableCrystal+0x40>)
1a0019e4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0019e6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0019ea:	4a09      	ldr	r2, [pc, #36]	; (1a001a10 <Chip_Clock_EnableCrystal+0x44>)
1a0019ec:	6811      	ldr	r1, [r2, #0]
1a0019ee:	4a09      	ldr	r2, [pc, #36]	; (1a001a14 <Chip_Clock_EnableCrystal+0x48>)
1a0019f0:	4291      	cmp	r1, r2
1a0019f2:	d901      	bls.n	1a0019f8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0019f4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0019f8:	4a04      	ldr	r2, [pc, #16]	; (1a001a0c <Chip_Clock_EnableCrystal+0x40>)
1a0019fa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0019fc:	9b01      	ldr	r3, [sp, #4]
1a0019fe:	1e5a      	subs	r2, r3, #1
1a001a00:	9201      	str	r2, [sp, #4]
1a001a02:	2b00      	cmp	r3, #0
1a001a04:	d1fa      	bne.n	1a0019fc <Chip_Clock_EnableCrystal+0x30>
}
1a001a06:	b002      	add	sp, #8
1a001a08:	4770      	bx	lr
1a001a0a:	bf00      	nop
1a001a0c:	40050000 	.word	0x40050000
1a001a10:	1a004924 	.word	0x1a004924
1a001a14:	01312cff 	.word	0x01312cff

1a001a18 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001a18:	3012      	adds	r0, #18
1a001a1a:	4b05      	ldr	r3, [pc, #20]	; (1a001a30 <Chip_Clock_GetDividerSource+0x18>)
1a001a1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001a20:	f010 0f01 	tst.w	r0, #1
1a001a24:	d102      	bne.n	1a001a2c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001a26:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001a2a:	4770      	bx	lr
		return CLKINPUT_PD;
1a001a2c:	2011      	movs	r0, #17
}
1a001a2e:	4770      	bx	lr
1a001a30:	40050000 	.word	0x40050000

1a001a34 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001a34:	f100 0212 	add.w	r2, r0, #18
1a001a38:	4b03      	ldr	r3, [pc, #12]	; (1a001a48 <Chip_Clock_GetDividerDivisor+0x14>)
1a001a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001a3e:	4b03      	ldr	r3, [pc, #12]	; (1a001a4c <Chip_Clock_GetDividerDivisor+0x18>)
1a001a40:	5c18      	ldrb	r0, [r3, r0]
}
1a001a42:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001a46:	4770      	bx	lr
1a001a48:	40050000 	.word	0x40050000
1a001a4c:	1a0049b4 	.word	0x1a0049b4

1a001a50 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001a50:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001a52:	2810      	cmp	r0, #16
1a001a54:	d80a      	bhi.n	1a001a6c <Chip_Clock_GetClockInputHz+0x1c>
1a001a56:	e8df f000 	tbb	[pc, r0]
1a001a5a:	0b44      	.short	0x0b44
1a001a5c:	0921180d 	.word	0x0921180d
1a001a60:	2d2a2724 	.word	0x2d2a2724
1a001a64:	34300909 	.word	0x34300909
1a001a68:	3c38      	.short	0x3c38
1a001a6a:	40          	.byte	0x40
1a001a6b:	00          	.byte	0x00
	uint32_t rate = 0;
1a001a6c:	2000      	movs	r0, #0
1a001a6e:	e03a      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001a70:	481e      	ldr	r0, [pc, #120]	; (1a001aec <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001a72:	e038      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001a74:	4b1e      	ldr	r3, [pc, #120]	; (1a001af0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001a76:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001a7a:	f003 0307 	and.w	r3, r3, #7
1a001a7e:	2b04      	cmp	r3, #4
1a001a80:	d001      	beq.n	1a001a86 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001a82:	481c      	ldr	r0, [pc, #112]	; (1a001af4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001a84:	e02f      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001a86:	2000      	movs	r0, #0
1a001a88:	e02d      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001a8a:	4b19      	ldr	r3, [pc, #100]	; (1a001af0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001a8c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001a90:	f003 0307 	and.w	r3, r3, #7
1a001a94:	2b04      	cmp	r3, #4
1a001a96:	d027      	beq.n	1a001ae8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001a98:	4816      	ldr	r0, [pc, #88]	; (1a001af4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001a9a:	e024      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001a9c:	4b16      	ldr	r3, [pc, #88]	; (1a001af8 <Chip_Clock_GetClockInputHz+0xa8>)
1a001a9e:	6818      	ldr	r0, [r3, #0]
		break;
1a001aa0:	e021      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001aa2:	4b16      	ldr	r3, [pc, #88]	; (1a001afc <Chip_Clock_GetClockInputHz+0xac>)
1a001aa4:	6818      	ldr	r0, [r3, #0]
		break;
1a001aa6:	e01e      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001aa8:	4b15      	ldr	r3, [pc, #84]	; (1a001b00 <Chip_Clock_GetClockInputHz+0xb0>)
1a001aaa:	6818      	ldr	r0, [r3, #0]
		break;
1a001aac:	e01b      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001aae:	4b14      	ldr	r3, [pc, #80]	; (1a001b00 <Chip_Clock_GetClockInputHz+0xb0>)
1a001ab0:	6858      	ldr	r0, [r3, #4]
		break;
1a001ab2:	e018      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001ab4:	f000 f868 	bl	1a001b88 <Chip_Clock_GetMainPLLHz>
		break;
1a001ab8:	e015      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001aba:	2100      	movs	r1, #0
1a001abc:	f000 f89a 	bl	1a001bf4 <Chip_Clock_GetDivRate>
		break;
1a001ac0:	e011      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001ac2:	2101      	movs	r1, #1
1a001ac4:	f000 f896 	bl	1a001bf4 <Chip_Clock_GetDivRate>
		break;
1a001ac8:	e00d      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001aca:	2102      	movs	r1, #2
1a001acc:	f000 f892 	bl	1a001bf4 <Chip_Clock_GetDivRate>
		break;
1a001ad0:	e009      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001ad2:	2103      	movs	r1, #3
1a001ad4:	f000 f88e 	bl	1a001bf4 <Chip_Clock_GetDivRate>
		break;
1a001ad8:	e005      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001ada:	2104      	movs	r1, #4
1a001adc:	f000 f88a 	bl	1a001bf4 <Chip_Clock_GetDivRate>
		break;
1a001ae0:	e001      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001ae2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001ae6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001ae8:	4806      	ldr	r0, [pc, #24]	; (1a001b04 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001aea:	e7fc      	b.n	1a001ae6 <Chip_Clock_GetClockInputHz+0x96>
1a001aec:	00b71b00 	.word	0x00b71b00
1a001af0:	40043000 	.word	0x40043000
1a001af4:	017d7840 	.word	0x017d7840
1a001af8:	1a0048f8 	.word	0x1a0048f8
1a001afc:	1a004924 	.word	0x1a004924
1a001b00:	100000c0 	.word	0x100000c0
1a001b04:	02faf080 	.word	0x02faf080

1a001b08 <Chip_Clock_CalcMainPLLValue>:
{
1a001b08:	b538      	push	{r3, r4, r5, lr}
1a001b0a:	4605      	mov	r5, r0
1a001b0c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001b0e:	7908      	ldrb	r0, [r1, #4]
1a001b10:	f7ff ff9e 	bl	1a001a50 <Chip_Clock_GetClockInputHz>
1a001b14:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001b16:	4b19      	ldr	r3, [pc, #100]	; (1a001b7c <Chip_Clock_CalcMainPLLValue+0x74>)
1a001b18:	442b      	add	r3, r5
1a001b1a:	4a19      	ldr	r2, [pc, #100]	; (1a001b80 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001b1c:	4293      	cmp	r3, r2
1a001b1e:	d821      	bhi.n	1a001b64 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001b20:	b318      	cbz	r0, 1a001b6a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001b22:	2380      	movs	r3, #128	; 0x80
1a001b24:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001b26:	2300      	movs	r3, #0
1a001b28:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001b2a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001b2c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001b30:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001b32:	4a14      	ldr	r2, [pc, #80]	; (1a001b84 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001b34:	4295      	cmp	r5, r2
1a001b36:	d903      	bls.n	1a001b40 <Chip_Clock_CalcMainPLLValue+0x38>
1a001b38:	fb03 f000 	mul.w	r0, r3, r0
1a001b3c:	42a8      	cmp	r0, r5
1a001b3e:	d007      	beq.n	1a001b50 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001b40:	4621      	mov	r1, r4
1a001b42:	4628      	mov	r0, r5
1a001b44:	f7ff fe96 	bl	1a001874 <pll_get_frac>
		if (!ppll->nsel) {
1a001b48:	68a3      	ldr	r3, [r4, #8]
1a001b4a:	b18b      	cbz	r3, 1a001b70 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001b4c:	3b01      	subs	r3, #1
1a001b4e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001b50:	6923      	ldr	r3, [r4, #16]
1a001b52:	b183      	cbz	r3, 1a001b76 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001b54:	68e2      	ldr	r2, [r4, #12]
1a001b56:	b10a      	cbz	r2, 1a001b5c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001b58:	3a01      	subs	r2, #1
1a001b5a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001b5c:	3b01      	subs	r3, #1
1a001b5e:	6123      	str	r3, [r4, #16]
	return 0;
1a001b60:	2000      	movs	r0, #0
}
1a001b62:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b68:	e7fb      	b.n	1a001b62 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b6e:	e7f8      	b.n	1a001b62 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b74:	e7f5      	b.n	1a001b62 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b7a:	e7f2      	b.n	1a001b62 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001b7c:	ff6b3a10 	.word	0xff6b3a10
1a001b80:	0b940510 	.word	0x0b940510
1a001b84:	094c5eff 	.word	0x094c5eff

1a001b88 <Chip_Clock_GetMainPLLHz>:
{
1a001b88:	b530      	push	{r4, r5, lr}
1a001b8a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001b8c:	4d17      	ldr	r5, [pc, #92]	; (1a001bec <Chip_Clock_GetMainPLLHz+0x64>)
1a001b8e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001b90:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001b94:	f7ff ff5c 	bl	1a001a50 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001b98:	4b15      	ldr	r3, [pc, #84]	; (1a001bf0 <Chip_Clock_GetMainPLLHz+0x68>)
1a001b9a:	681b      	ldr	r3, [r3, #0]
1a001b9c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001b9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001ba0:	f013 0f01 	tst.w	r3, #1
1a001ba4:	d020      	beq.n	1a001be8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001ba6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001baa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001bae:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001bb2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001bb6:	3301      	adds	r3, #1
	n = nsel + 1;
1a001bb8:	3201      	adds	r2, #1
	p = ptab[psel];
1a001bba:	f10d 0c08 	add.w	ip, sp, #8
1a001bbe:	4461      	add	r1, ip
1a001bc0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001bc4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001bc8:	d108      	bne.n	1a001bdc <Chip_Clock_GetMainPLLHz+0x54>
1a001bca:	b93d      	cbnz	r5, 1a001bdc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001bcc:	0049      	lsls	r1, r1, #1
1a001bce:	fbb3 f3f1 	udiv	r3, r3, r1
1a001bd2:	fbb0 f0f2 	udiv	r0, r0, r2
1a001bd6:	fb00 f003 	mul.w	r0, r0, r3
1a001bda:	e003      	b.n	1a001be4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001bdc:	fbb0 f0f2 	udiv	r0, r0, r2
1a001be0:	fb03 f000 	mul.w	r0, r3, r0
}
1a001be4:	b003      	add	sp, #12
1a001be6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001be8:	2000      	movs	r0, #0
1a001bea:	e7fb      	b.n	1a001be4 <Chip_Clock_GetMainPLLHz+0x5c>
1a001bec:	40050000 	.word	0x40050000
1a001bf0:	1a0049b0 	.word	0x1a0049b0

1a001bf4 <Chip_Clock_GetDivRate>:
{
1a001bf4:	b538      	push	{r3, r4, r5, lr}
1a001bf6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001bf8:	4608      	mov	r0, r1
1a001bfa:	f7ff ff0d 	bl	1a001a18 <Chip_Clock_GetDividerSource>
1a001bfe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001c00:	4620      	mov	r0, r4
1a001c02:	f7ff ff17 	bl	1a001a34 <Chip_Clock_GetDividerDivisor>
1a001c06:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001c08:	4628      	mov	r0, r5
1a001c0a:	f7ff ff21 	bl	1a001a50 <Chip_Clock_GetClockInputHz>
1a001c0e:	3401      	adds	r4, #1
}
1a001c10:	fbb0 f0f4 	udiv	r0, r0, r4
1a001c14:	bd38      	pop	{r3, r4, r5, pc}
1a001c16:	Address 0x000000001a001c16 is out of bounds.


1a001c18 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001c18:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001c1a:	f100 0416 	add.w	r4, r0, #22
1a001c1e:	00a4      	lsls	r4, r4, #2
1a001c20:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001c24:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001c28:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001c2a:	281b      	cmp	r0, #27
1a001c2c:	d813      	bhi.n	1a001c56 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001c2e:	2911      	cmp	r1, #17
1a001c30:	d01a      	beq.n	1a001c68 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001c32:	4d0e      	ldr	r5, [pc, #56]	; (1a001c6c <Chip_Clock_SetBaseClock+0x54>)
1a001c34:	4025      	ands	r5, r4

			if (autoblocken) {
1a001c36:	b10a      	cbz	r2, 1a001c3c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001c38:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001c3c:	b10b      	cbz	r3, 1a001c42 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001c3e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001c42:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001c46:	3016      	adds	r0, #22
1a001c48:	0080      	lsls	r0, r0, #2
1a001c4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c4e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c52:	6045      	str	r5, [r0, #4]
1a001c54:	e008      	b.n	1a001c68 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001c56:	f044 0401 	orr.w	r4, r4, #1
1a001c5a:	3016      	adds	r0, #22
1a001c5c:	0080      	lsls	r0, r0, #2
1a001c5e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c62:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c66:	6044      	str	r4, [r0, #4]
	}
}
1a001c68:	bc30      	pop	{r4, r5}
1a001c6a:	4770      	bx	lr
1a001c6c:	e0fff7fe 	.word	0xe0fff7fe

1a001c70 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001c70:	281b      	cmp	r0, #27
1a001c72:	d80c      	bhi.n	1a001c8e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001c74:	3016      	adds	r0, #22
1a001c76:	0080      	lsls	r0, r0, #2
1a001c78:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c7c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c80:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001c82:	f010 0f01 	tst.w	r0, #1
1a001c86:	d104      	bne.n	1a001c92 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001c88:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001c8c:	4770      	bx	lr
		return CLKINPUT_PD;
1a001c8e:	2011      	movs	r0, #17
1a001c90:	4770      	bx	lr
		return CLKINPUT_PD;
1a001c92:	2011      	movs	r0, #17
}
1a001c94:	4770      	bx	lr

1a001c96 <Chip_Clock_GetBaseClocktHz>:
{
1a001c96:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001c98:	f7ff ffea 	bl	1a001c70 <Chip_Clock_GetBaseClock>
1a001c9c:	f7ff fed8 	bl	1a001a50 <Chip_Clock_GetClockInputHz>
}
1a001ca0:	bd08      	pop	{r3, pc}
1a001ca2:	Address 0x000000001a001ca2 is out of bounds.


1a001ca4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001ca4:	b971      	cbnz	r1, 1a001cc4 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001ca6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001ca8:	b10a      	cbz	r2, 1a001cae <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001caa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001cae:	2b02      	cmp	r3, #2
1a001cb0:	d00a      	beq.n	1a001cc8 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001cb2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001cb6:	d30a      	bcc.n	1a001cce <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001cb8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001cbc:	4b06      	ldr	r3, [pc, #24]	; (1a001cd8 <Chip_Clock_EnableOpts+0x34>)
1a001cbe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001cc2:	4770      	bx	lr
		reg |= (1 << 1);
1a001cc4:	2103      	movs	r1, #3
1a001cc6:	e7ef      	b.n	1a001ca8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001cc8:	f041 0120 	orr.w	r1, r1, #32
1a001ccc:	e7f1      	b.n	1a001cb2 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001cce:	3020      	adds	r0, #32
1a001cd0:	4b02      	ldr	r3, [pc, #8]	; (1a001cdc <Chip_Clock_EnableOpts+0x38>)
1a001cd2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001cd6:	4770      	bx	lr
1a001cd8:	40052000 	.word	0x40052000
1a001cdc:	40051000 	.word	0x40051000

1a001ce0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001ce0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ce4:	d309      	bcc.n	1a001cfa <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001ce6:	4a09      	ldr	r2, [pc, #36]	; (1a001d0c <Chip_Clock_Enable+0x2c>)
1a001ce8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001cec:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001cf0:	f043 0301 	orr.w	r3, r3, #1
1a001cf4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001cf8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001cfa:	4a05      	ldr	r2, [pc, #20]	; (1a001d10 <Chip_Clock_Enable+0x30>)
1a001cfc:	3020      	adds	r0, #32
1a001cfe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001d02:	f043 0301 	orr.w	r3, r3, #1
1a001d06:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001d0a:	4770      	bx	lr
1a001d0c:	40052000 	.word	0x40052000
1a001d10:	40051000 	.word	0x40051000

1a001d14 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001d14:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001d16:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001d1a:	d309      	bcc.n	1a001d30 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001d1c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001d20:	4a0d      	ldr	r2, [pc, #52]	; (1a001d58 <Chip_Clock_GetRate+0x44>)
1a001d22:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001d26:	f014 0f01 	tst.w	r4, #1
1a001d2a:	d107      	bne.n	1a001d3c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001d2c:	2000      	movs	r0, #0
	}

	return rate;
}
1a001d2e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001d30:	f100 0320 	add.w	r3, r0, #32
1a001d34:	4a09      	ldr	r2, [pc, #36]	; (1a001d5c <Chip_Clock_GetRate+0x48>)
1a001d36:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001d3a:	e7f4      	b.n	1a001d26 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001d3c:	f7ff fe20 	bl	1a001980 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001d40:	f7ff ffa9 	bl	1a001c96 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001d44:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001d48:	d103      	bne.n	1a001d52 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001d4a:	2301      	movs	r3, #1
		rate = rate / div;
1a001d4c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001d50:	e7ed      	b.n	1a001d2e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001d52:	2302      	movs	r3, #2
1a001d54:	e7fa      	b.n	1a001d4c <Chip_Clock_GetRate+0x38>
1a001d56:	bf00      	nop
1a001d58:	40052000 	.word	0x40052000
1a001d5c:	40051000 	.word	0x40051000

1a001d60 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001d60:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001d62:	2069      	movs	r0, #105	; 0x69
1a001d64:	f7ff ffd6 	bl	1a001d14 <Chip_Clock_GetRate>
1a001d68:	4b01      	ldr	r3, [pc, #4]	; (1a001d70 <SystemCoreClockUpdate+0x10>)
1a001d6a:	6018      	str	r0, [r3, #0]
}
1a001d6c:	bd08      	pop	{r3, pc}
1a001d6e:	bf00      	nop
1a001d70:	100000e8 	.word	0x100000e8

1a001d74 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001d74:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a001d76:	6843      	ldr	r3, [r0, #4]
1a001d78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001d7c:	2b30      	cmp	r3, #48	; 0x30
1a001d7e:	d04c      	beq.n	1a001e1a <Chip_I2CM_XferHandler+0xa6>
1a001d80:	d908      	bls.n	1a001d94 <Chip_I2CM_XferHandler+0x20>
1a001d82:	2b48      	cmp	r3, #72	; 0x48
1a001d84:	d06c      	beq.n	1a001e60 <Chip_I2CM_XferHandler+0xec>
1a001d86:	d934      	bls.n	1a001df2 <Chip_I2CM_XferHandler+0x7e>
1a001d88:	2b58      	cmp	r3, #88	; 0x58
1a001d8a:	d058      	beq.n	1a001e3e <Chip_I2CM_XferHandler+0xca>
1a001d8c:	2bf8      	cmp	r3, #248	; 0xf8
1a001d8e:	d13e      	bne.n	1a001e0e <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a001d90:	2000      	movs	r0, #0
1a001d92:	e02b      	b.n	1a001dec <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001d94:	2b10      	cmp	r3, #16
1a001d96:	d016      	beq.n	1a001dc6 <Chip_I2CM_XferHandler+0x52>
1a001d98:	d90e      	bls.n	1a001db8 <Chip_I2CM_XferHandler+0x44>
1a001d9a:	2b20      	cmp	r3, #32
1a001d9c:	d03d      	beq.n	1a001e1a <Chip_I2CM_XferHandler+0xa6>
1a001d9e:	2b28      	cmp	r3, #40	; 0x28
1a001da0:	d001      	beq.n	1a001da6 <Chip_I2CM_XferHandler+0x32>
1a001da2:	2b18      	cmp	r3, #24
1a001da4:	d135      	bne.n	1a001e12 <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a001da6:	888b      	ldrh	r3, [r1, #4]
1a001da8:	2b00      	cmp	r3, #0
1a001daa:	d13e      	bne.n	1a001e2a <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a001dac:	88cb      	ldrh	r3, [r1, #6]
1a001dae:	2b00      	cmp	r3, #0
1a001db0:	d15e      	bne.n	1a001e70 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a001db2:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a001db4:	232c      	movs	r3, #44	; 0x2c
1a001db6:	e00f      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001db8:	b91b      	cbnz	r3, 1a001dc2 <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a001dba:	2303      	movs	r3, #3
1a001dbc:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001dbe:	232c      	movs	r3, #44	; 0x2c
        break;
1a001dc0:	e00a      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001dc2:	2b08      	cmp	r3, #8
1a001dc4:	d125      	bne.n	1a001e12 <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001dc6:	780a      	ldrb	r2, [r1, #0]
1a001dc8:	888b      	ldrh	r3, [r1, #4]
1a001dca:	fab3 f383 	clz	r3, r3
1a001dce:	095b      	lsrs	r3, r3, #5
1a001dd0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001dd4:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001dd6:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001dd8:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001ddc:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a001dde:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a001de2:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a001de4:	8848      	ldrh	r0, [r1, #2]
1a001de6:	38ff      	subs	r0, #255	; 0xff
1a001de8:	bf18      	it	ne
1a001dea:	2001      	movne	r0, #1
}
1a001dec:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001df0:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001df2:	2b38      	cmp	r3, #56	; 0x38
1a001df4:	d038      	beq.n	1a001e68 <Chip_I2CM_XferHandler+0xf4>
1a001df6:	2b40      	cmp	r3, #64	; 0x40
1a001df8:	d10b      	bne.n	1a001e12 <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001dfa:	88ca      	ldrh	r2, [r1, #6]
1a001dfc:	2a01      	cmp	r2, #1
1a001dfe:	d927      	bls.n	1a001e50 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a001e00:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a001e02:	2a00      	cmp	r2, #0
1a001e04:	d1e8      	bne.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a001e06:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001e08:	f023 0310 	bic.w	r3, r3, #16
1a001e0c:	e7e4      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001e0e:	2b50      	cmp	r3, #80	; 0x50
1a001e10:	d015      	beq.n	1a001e3e <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a001e12:	2301      	movs	r3, #1
1a001e14:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001e16:	232c      	movs	r3, #44	; 0x2c
        break;
1a001e18:	e7de      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a001e1a:	784b      	ldrb	r3, [r1, #1]
1a001e1c:	f013 0f01 	tst.w	r3, #1
1a001e20:	d1c1      	bne.n	1a001da6 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a001e22:	2302      	movs	r3, #2
1a001e24:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001e26:	232c      	movs	r3, #44	; 0x2c
			break;
1a001e28:	e7d6      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a001e2a:	688b      	ldr	r3, [r1, #8]
1a001e2c:	1c5a      	adds	r2, r3, #1
1a001e2e:	608a      	str	r2, [r1, #8]
1a001e30:	781b      	ldrb	r3, [r3, #0]
1a001e32:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001e34:	888b      	ldrh	r3, [r1, #4]
1a001e36:	3b01      	subs	r3, #1
1a001e38:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a001e3a:	233c      	movs	r3, #60	; 0x3c
1a001e3c:	e7cc      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a001e3e:	6882      	ldr	r2, [r0, #8]
1a001e40:	68cb      	ldr	r3, [r1, #12]
1a001e42:	1c5c      	adds	r4, r3, #1
1a001e44:	60cc      	str	r4, [r1, #12]
1a001e46:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a001e48:	88cb      	ldrh	r3, [r1, #6]
1a001e4a:	3b01      	subs	r3, #1
1a001e4c:	80cb      	strh	r3, [r1, #6]
1a001e4e:	e7d4      	b.n	1a001dfa <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001e50:	784b      	ldrb	r3, [r1, #1]
1a001e52:	f013 0f02 	tst.w	r3, #2
1a001e56:	d101      	bne.n	1a001e5c <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a001e58:	233c      	movs	r3, #60	; 0x3c
1a001e5a:	e7d2      	b.n	1a001e02 <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a001e5c:	2338      	movs	r3, #56	; 0x38
1a001e5e:	e7d0      	b.n	1a001e02 <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a001e60:	2304      	movs	r3, #4
1a001e62:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001e64:	232c      	movs	r3, #44	; 0x2c
		break;
1a001e66:	e7b7      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a001e68:	2305      	movs	r3, #5
1a001e6a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a001e6c:	233c      	movs	r3, #60	; 0x3c
		break;
1a001e6e:	e7b3      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a001e70:	231c      	movs	r3, #28
1a001e72:	e7b1      	b.n	1a001dd8 <Chip_I2CM_XferHandler+0x64>

1a001e74 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a001e74:	23ff      	movs	r3, #255	; 0xff
1a001e76:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a001e78:	232c      	movs	r3, #44	; 0x2c
1a001e7a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a001e7c:	2360      	movs	r3, #96	; 0x60
1a001e7e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a001e80:	4770      	bx	lr

1a001e82 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001e82:	b538      	push	{r3, r4, r5, lr}
1a001e84:	4604      	mov	r4, r0
1a001e86:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a001e88:	f7ff fff4 	bl	1a001e74 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a001e8c:	2000      	movs	r0, #0

	while (ret == 0) {
1a001e8e:	e003      	b.n	1a001e98 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a001e90:	4629      	mov	r1, r5
1a001e92:	4620      	mov	r0, r4
1a001e94:	f7ff ff6e 	bl	1a001d74 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a001e98:	b920      	cbnz	r0, 1a001ea4 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a001e9a:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a001e9c:	f013 0f08 	tst.w	r3, #8
1a001ea0:	d0fb      	beq.n	1a001e9a <Chip_I2CM_XferBlocking+0x18>
1a001ea2:	e7f5      	b.n	1a001e90 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a001ea4:	bd38      	pop	{r3, r4, r5, pc}

1a001ea6 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001ea6:	4770      	bx	lr

1a001ea8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001ea8:	b570      	push	{r4, r5, r6, lr}
1a001eaa:	b08a      	sub	sp, #40	; 0x28
1a001eac:	4605      	mov	r5, r0
1a001eae:	460e      	mov	r6, r1
1a001eb0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001eb2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001eb6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001eb8:	2806      	cmp	r0, #6
1a001eba:	d018      	beq.n	1a001eee <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001ebc:	2300      	movs	r3, #0
1a001ebe:	2201      	movs	r2, #1
1a001ec0:	4629      	mov	r1, r5
1a001ec2:	2004      	movs	r0, #4
1a001ec4:	f7ff fea8 	bl	1a001c18 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001ec8:	4a4a      	ldr	r2, [pc, #296]	; (1a001ff4 <Chip_SetupCoreClock+0x14c>)
1a001eca:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001ecc:	f043 0301 	orr.w	r3, r3, #1
1a001ed0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001ed2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001ed6:	a901      	add	r1, sp, #4
1a001ed8:	4630      	mov	r0, r6
1a001eda:	f7ff fe15 	bl	1a001b08 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001ede:	4b46      	ldr	r3, [pc, #280]	; (1a001ff8 <Chip_SetupCoreClock+0x150>)
1a001ee0:	429e      	cmp	r6, r3
1a001ee2:	d916      	bls.n	1a001f12 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001ee4:	9b01      	ldr	r3, [sp, #4]
1a001ee6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001eea:	d003      	beq.n	1a001ef4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001eec:	e7fe      	b.n	1a001eec <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001eee:	f7ff fd6d 	bl	1a0019cc <Chip_Clock_EnableCrystal>
1a001ef2:	e7e3      	b.n	1a001ebc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001ef8:	d005      	beq.n	1a001f06 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001efe:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001f00:	2500      	movs	r5, #0
			direct = 1;
1a001f02:	2601      	movs	r6, #1
1a001f04:	e007      	b.n	1a001f16 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001f06:	9b04      	ldr	r3, [sp, #16]
1a001f08:	3301      	adds	r3, #1
1a001f0a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001f0c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001f0e:	2600      	movs	r6, #0
1a001f10:	e001      	b.n	1a001f16 <Chip_SetupCoreClock+0x6e>
1a001f12:	2500      	movs	r5, #0
1a001f14:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001f16:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001f1a:	9b01      	ldr	r3, [sp, #4]
1a001f1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001f20:	9a05      	ldr	r2, [sp, #20]
1a001f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001f26:	9a03      	ldr	r2, [sp, #12]
1a001f28:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001f2c:	9a04      	ldr	r2, [sp, #16]
1a001f2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f36:	4a2f      	ldr	r2, [pc, #188]	; (1a001ff4 <Chip_SetupCoreClock+0x14c>)
1a001f38:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001f3a:	4b2e      	ldr	r3, [pc, #184]	; (1a001ff4 <Chip_SetupCoreClock+0x14c>)
1a001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001f3e:	f013 0f01 	tst.w	r3, #1
1a001f42:	d0fa      	beq.n	1a001f3a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001f44:	2300      	movs	r3, #0
1a001f46:	2201      	movs	r2, #1
1a001f48:	2109      	movs	r1, #9
1a001f4a:	2004      	movs	r0, #4
1a001f4c:	f7ff fe64 	bl	1a001c18 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001f50:	b306      	cbz	r6, 1a001f94 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001f52:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001f56:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001f5a:	1e5a      	subs	r2, r3, #1
1a001f5c:	9209      	str	r2, [sp, #36]	; 0x24
1a001f5e:	2b00      	cmp	r3, #0
1a001f60:	d1fa      	bne.n	1a001f58 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001f62:	9b01      	ldr	r3, [sp, #4]
1a001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001f68:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001f6a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001f6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001f72:	9a05      	ldr	r2, [sp, #20]
1a001f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001f78:	9a03      	ldr	r2, [sp, #12]
1a001f7a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001f7e:	9a04      	ldr	r2, [sp, #16]
1a001f80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f88:	4a1a      	ldr	r2, [pc, #104]	; (1a001ff4 <Chip_SetupCoreClock+0x14c>)
1a001f8a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001f8c:	2c00      	cmp	r4, #0
1a001f8e:	d12e      	bne.n	1a001fee <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001f90:	b00a      	add	sp, #40	; 0x28
1a001f92:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001f94:	2d00      	cmp	r5, #0
1a001f96:	d0f9      	beq.n	1a001f8c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001f98:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001f9c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001fa0:	1e5a      	subs	r2, r3, #1
1a001fa2:	9209      	str	r2, [sp, #36]	; 0x24
1a001fa4:	2b00      	cmp	r3, #0
1a001fa6:	d1fa      	bne.n	1a001f9e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001fa8:	9b04      	ldr	r3, [sp, #16]
1a001faa:	1e5a      	subs	r2, r3, #1
1a001fac:	9204      	str	r2, [sp, #16]
1a001fae:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001fb2:	9b01      	ldr	r3, [sp, #4]
1a001fb4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001fb8:	9905      	ldr	r1, [sp, #20]
1a001fba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001fbe:	9903      	ldr	r1, [sp, #12]
1a001fc0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001fcc:	4a09      	ldr	r2, [pc, #36]	; (1a001ff4 <Chip_SetupCoreClock+0x14c>)
1a001fce:	6453      	str	r3, [r2, #68]	; 0x44
1a001fd0:	e7dc      	b.n	1a001f8c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001fd2:	480a      	ldr	r0, [pc, #40]	; (1a001ffc <Chip_SetupCoreClock+0x154>)
1a001fd4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001fd8:	78cb      	ldrb	r3, [r1, #3]
1a001fda:	788a      	ldrb	r2, [r1, #2]
1a001fdc:	7849      	ldrb	r1, [r1, #1]
1a001fde:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001fe2:	f7ff fe19 	bl	1a001c18 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001fe6:	3401      	adds	r4, #1
1a001fe8:	2c11      	cmp	r4, #17
1a001fea:	d9f2      	bls.n	1a001fd2 <Chip_SetupCoreClock+0x12a>
1a001fec:	e7d0      	b.n	1a001f90 <Chip_SetupCoreClock+0xe8>
1a001fee:	2400      	movs	r4, #0
1a001ff0:	e7fa      	b.n	1a001fe8 <Chip_SetupCoreClock+0x140>
1a001ff2:	bf00      	nop
1a001ff4:	40050000 	.word	0x40050000
1a001ff8:	068e7780 	.word	0x068e7780
1a001ffc:	1a004a28 	.word	0x1a004a28

1a002000 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002000:	2901      	cmp	r1, #1
1a002002:	d109      	bne.n	1a002018 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002004:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002008:	0082      	lsls	r2, r0, #2
1a00200a:	4b04      	ldr	r3, [pc, #16]	; (1a00201c <Chip_I2C_EventHandler+0x1c>)
1a00200c:	4413      	add	r3, r2
1a00200e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002010:	7d13      	ldrb	r3, [r2, #20]
1a002012:	b2db      	uxtb	r3, r3
1a002014:	2b04      	cmp	r3, #4
1a002016:	d0fb      	beq.n	1a002010 <Chip_I2C_EventHandler+0x10>
}
1a002018:	4770      	bx	lr
1a00201a:	bf00      	nop
1a00201c:	10000000 	.word	0x10000000

1a002020 <handleMasterXferState>:
{
1a002020:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a002022:	6843      	ldr	r3, [r0, #4]
1a002024:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a002028:	2b58      	cmp	r3, #88	; 0x58
1a00202a:	d87f      	bhi.n	1a00212c <handleMasterXferState+0x10c>
1a00202c:	e8df f003 	tbb	[pc, r3]
1a002030:	7e7e7e7a 	.word	0x7e7e7e7a
1a002034:	7e7e7e7e 	.word	0x7e7e7e7e
1a002038:	7e7e7e2f 	.word	0x7e7e7e2f
1a00203c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002040:	7e7e7e2f 	.word	0x7e7e7e2f
1a002044:	7e7e7e7e 	.word	0x7e7e7e7e
1a002048:	7e7e7e39 	.word	0x7e7e7e39
1a00204c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002050:	7e7e7e6e 	.word	0x7e7e7e6e
1a002054:	7e7e7e7e 	.word	0x7e7e7e7e
1a002058:	7e7e7e39 	.word	0x7e7e7e39
1a00205c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002060:	7e7e7e72 	.word	0x7e7e7e72
1a002064:	7e7e7e7e 	.word	0x7e7e7e7e
1a002068:	7e7e7e76 	.word	0x7e7e7e76
1a00206c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002070:	7e7e7e6c 	.word	0x7e7e7e6c
1a002074:	7e7e7e7e 	.word	0x7e7e7e7e
1a002078:	7e7e7e6e 	.word	0x7e7e7e6e
1a00207c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002080:	7e7e7e2d 	.word	0x7e7e7e2d
1a002084:	7e7e7e7e 	.word	0x7e7e7e7e
1a002088:	4f          	.byte	0x4f
1a002089:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00208a:	233c      	movs	r3, #60	; 0x3c
1a00208c:	e020      	b.n	1a0020d0 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00208e:	780a      	ldrb	r2, [r1, #0]
1a002090:	688b      	ldr	r3, [r1, #8]
1a002092:	fab3 f383 	clz	r3, r3
1a002096:	095b      	lsrs	r3, r3, #5
1a002098:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00209c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00209e:	233c      	movs	r3, #60	; 0x3c
		break;
1a0020a0:	e023      	b.n	1a0020ea <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0020a2:	688b      	ldr	r3, [r1, #8]
1a0020a4:	b94b      	cbnz	r3, 1a0020ba <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0020a6:	690b      	ldr	r3, [r1, #16]
1a0020a8:	b123      	cbz	r3, 1a0020b4 <handleMasterXferState+0x94>
1a0020aa:	f06f 0320 	mvn.w	r3, #32
1a0020ae:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0020b2:	e01a      	b.n	1a0020ea <handleMasterXferState+0xca>
1a0020b4:	f06f 0310 	mvn.w	r3, #16
1a0020b8:	e7f9      	b.n	1a0020ae <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0020ba:	684b      	ldr	r3, [r1, #4]
1a0020bc:	1c5a      	adds	r2, r3, #1
1a0020be:	604a      	str	r2, [r1, #4]
1a0020c0:	781b      	ldrb	r3, [r3, #0]
1a0020c2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0020c4:	688b      	ldr	r3, [r1, #8]
1a0020c6:	3b01      	subs	r3, #1
1a0020c8:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0020ca:	233c      	movs	r3, #60	; 0x3c
1a0020cc:	e00d      	b.n	1a0020ea <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0020ce:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0020d0:	6884      	ldr	r4, [r0, #8]
1a0020d2:	68ca      	ldr	r2, [r1, #12]
1a0020d4:	1c55      	adds	r5, r2, #1
1a0020d6:	60cd      	str	r5, [r1, #12]
1a0020d8:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0020da:	690a      	ldr	r2, [r1, #16]
1a0020dc:	3a01      	subs	r2, #1
1a0020de:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0020e0:	690a      	ldr	r2, [r1, #16]
1a0020e2:	2a01      	cmp	r2, #1
1a0020e4:	dd01      	ble.n	1a0020ea <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0020e6:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0020ea:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0020ee:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0020f0:	f023 0210 	bic.w	r2, r3, #16
1a0020f4:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0020f6:	f013 0f10 	tst.w	r3, #16
1a0020fa:	d019      	beq.n	1a002130 <handleMasterXferState+0x110>
1a0020fc:	7d0b      	ldrb	r3, [r1, #20]
1a0020fe:	2b02      	cmp	r3, #2
1a002100:	d016      	beq.n	1a002130 <handleMasterXferState+0x110>
	return 1;
1a002102:	2001      	movs	r0, #1
}
1a002104:	bc30      	pop	{r4, r5}
1a002106:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a002108:	233c      	movs	r3, #60	; 0x3c
1a00210a:	e7e9      	b.n	1a0020e0 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00210c:	2305      	movs	r3, #5
1a00210e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002110:	232c      	movs	r3, #44	; 0x2c
		break;
1a002112:	e7ea      	b.n	1a0020ea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a002114:	2301      	movs	r3, #1
1a002116:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002118:	232c      	movs	r3, #44	; 0x2c
		break;
1a00211a:	e7e6      	b.n	1a0020ea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00211c:	2302      	movs	r3, #2
1a00211e:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a002120:	233c      	movs	r3, #60	; 0x3c
		break;
1a002122:	e7e2      	b.n	1a0020ea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a002124:	2303      	movs	r3, #3
1a002126:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002128:	232c      	movs	r3, #44	; 0x2c
1a00212a:	e7de      	b.n	1a0020ea <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00212c:	233c      	movs	r3, #60	; 0x3c
1a00212e:	e7dc      	b.n	1a0020ea <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a002130:	7d0b      	ldrb	r3, [r1, #20]
1a002132:	2b04      	cmp	r3, #4
1a002134:	d001      	beq.n	1a00213a <handleMasterXferState+0x11a>
		return 0;
1a002136:	2000      	movs	r0, #0
1a002138:	e7e4      	b.n	1a002104 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a00213a:	2300      	movs	r3, #0
1a00213c:	750b      	strb	r3, [r1, #20]
1a00213e:	e7fa      	b.n	1a002136 <handleMasterXferState+0x116>

1a002140 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002140:	b570      	push	{r4, r5, r6, lr}
1a002142:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002144:	4e06      	ldr	r6, [pc, #24]	; (1a002160 <Chip_I2C_Init+0x20>)
1a002146:	00c4      	lsls	r4, r0, #3
1a002148:	1a22      	subs	r2, r4, r0
1a00214a:	0093      	lsls	r3, r2, #2
1a00214c:	4433      	add	r3, r6
1a00214e:	8898      	ldrh	r0, [r3, #4]
1a002150:	f7ff fdc6 	bl	1a001ce0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002154:	1b64      	subs	r4, r4, r5
1a002156:	00a3      	lsls	r3, r4, #2
1a002158:	58f3      	ldr	r3, [r6, r3]
1a00215a:	226c      	movs	r2, #108	; 0x6c
1a00215c:	619a      	str	r2, [r3, #24]
}
1a00215e:	bd70      	pop	{r4, r5, r6, pc}
1a002160:	10000000 	.word	0x10000000

1a002164 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002168:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00216a:	4e0b      	ldr	r6, [pc, #44]	; (1a002198 <Chip_I2C_SetClockRate+0x34>)
1a00216c:	00c5      	lsls	r5, r0, #3
1a00216e:	1a2b      	subs	r3, r5, r0
1a002170:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002174:	eb06 0308 	add.w	r3, r6, r8
1a002178:	8898      	ldrh	r0, [r3, #4]
1a00217a:	f7ff fdcb 	bl	1a001d14 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00217e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002182:	f856 3008 	ldr.w	r3, [r6, r8]
1a002186:	0842      	lsrs	r2, r0, #1
1a002188:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00218a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00218e:	691a      	ldr	r2, [r3, #16]
1a002190:	1a80      	subs	r0, r0, r2
1a002192:	6158      	str	r0, [r3, #20]
}
1a002194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002198:	10000000 	.word	0x10000000

1a00219c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a00219c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0021a0:	009a      	lsls	r2, r3, #2
1a0021a2:	4b09      	ldr	r3, [pc, #36]	; (1a0021c8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0021a4:	4413      	add	r3, r2
1a0021a6:	691b      	ldr	r3, [r3, #16]
1a0021a8:	b153      	cbz	r3, 1a0021c0 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0021aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0021ae:	0082      	lsls	r2, r0, #2
1a0021b0:	4b05      	ldr	r3, [pc, #20]	; (1a0021c8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0021b2:	4413      	add	r3, r2
1a0021b4:	6898      	ldr	r0, [r3, #8]
}
1a0021b6:	4288      	cmp	r0, r1
1a0021b8:	bf14      	ite	ne
1a0021ba:	2000      	movne	r0, #0
1a0021bc:	2001      	moveq	r0, #1
1a0021be:	4770      	bx	lr
		iic->mEvent = event;
1a0021c0:	4b01      	ldr	r3, [pc, #4]	; (1a0021c8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0021c2:	4413      	add	r3, r2
1a0021c4:	6099      	str	r1, [r3, #8]
1a0021c6:	e7f0      	b.n	1a0021aa <Chip_I2C_SetMasterEventHandler+0xe>
1a0021c8:	10000000 	.word	0x10000000

1a0021cc <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0021cc:	b510      	push	{r4, lr}
1a0021ce:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0021d0:	4809      	ldr	r0, [pc, #36]	; (1a0021f8 <Chip_I2C_MasterStateHandler+0x2c>)
1a0021d2:	00e3      	lsls	r3, r4, #3
1a0021d4:	1b1b      	subs	r3, r3, r4
1a0021d6:	009a      	lsls	r2, r3, #2
1a0021d8:	1883      	adds	r3, r0, r2
1a0021da:	6919      	ldr	r1, [r3, #16]
1a0021dc:	5880      	ldr	r0, [r0, r2]
1a0021de:	f7ff ff1f 	bl	1a002020 <handleMasterXferState>
1a0021e2:	b940      	cbnz	r0, 1a0021f6 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0021e4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0021e8:	009a      	lsls	r2, r3, #2
1a0021ea:	4b03      	ldr	r3, [pc, #12]	; (1a0021f8 <Chip_I2C_MasterStateHandler+0x2c>)
1a0021ec:	4413      	add	r3, r2
1a0021ee:	689b      	ldr	r3, [r3, #8]
1a0021f0:	2102      	movs	r1, #2
1a0021f2:	4620      	mov	r0, r4
1a0021f4:	4798      	blx	r3
	}
}
1a0021f6:	bd10      	pop	{r4, pc}
1a0021f8:	10000000 	.word	0x10000000

1a0021fc <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0021fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002200:	0083      	lsls	r3, r0, #2
1a002202:	4a03      	ldr	r2, [pc, #12]	; (1a002210 <Chip_I2C_IsStateChanged+0x14>)
1a002204:	58d3      	ldr	r3, [r2, r3]
1a002206:	6818      	ldr	r0, [r3, #0]
}
1a002208:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a00220c:	4770      	bx	lr
1a00220e:	bf00      	nop
1a002210:	10000000 	.word	0x10000000

1a002214 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a002214:	2901      	cmp	r1, #1
1a002216:	d115      	bne.n	1a002244 <Chip_I2C_EventHandlerPolling+0x30>
{
1a002218:	b538      	push	{r3, r4, r5, lr}
1a00221a:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a00221c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002220:	009a      	lsls	r2, r3, #2
1a002222:	4b09      	ldr	r3, [pc, #36]	; (1a002248 <Chip_I2C_EventHandlerPolling+0x34>)
1a002224:	4413      	add	r3, r2
1a002226:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a002228:	7d2b      	ldrb	r3, [r5, #20]
1a00222a:	b2db      	uxtb	r3, r3
1a00222c:	2b04      	cmp	r3, #4
1a00222e:	d108      	bne.n	1a002242 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a002230:	4620      	mov	r0, r4
1a002232:	f7ff ffe3 	bl	1a0021fc <Chip_I2C_IsStateChanged>
1a002236:	2800      	cmp	r0, #0
1a002238:	d0f6      	beq.n	1a002228 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a00223a:	4620      	mov	r0, r4
1a00223c:	f7ff ffc6 	bl	1a0021cc <Chip_I2C_MasterStateHandler>
1a002240:	e7f2      	b.n	1a002228 <Chip_I2C_EventHandlerPolling+0x14>
}
1a002242:	bd38      	pop	{r3, r4, r5, pc}
1a002244:	4770      	bx	lr
1a002246:	bf00      	nop
1a002248:	10000000 	.word	0x10000000

1a00224c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00224c:	4b03      	ldr	r3, [pc, #12]	; (1a00225c <Chip_SSP_GetClockIndex+0x10>)
1a00224e:	4298      	cmp	r0, r3
1a002250:	d001      	beq.n	1a002256 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002252:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002254:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002256:	20a5      	movs	r0, #165	; 0xa5
1a002258:	4770      	bx	lr
1a00225a:	bf00      	nop
1a00225c:	400c5000 	.word	0x400c5000

1a002260 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002260:	4b04      	ldr	r3, [pc, #16]	; (1a002274 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002262:	4298      	cmp	r0, r3
1a002264:	d002      	beq.n	1a00226c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002266:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00226a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00226c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002270:	4770      	bx	lr
1a002272:	bf00      	nop
1a002274:	400c5000 	.word	0x400c5000

1a002278 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002278:	6803      	ldr	r3, [r0, #0]
1a00227a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00227e:	0209      	lsls	r1, r1, #8
1a002280:	b289      	uxth	r1, r1
1a002282:	4319      	orrs	r1, r3
1a002284:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002286:	6102      	str	r2, [r0, #16]
}
1a002288:	4770      	bx	lr

1a00228a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00228a:	b570      	push	{r4, r5, r6, lr}
1a00228c:	4606      	mov	r6, r0
1a00228e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002290:	f7ff ffe6 	bl	1a002260 <Chip_SSP_GetPeriphClockIndex>
1a002294:	f7ff fd3e 	bl	1a001d14 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002298:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00229e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0022a0:	e000      	b.n	1a0022a4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0022a2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0022a4:	42ab      	cmp	r3, r5
1a0022a6:	d90b      	bls.n	1a0022c0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0022a8:	1c4c      	adds	r4, r1, #1
1a0022aa:	fb02 f304 	mul.w	r3, r2, r4
1a0022ae:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0022b2:	429d      	cmp	r5, r3
1a0022b4:	d2f6      	bcs.n	1a0022a4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0022b6:	2cff      	cmp	r4, #255	; 0xff
1a0022b8:	d9f3      	bls.n	1a0022a2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0022ba:	3202      	adds	r2, #2
				cr0_div = 0;
1a0022bc:	2100      	movs	r1, #0
1a0022be:	e7f1      	b.n	1a0022a4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0022c0:	4630      	mov	r0, r6
1a0022c2:	f7ff ffd9 	bl	1a002278 <Chip_SSP_SetClockRate>
}
1a0022c6:	bd70      	pop	{r4, r5, r6, pc}

1a0022c8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0022c8:	b510      	push	{r4, lr}
1a0022ca:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0022cc:	f7ff ffbe 	bl	1a00224c <Chip_SSP_GetClockIndex>
1a0022d0:	f7ff fd06 	bl	1a001ce0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0022d4:	4620      	mov	r0, r4
1a0022d6:	f7ff ffc3 	bl	1a002260 <Chip_SSP_GetPeriphClockIndex>
1a0022da:	f7ff fd01 	bl	1a001ce0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0022de:	6863      	ldr	r3, [r4, #4]
1a0022e0:	f023 0304 	bic.w	r3, r3, #4
1a0022e4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0022e6:	6823      	ldr	r3, [r4, #0]
1a0022e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0022ec:	f043 0307 	orr.w	r3, r3, #7
1a0022f0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0022f2:	4902      	ldr	r1, [pc, #8]	; (1a0022fc <Chip_SSP_Init+0x34>)
1a0022f4:	4620      	mov	r0, r4
1a0022f6:	f7ff ffc8 	bl	1a00228a <Chip_SSP_SetBitRate>
}
1a0022fa:	bd10      	pop	{r4, pc}
1a0022fc:	000186a0 	.word	0x000186a0

1a002300 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002300:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002302:	4a0b      	ldr	r2, [pc, #44]	; (1a002330 <SystemInit+0x30>)
1a002304:	4b0b      	ldr	r3, [pc, #44]	; (1a002334 <SystemInit+0x34>)
1a002306:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002308:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00230c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00230e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002312:	2b20      	cmp	r3, #32
1a002314:	d004      	beq.n	1a002320 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002316:	f7ff f925 	bl	1a001564 <Board_SystemInit>
   Board_Init();
1a00231a:	f7ff f8ab 	bl	1a001474 <Board_Init>
}
1a00231e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002320:	4a04      	ldr	r2, [pc, #16]	; (1a002334 <SystemInit+0x34>)
1a002322:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00232a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00232e:	e7f2      	b.n	1a002316 <SystemInit+0x16>
1a002330:	1a000000 	.word	0x1a000000
1a002334:	e000ed00 	.word	0xe000ed00

1a002338 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002338:	4b04      	ldr	r3, [pc, #16]	; (1a00234c <cyclesCounterInit+0x14>)
1a00233a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00233c:	4a04      	ldr	r2, [pc, #16]	; (1a002350 <cyclesCounterInit+0x18>)
1a00233e:	6813      	ldr	r3, [r2, #0]
1a002340:	f043 0301 	orr.w	r3, r3, #1
1a002344:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002346:	2001      	movs	r0, #1
1a002348:	4770      	bx	lr
1a00234a:	bf00      	nop
1a00234c:	10000038 	.word	0x10000038
1a002350:	e0001000 	.word	0xe0001000

1a002354 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002358:	0083      	lsls	r3, r0, #2
1a00235a:	4a03      	ldr	r2, [pc, #12]	; (1a002368 <uartTxReady+0x14>)
1a00235c:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00235e:	6958      	ldr	r0, [r3, #20]
}
1a002360:	f000 0020 	and.w	r0, r0, #32
1a002364:	4770      	bx	lr
1a002366:	bf00      	nop
1a002368:	1a004a70 	.word	0x1a004a70

1a00236c <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00236c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002370:	0083      	lsls	r3, r0, #2
1a002372:	4a02      	ldr	r2, [pc, #8]	; (1a00237c <uartTxWrite+0x10>)
1a002374:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a002376:	6019      	str	r1, [r3, #0]
}
1a002378:	4770      	bx	lr
1a00237a:	bf00      	nop
1a00237c:	1a004a70 	.word	0x1a004a70

1a002380 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002384:	4680      	mov	r8, r0
1a002386:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002388:	4c19      	ldr	r4, [pc, #100]	; (1a0023f0 <uartInit+0x70>)
1a00238a:	0045      	lsls	r5, r0, #1
1a00238c:	182a      	adds	r2, r5, r0
1a00238e:	0093      	lsls	r3, r2, #2
1a002390:	18e6      	adds	r6, r4, r3
1a002392:	58e7      	ldr	r7, [r4, r3]
1a002394:	4638      	mov	r0, r7
1a002396:	f7ff f901 	bl	1a00159c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00239a:	4649      	mov	r1, r9
1a00239c:	4638      	mov	r0, r7
1a00239e:	f7ff f927 	bl	1a0015f0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0023a2:	2307      	movs	r3, #7
1a0023a4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0023a6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0023a8:	2301      	movs	r3, #1
1a0023aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0023ac:	7930      	ldrb	r0, [r6, #4]
1a0023ae:	7973      	ldrb	r3, [r6, #5]
1a0023b0:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0023b2:	f042 0218 	orr.w	r2, r2, #24
1a0023b6:	490f      	ldr	r1, [pc, #60]	; (1a0023f4 <uartInit+0x74>)
1a0023b8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0023c0:	79f0      	ldrb	r0, [r6, #7]
1a0023c2:	7a33      	ldrb	r3, [r6, #8]
1a0023c4:	7a72      	ldrb	r2, [r6, #9]
1a0023c6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0023ca:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0023d2:	f1b8 0f01 	cmp.w	r8, #1
1a0023d6:	d001      	beq.n	1a0023dc <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0023d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0023dc:	4a06      	ldr	r2, [pc, #24]	; (1a0023f8 <uartInit+0x78>)
1a0023de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0023e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0023e6:	221a      	movs	r2, #26
1a0023e8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0023ec:	e7f4      	b.n	1a0023d8 <uartInit+0x58>
1a0023ee:	bf00      	nop
1a0023f0:	1a004a70 	.word	0x1a004a70
1a0023f4:	40086000 	.word	0x40086000
1a0023f8:	40081000 	.word	0x40081000

1a0023fc <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0023fc:	b538      	push	{r3, r4, r5, lr}
1a0023fe:	4604      	mov	r4, r0
1a002400:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002402:	4620      	mov	r0, r4
1a002404:	f7ff ffa6 	bl	1a002354 <uartTxReady>
1a002408:	2800      	cmp	r0, #0
1a00240a:	d0fa      	beq.n	1a002402 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00240c:	4629      	mov	r1, r5
1a00240e:	4620      	mov	r0, r4
1a002410:	f7ff ffac 	bl	1a00236c <uartTxWrite>
}
1a002414:	bd38      	pop	{r3, r4, r5, pc}

1a002416 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002416:	b538      	push	{r3, r4, r5, lr}
1a002418:	4605      	mov	r5, r0
1a00241a:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00241c:	7821      	ldrb	r1, [r4, #0]
1a00241e:	b121      	cbz	r1, 1a00242a <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a002420:	4628      	mov	r0, r5
1a002422:	f7ff ffeb 	bl	1a0023fc <uartWriteByte>
      str++;
1a002426:	3401      	adds	r4, #1
1a002428:	e7f8      	b.n	1a00241c <uartWriteString+0x6>
   }
}
1a00242a:	bd38      	pop	{r3, r4, r5, pc}

1a00242c <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a00242c:	4b01      	ldr	r3, [pc, #4]	; (1a002434 <tickRead+0x8>)
1a00242e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a002432:	4770      	bx	lr
1a002434:	100000d0 	.word	0x100000d0

1a002438 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a002438:	b118      	cbz	r0, 1a002442 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00243a:	4b04      	ldr	r3, [pc, #16]	; (1a00244c <tickPowerSet+0x14>)
1a00243c:	2207      	movs	r2, #7
1a00243e:	601a      	str	r2, [r3, #0]
1a002440:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a002442:	4b02      	ldr	r3, [pc, #8]	; (1a00244c <tickPowerSet+0x14>)
1a002444:	2200      	movs	r2, #0
1a002446:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a002448:	4770      	bx	lr
1a00244a:	bf00      	nop
1a00244c:	e000e010 	.word	0xe000e010

1a002450 <tickInit>:
{
1a002450:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a002452:	ea50 0401 	orrs.w	r4, r0, r1
1a002456:	d02a      	beq.n	1a0024ae <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a002458:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a00245c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a002460:	2b00      	cmp	r3, #0
1a002462:	bf08      	it	eq
1a002464:	2a32      	cmpeq	r2, #50	; 0x32
1a002466:	d227      	bcs.n	1a0024b8 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a002468:	4b14      	ldr	r3, [pc, #80]	; (1a0024bc <tickInit+0x6c>)
1a00246a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00246e:	4b14      	ldr	r3, [pc, #80]	; (1a0024c0 <tickInit+0x70>)
1a002470:	681b      	ldr	r3, [r3, #0]
1a002472:	fba3 4500 	umull	r4, r5, r3, r0
1a002476:	fb03 5501 	mla	r5, r3, r1, r5
1a00247a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00247e:	2300      	movs	r3, #0
1a002480:	4620      	mov	r0, r4
1a002482:	4629      	mov	r1, r5
1a002484:	f001 f80a 	bl	1a00349c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a002488:	3801      	subs	r0, #1
1a00248a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00248e:	d209      	bcs.n	1a0024a4 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002490:	4b0c      	ldr	r3, [pc, #48]	; (1a0024c4 <tickInit+0x74>)
1a002492:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002494:	4a0c      	ldr	r2, [pc, #48]	; (1a0024c8 <tickInit+0x78>)
1a002496:	21e0      	movs	r1, #224	; 0xe0
1a002498:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00249c:	2200      	movs	r2, #0
1a00249e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0024a0:	2207      	movs	r2, #7
1a0024a2:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0024a4:	2001      	movs	r0, #1
1a0024a6:	f7ff ffc7 	bl	1a002438 <tickPowerSet>
      bool_t ret_val = 1;
1a0024aa:	2001      	movs	r0, #1
}
1a0024ac:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0024ae:	2000      	movs	r0, #0
1a0024b0:	f7ff ffc2 	bl	1a002438 <tickPowerSet>
         ret_val = 0;
1a0024b4:	2000      	movs	r0, #0
1a0024b6:	e7f9      	b.n	1a0024ac <tickInit+0x5c>
            ret_val = 0;
1a0024b8:	2000      	movs	r0, #0
1a0024ba:	e7f7      	b.n	1a0024ac <tickInit+0x5c>
1a0024bc:	10000040 	.word	0x10000040
1a0024c0:	100000e8 	.word	0x100000e8
1a0024c4:	e000e010 	.word	0xe000e010
1a0024c8:	e000ed00 	.word	0xe000ed00

1a0024cc <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0024cc:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0024ce:	4a07      	ldr	r2, [pc, #28]	; (1a0024ec <SysTick_Handler+0x20>)
1a0024d0:	6813      	ldr	r3, [r2, #0]
1a0024d2:	6851      	ldr	r1, [r2, #4]
1a0024d4:	3301      	adds	r3, #1
1a0024d6:	f141 0100 	adc.w	r1, r1, #0
1a0024da:	6013      	str	r3, [r2, #0]
1a0024dc:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0024de:	4b04      	ldr	r3, [pc, #16]	; (1a0024f0 <SysTick_Handler+0x24>)
1a0024e0:	681b      	ldr	r3, [r3, #0]
1a0024e2:	b113      	cbz	r3, 1a0024ea <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0024e4:	4a03      	ldr	r2, [pc, #12]	; (1a0024f4 <SysTick_Handler+0x28>)
1a0024e6:	6810      	ldr	r0, [r2, #0]
1a0024e8:	4798      	blx	r3
   }
}
1a0024ea:	bd08      	pop	{r3, pc}
1a0024ec:	100000d0 	.word	0x100000d0
1a0024f0:	100000d8 	.word	0x100000d8
1a0024f4:	100000c8 	.word	0x100000c8

1a0024f8 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0024f8:	b538      	push	{r3, r4, r5, lr}
1a0024fa:	4604      	mov	r4, r0
1a0024fc:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0024fe:	4b08      	ldr	r3, [pc, #32]	; (1a002520 <i2cHardwareInit+0x28>)
1a002500:	f640 0208 	movw	r2, #2056	; 0x808
1a002504:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a002508:	f7ff fe1a 	bl	1a002140 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00250c:	4629      	mov	r1, r5
1a00250e:	4620      	mov	r0, r4
1a002510:	f7ff fe28 	bl	1a002164 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a002514:	4903      	ldr	r1, [pc, #12]	; (1a002524 <i2cHardwareInit+0x2c>)
1a002516:	4620      	mov	r0, r4
1a002518:	f7ff fe40 	bl	1a00219c <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a00251c:	2001      	movs	r0, #1
1a00251e:	bd38      	pop	{r3, r4, r5, pc}
1a002520:	40086000 	.word	0x40086000
1a002524:	1a002215 	.word	0x1a002215

1a002528 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a002528:	b500      	push	{lr}
1a00252a:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a00252c:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a002530:	2100      	movs	r1, #0
1a002532:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a002536:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a00253a:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a00253c:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a002540:	9b07      	ldr	r3, [sp, #28]
1a002542:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a002544:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a002548:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a00254c:	4669      	mov	r1, sp
1a00254e:	4805      	ldr	r0, [pc, #20]	; (1a002564 <i2cHardwareRead+0x3c>)
1a002550:	f7ff fc97 	bl	1a001e82 <Chip_I2CM_XferBlocking>
1a002554:	b118      	cbz	r0, 1a00255e <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a002556:	2001      	movs	r0, #1
}
1a002558:	b005      	add	sp, #20
1a00255a:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a00255e:	2000      	movs	r0, #0
1a002560:	e7fa      	b.n	1a002558 <i2cHardwareRead+0x30>
1a002562:	bf00      	nop
1a002564:	400a1000 	.word	0x400a1000

1a002568 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a002568:	b108      	cbz	r0, 1a00256e <i2cHardwareWrite+0x6>
      return FALSE;
1a00256a:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a00256c:	4770      	bx	lr
{
1a00256e:	b500      	push	{lr}
1a002570:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a002572:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a002576:	2100      	movs	r1, #0
1a002578:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00257c:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a002580:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a002582:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a002586:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a002588:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a00258c:	4669      	mov	r1, sp
1a00258e:	4805      	ldr	r0, [pc, #20]	; (1a0025a4 <i2cHardwareWrite+0x3c>)
1a002590:	f7ff fc77 	bl	1a001e82 <Chip_I2CM_XferBlocking>
1a002594:	b118      	cbz	r0, 1a00259e <i2cHardwareWrite+0x36>
   return TRUE;
1a002596:	2001      	movs	r0, #1
}
1a002598:	b005      	add	sp, #20
1a00259a:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a00259e:	2000      	movs	r0, #0
1a0025a0:	e7fa      	b.n	1a002598 <i2cHardwareWrite+0x30>
1a0025a2:	bf00      	nop
1a0025a4:	400a1000 	.word	0x400a1000

1a0025a8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0025a8:	b108      	cbz	r0, 1a0025ae <i2cInit+0x6>
      return FALSE;
1a0025aa:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0025ac:	4770      	bx	lr
{
1a0025ae:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0025b0:	f7ff ffa2 	bl	1a0024f8 <i2cHardwareInit>
}
1a0025b4:	bd08      	pop	{r3, pc}

1a0025b6 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0025b6:	b108      	cbz	r0, 1a0025bc <i2cRead+0x6>
      return FALSE;
1a0025b8:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0025ba:	4770      	bx	lr
{
1a0025bc:	b510      	push	{r4, lr}
1a0025be:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a0025c0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0025c4:	9403      	str	r4, [sp, #12]
1a0025c6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0025ca:	9402      	str	r4, [sp, #8]
1a0025cc:	9c07      	ldr	r4, [sp, #28]
1a0025ce:	9401      	str	r4, [sp, #4]
1a0025d0:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0025d4:	9400      	str	r4, [sp, #0]
1a0025d6:	f7ff ffa7 	bl	1a002528 <i2cHardwareRead>
}
1a0025da:	b004      	add	sp, #16
1a0025dc:	bd10      	pop	{r4, pc}

1a0025de <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0025de:	b108      	cbz	r0, 1a0025e4 <i2cWrite+0x6>
      return FALSE;
1a0025e0:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0025e2:	4770      	bx	lr
{
1a0025e4:	b510      	push	{r4, lr}
1a0025e6:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a0025e8:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0025ec:	9400      	str	r4, [sp, #0]
1a0025ee:	f7ff ffbb 	bl	1a002568 <i2cHardwareWrite>
}
1a0025f2:	b002      	add	sp, #8
1a0025f4:	bd10      	pop	{r4, pc}
1a0025f6:	Address 0x000000001a0025f6 is out of bounds.


1a0025f8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0025f8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0025fa:	4d0b      	ldr	r5, [pc, #44]	; (1a002628 <gpioObtainPinInit+0x30>)
1a0025fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002600:	182c      	adds	r4, r5, r0
1a002602:	5628      	ldrsb	r0, [r5, r0]
1a002604:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002606:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00260a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00260c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002610:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002612:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002616:	9b02      	ldr	r3, [sp, #8]
1a002618:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00261a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00261e:	9b03      	ldr	r3, [sp, #12]
1a002620:	701a      	strb	r2, [r3, #0]
}
1a002622:	bc30      	pop	{r4, r5}
1a002624:	4770      	bx	lr
1a002626:	bf00      	nop
1a002628:	1a004ab8 	.word	0x1a004ab8

1a00262c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00262c:	f110 0f02 	cmn.w	r0, #2
1a002630:	f000 80c7 	beq.w	1a0027c2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002634:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002638:	f000 80c5 	beq.w	1a0027c6 <gpioInit+0x19a>
{
1a00263c:	b570      	push	{r4, r5, r6, lr}
1a00263e:	b084      	sub	sp, #16
1a002640:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002642:	2300      	movs	r3, #0
1a002644:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002648:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00264c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002650:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002654:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002658:	f10d 030b 	add.w	r3, sp, #11
1a00265c:	9301      	str	r3, [sp, #4]
1a00265e:	ab03      	add	r3, sp, #12
1a002660:	9300      	str	r3, [sp, #0]
1a002662:	f10d 030d 	add.w	r3, sp, #13
1a002666:	f10d 020e 	add.w	r2, sp, #14
1a00266a:	f10d 010f 	add.w	r1, sp, #15
1a00266e:	f7ff ffc3 	bl	1a0025f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002672:	2c05      	cmp	r4, #5
1a002674:	f200 80a9 	bhi.w	1a0027ca <gpioInit+0x19e>
1a002678:	e8df f004 	tbb	[pc, r4]
1a00267c:	45278109 	.word	0x45278109
1a002680:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002682:	4853      	ldr	r0, [pc, #332]	; (1a0027d0 <gpioInit+0x1a4>)
1a002684:	f7ff fc0f 	bl	1a001ea6 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002688:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00268a:	b004      	add	sp, #16
1a00268c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00268e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002692:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002696:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00269a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00269e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026a2:	494c      	ldr	r1, [pc, #304]	; (1a0027d4 <gpioInit+0x1a8>)
1a0026a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026b0:	2001      	movs	r0, #1
1a0026b2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0026b6:	4c46      	ldr	r4, [pc, #280]	; (1a0027d0 <gpioInit+0x1a4>)
1a0026b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026bc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0026c0:	ea22 0201 	bic.w	r2, r2, r1
1a0026c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0026c8:	e7df      	b.n	1a00268a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0026ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0026d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0026da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026de:	493d      	ldr	r1, [pc, #244]	; (1a0027d4 <gpioInit+0x1a8>)
1a0026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026ec:	2001      	movs	r0, #1
1a0026ee:	fa00 f102 	lsl.w	r1, r0, r2
1a0026f2:	4c37      	ldr	r4, [pc, #220]	; (1a0027d0 <gpioInit+0x1a4>)
1a0026f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0026fc:	ea22 0201 	bic.w	r2, r2, r1
1a002700:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002704:	e7c1      	b.n	1a00268a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002706:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00270a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00270e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002712:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002716:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00271a:	492e      	ldr	r1, [pc, #184]	; (1a0027d4 <gpioInit+0x1a8>)
1a00271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002720:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002724:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002728:	2001      	movs	r0, #1
1a00272a:	fa00 f102 	lsl.w	r1, r0, r2
1a00272e:	4c28      	ldr	r4, [pc, #160]	; (1a0027d0 <gpioInit+0x1a4>)
1a002730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002734:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002738:	ea22 0201 	bic.w	r2, r2, r1
1a00273c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002740:	e7a3      	b.n	1a00268a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002742:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002746:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00274a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00274e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002752:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002756:	491f      	ldr	r1, [pc, #124]	; (1a0027d4 <gpioInit+0x1a8>)
1a002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00275c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002760:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002764:	2001      	movs	r0, #1
1a002766:	fa00 f102 	lsl.w	r1, r0, r2
1a00276a:	4c19      	ldr	r4, [pc, #100]	; (1a0027d0 <gpioInit+0x1a4>)
1a00276c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002770:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002774:	ea22 0201 	bic.w	r2, r2, r1
1a002778:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00277c:	e785      	b.n	1a00268a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00277e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002782:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002786:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00278a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00278e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002792:	4910      	ldr	r1, [pc, #64]	; (1a0027d4 <gpioInit+0x1a8>)
1a002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002798:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00279c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0027a0:	2001      	movs	r0, #1
1a0027a2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0027a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0027d0 <gpioInit+0x1a4>)
1a0027a8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0027ac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0027b0:	4331      	orrs	r1, r6
1a0027b2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0027b6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0027b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0027bc:	2100      	movs	r1, #0
1a0027be:	5499      	strb	r1, [r3, r2]
1a0027c0:	e763      	b.n	1a00268a <gpioInit+0x5e>
	  return FALSE;
1a0027c2:	2000      	movs	r0, #0
1a0027c4:	4770      	bx	lr
	  return FALSE;
1a0027c6:	2000      	movs	r0, #0
}
1a0027c8:	4770      	bx	lr
      ret_val = 0;
1a0027ca:	2000      	movs	r0, #0
1a0027cc:	e75d      	b.n	1a00268a <gpioInit+0x5e>
1a0027ce:	bf00      	nop
1a0027d0:	400f4000 	.word	0x400f4000
1a0027d4:	40086000 	.word	0x40086000

1a0027d8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0027d8:	f110 0f02 	cmn.w	r0, #2
1a0027dc:	d02d      	beq.n	1a00283a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0027de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0027e2:	d02c      	beq.n	1a00283e <gpioWrite+0x66>
{
1a0027e4:	b510      	push	{r4, lr}
1a0027e6:	b084      	sub	sp, #16
1a0027e8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0027ea:	2300      	movs	r3, #0
1a0027ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0027f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0027f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0027f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0027fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002800:	f10d 030b 	add.w	r3, sp, #11
1a002804:	9301      	str	r3, [sp, #4]
1a002806:	ab03      	add	r3, sp, #12
1a002808:	9300      	str	r3, [sp, #0]
1a00280a:	f10d 030d 	add.w	r3, sp, #13
1a00280e:	f10d 020e 	add.w	r2, sp, #14
1a002812:	f10d 010f 	add.w	r1, sp, #15
1a002816:	f7ff feef 	bl	1a0025f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00281a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00281e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002822:	1c21      	adds	r1, r4, #0
1a002824:	bf18      	it	ne
1a002826:	2101      	movne	r1, #1
1a002828:	015b      	lsls	r3, r3, #5
1a00282a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00282e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002832:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002834:	2001      	movs	r0, #1
}
1a002836:	b004      	add	sp, #16
1a002838:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00283a:	2000      	movs	r0, #0
1a00283c:	4770      	bx	lr
	  return FALSE;
1a00283e:	2000      	movs	r0, #0
}
1a002840:	4770      	bx	lr

1a002842 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a002842:	f110 0f02 	cmn.w	r0, #2
1a002846:	d02c      	beq.n	1a0028a2 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a002848:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00284c:	d02b      	beq.n	1a0028a6 <gpioRead+0x64>
{
1a00284e:	b500      	push	{lr}
1a002850:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002852:	2300      	movs	r3, #0
1a002854:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002858:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00285c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002860:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002864:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002868:	f10d 030b 	add.w	r3, sp, #11
1a00286c:	9301      	str	r3, [sp, #4]
1a00286e:	ab03      	add	r3, sp, #12
1a002870:	9300      	str	r3, [sp, #0]
1a002872:	f10d 030d 	add.w	r3, sp, #13
1a002876:	f10d 020e 	add.w	r2, sp, #14
1a00287a:	f10d 010f 	add.w	r1, sp, #15
1a00287e:	f7ff febb 	bl	1a0025f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002882:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002886:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00288a:	015b      	lsls	r3, r3, #5
1a00288c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002890:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002894:	5c98      	ldrb	r0, [r3, r2]
1a002896:	3000      	adds	r0, #0
1a002898:	bf18      	it	ne
1a00289a:	2001      	movne	r0, #1

   return ret_val;
}
1a00289c:	b005      	add	sp, #20
1a00289e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0028a2:	2001      	movs	r0, #1
1a0028a4:	4770      	bx	lr
      return FALSE;
1a0028a6:	2000      	movs	r0, #0
}
1a0028a8:	4770      	bx	lr

1a0028aa <gpioToggle>:
{
1a0028aa:	b510      	push	{r4, lr}
1a0028ac:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0028ae:	f7ff ffc8 	bl	1a002842 <gpioRead>
1a0028b2:	fab0 f180 	clz	r1, r0
1a0028b6:	0949      	lsrs	r1, r1, #5
1a0028b8:	4620      	mov	r0, r4
1a0028ba:	f7ff ff8d 	bl	1a0027d8 <gpioWrite>
}
1a0028be:	bd10      	pop	{r4, pc}

1a0028c0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0028c0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0028c2:	4b04      	ldr	r3, [pc, #16]	; (1a0028d4 <USB0_IRQHandler+0x14>)
1a0028c4:	681b      	ldr	r3, [r3, #0]
1a0028c6:	681b      	ldr	r3, [r3, #0]
1a0028c8:	68db      	ldr	r3, [r3, #12]
1a0028ca:	4a03      	ldr	r2, [pc, #12]	; (1a0028d8 <USB0_IRQHandler+0x18>)
1a0028cc:	6810      	ldr	r0, [r2, #0]
1a0028ce:	4798      	blx	r3
}
1a0028d0:	bd08      	pop	{r3, pc}
1a0028d2:	bf00      	nop
1a0028d4:	100000ec 	.word	0x100000ec
1a0028d8:	100000dc 	.word	0x100000dc

1a0028dc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0028dc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0028de:	f7ff fa3f 	bl	1a001d60 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0028e2:	4b1a      	ldr	r3, [pc, #104]	; (1a00294c <boardInit+0x70>)
1a0028e4:	6818      	ldr	r0, [r3, #0]
1a0028e6:	f7ff fd27 	bl	1a002338 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0028ea:	2001      	movs	r0, #1
1a0028ec:	2100      	movs	r1, #0
1a0028ee:	f7ff fdaf 	bl	1a002450 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0028f2:	2105      	movs	r1, #5
1a0028f4:	2000      	movs	r0, #0
1a0028f6:	f7ff fe99 	bl	1a00262c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0028fa:	2100      	movs	r1, #0
1a0028fc:	2024      	movs	r0, #36	; 0x24
1a0028fe:	f7ff fe95 	bl	1a00262c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a002902:	2100      	movs	r1, #0
1a002904:	2025      	movs	r0, #37	; 0x25
1a002906:	f7ff fe91 	bl	1a00262c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00290a:	2100      	movs	r1, #0
1a00290c:	2026      	movs	r0, #38	; 0x26
1a00290e:	f7ff fe8d 	bl	1a00262c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a002912:	2100      	movs	r1, #0
1a002914:	2027      	movs	r0, #39	; 0x27
1a002916:	f7ff fe89 	bl	1a00262c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00291a:	2101      	movs	r1, #1
1a00291c:	2028      	movs	r0, #40	; 0x28
1a00291e:	f7ff fe85 	bl	1a00262c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a002922:	2101      	movs	r1, #1
1a002924:	2029      	movs	r0, #41	; 0x29
1a002926:	f7ff fe81 	bl	1a00262c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00292a:	2101      	movs	r1, #1
1a00292c:	202a      	movs	r0, #42	; 0x2a
1a00292e:	f7ff fe7d 	bl	1a00262c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a002932:	2101      	movs	r1, #1
1a002934:	202b      	movs	r0, #43	; 0x2b
1a002936:	f7ff fe79 	bl	1a00262c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00293a:	2101      	movs	r1, #1
1a00293c:	202c      	movs	r0, #44	; 0x2c
1a00293e:	f7ff fe75 	bl	1a00262c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a002942:	2101      	movs	r1, #1
1a002944:	202d      	movs	r0, #45	; 0x2d
1a002946:	f7ff fe71 	bl	1a00262c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00294a:	bd08      	pop	{r3, pc}
1a00294c:	100000e8 	.word	0x100000e8

1a002950 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a002950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002954:	4680      	mov	r8, r0
1a002956:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002958:	f7ff fd68 	bl	1a00242c <tickRead>
1a00295c:	4606      	mov	r6, r0
1a00295e:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a002960:	f7ff fd64 	bl	1a00242c <tickRead>
1a002964:	1b84      	subs	r4, r0, r6
1a002966:	eb61 0507 	sbc.w	r5, r1, r7
1a00296a:	4b06      	ldr	r3, [pc, #24]	; (1a002984 <delay+0x34>)
1a00296c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002970:	4640      	mov	r0, r8
1a002972:	4649      	mov	r1, r9
1a002974:	f000 fd92 	bl	1a00349c <__aeabi_uldivmod>
1a002978:	428d      	cmp	r5, r1
1a00297a:	bf08      	it	eq
1a00297c:	4284      	cmpeq	r4, r0
1a00297e:	d3ef      	bcc.n	1a002960 <delay+0x10>
}
1a002980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002984:	10000040 	.word	0x10000040

1a002988 <floatToString>:
};

// Ftoa implementation from:
// https://github.com/antongus/stm32tpl/blob/master/ftoa.c
char* floatToString( float value, char* result, int32_t precision )
{
1a002988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00298c:	b083      	sub	sp, #12
1a00298e:	4605      	mov	r5, r0
1a002990:	460e      	mov	r6, r1
   char * p1;
   char c;
   long intPart;

   // check precision bounds
   if (precision > MAX_PRECISION)
1a002992:	290a      	cmp	r1, #10
1a002994:	dd00      	ble.n	1a002998 <floatToString+0x10>
      precision = MAX_PRECISION;
1a002996:	260a      	movs	r6, #10

   // sign stuff
   if (value < 0) {
1a002998:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a00299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0029a0:	d440      	bmi.n	1a002a24 <floatToString+0x9c>
   char * ptr = result;
1a0029a2:	462c      	mov	r4, r5
      value = -value;
      *ptr++ = '-';
   }

   if (precision < 0) { // negative precision == automatic precision guess
1a0029a4:	2e00      	cmp	r6, #0
1a0029a6:	db44      	blt.n	1a002a32 <floatToString+0xaa>
      else if (value < 100000.0) precision = 1;
      else precision = 0;
   }

   // round value according the precision
   if (precision)
1a0029a8:	b186      	cbz	r6, 1a0029cc <floatToString+0x44>
      value += rounders[precision];
1a0029aa:	4b4f      	ldr	r3, [pc, #316]	; (1a002ae8 <floatToString+0x160>)
1a0029ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a0029b0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0029b4:	ee10 0a10 	vmov	r0, s0
1a0029b8:	f000 fa06 	bl	1a002dc8 <__aeabi_f2d>
1a0029bc:	4642      	mov	r2, r8
1a0029be:	464b      	mov	r3, r9
1a0029c0:	f000 f8a4 	bl	1a002b0c <__adddf3>
1a0029c4:	f000 fd1a 	bl	1a0033fc <__aeabi_d2f>
1a0029c8:	ee00 0a10 	vmov	s0, r0

   // integer part...
   intPart = value;
1a0029cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a0029d0:	ee17 1a90 	vmov	r1, s15
   value -= intPart;
1a0029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0029d8:	ee70 7a67 	vsub.f32	s15, s0, s15

   if (!intPart)
1a0029dc:	2900      	cmp	r1, #0
1a0029de:	d160      	bne.n	1a002aa2 <floatToString+0x11a>
      *ptr++ = '0';
1a0029e0:	4623      	mov	r3, r4
1a0029e2:	2230      	movs	r2, #48	; 0x30
1a0029e4:	f803 2b01 	strb.w	r2, [r3], #1
      // restore end pos
      ptr = p1;
   }

   // decimal part
   if (precision) {
1a0029e8:	2e00      	cmp	r6, #0
1a0029ea:	d076      	beq.n	1a002ada <floatToString+0x152>
      // place decimal point
      *ptr++ = '.';
1a0029ec:	222e      	movs	r2, #46	; 0x2e
1a0029ee:	f803 2b01 	strb.w	r2, [r3], #1

      // convert
      while (precision--) {
1a0029f2:	1e71      	subs	r1, r6, #1
1a0029f4:	2e00      	cmp	r6, #0
1a0029f6:	d070      	beq.n	1a002ada <floatToString+0x152>
         value *= 10.0;
1a0029f8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
1a0029fc:	ee67 7a80 	vmul.f32	s15, s15, s0
         c = value;
1a002a00:	eebc 7ae7 	vcvt.u32.f32	s14, s15
1a002a04:	ed8d 7a01 	vstr	s14, [sp, #4]
1a002a08:	f89d 2004 	ldrb.w	r2, [sp, #4]
         *ptr++ = '0' + c;
1a002a0c:	f102 0030 	add.w	r0, r2, #48	; 0x30
1a002a10:	f803 0b01 	strb.w	r0, [r3], #1
         value -= c;
1a002a14:	ee07 2a10 	vmov	s14, r2
1a002a18:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
1a002a1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
      while (precision--) {
1a002a20:	460e      	mov	r6, r1
1a002a22:	e7e6      	b.n	1a0029f2 <floatToString+0x6a>
      value = -value;
1a002a24:	eeb1 0a40 	vneg.f32	s0, s0
      *ptr++ = '-';
1a002a28:	462c      	mov	r4, r5
1a002a2a:	232d      	movs	r3, #45	; 0x2d
1a002a2c:	f804 3b01 	strb.w	r3, [r4], #1
1a002a30:	e7b8      	b.n	1a0029a4 <floatToString+0x1c>
      if (value < 1.0) precision = 6;
1a002a32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a002a36:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a3e:	d424      	bmi.n	1a002a8a <floatToString+0x102>
      else if (value < 10.0) precision = 5;
1a002a40:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a002a44:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a4c:	d41f      	bmi.n	1a002a8e <floatToString+0x106>
      else if (value < 100.0) precision = 4;
1a002a4e:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a002aec <floatToString+0x164>
1a002a52:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a5a:	d41a      	bmi.n	1a002a92 <floatToString+0x10a>
      else if (value < 1000.0) precision = 3;
1a002a5c:	eddf 7a24 	vldr	s15, [pc, #144]	; 1a002af0 <floatToString+0x168>
1a002a60:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a68:	d415      	bmi.n	1a002a96 <floatToString+0x10e>
      else if (value < 10000.0) precision = 2;
1a002a6a:	eddf 7a22 	vldr	s15, [pc, #136]	; 1a002af4 <floatToString+0x16c>
1a002a6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a76:	d410      	bmi.n	1a002a9a <floatToString+0x112>
      else if (value < 100000.0) precision = 1;
1a002a78:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a002af8 <floatToString+0x170>
1a002a7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a002a84:	d40b      	bmi.n	1a002a9e <floatToString+0x116>
      else precision = 0;
1a002a86:	2600      	movs	r6, #0
1a002a88:	e7a0      	b.n	1a0029cc <floatToString+0x44>
      if (value < 1.0) precision = 6;
1a002a8a:	2606      	movs	r6, #6
1a002a8c:	e78d      	b.n	1a0029aa <floatToString+0x22>
      else if (value < 10.0) precision = 5;
1a002a8e:	2605      	movs	r6, #5
1a002a90:	e78b      	b.n	1a0029aa <floatToString+0x22>
      else if (value < 100.0) precision = 4;
1a002a92:	2604      	movs	r6, #4
1a002a94:	e789      	b.n	1a0029aa <floatToString+0x22>
      else if (value < 1000.0) precision = 3;
1a002a96:	2603      	movs	r6, #3
1a002a98:	e787      	b.n	1a0029aa <floatToString+0x22>
      else if (value < 10000.0) precision = 2;
1a002a9a:	2602      	movs	r6, #2
1a002a9c:	e785      	b.n	1a0029aa <floatToString+0x22>
      else if (value < 100000.0) precision = 1;
1a002a9e:	2601      	movs	r6, #1
1a002aa0:	e783      	b.n	1a0029aa <floatToString+0x22>
      p = ptr;
1a002aa2:	4623      	mov	r3, r4
      while (intPart) {
1a002aa4:	b179      	cbz	r1, 1a002ac6 <floatToString+0x13e>
         *p++ = '0' + intPart % 10;
1a002aa6:	4815      	ldr	r0, [pc, #84]	; (1a002afc <floatToString+0x174>)
1a002aa8:	fb80 2001 	smull	r2, r0, r0, r1
1a002aac:	17ca      	asrs	r2, r1, #31
1a002aae:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
1a002ab2:	4617      	mov	r7, r2
1a002ab4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002ab8:	0050      	lsls	r0, r2, #1
1a002aba:	1a0a      	subs	r2, r1, r0
1a002abc:	3230      	adds	r2, #48	; 0x30
1a002abe:	f803 2b01 	strb.w	r2, [r3], #1
         intPart /= 10;
1a002ac2:	4639      	mov	r1, r7
1a002ac4:	e7ee      	b.n	1a002aa4 <floatToString+0x11c>
1a002ac6:	461a      	mov	r2, r3
      while (p > ptr) {
1a002ac8:	4294      	cmp	r4, r2
1a002aca:	d28d      	bcs.n	1a0029e8 <floatToString+0x60>
         c = *--p;
1a002acc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
         *p = *ptr;
1a002ad0:	7820      	ldrb	r0, [r4, #0]
1a002ad2:	7010      	strb	r0, [r2, #0]
         *ptr++ = c;
1a002ad4:	f804 1b01 	strb.w	r1, [r4], #1
1a002ad8:	e7f6      	b.n	1a002ac8 <floatToString+0x140>
      }
   }

   // terminating zero
   *ptr = 0;
1a002ada:	2200      	movs	r2, #0
1a002adc:	701a      	strb	r2, [r3, #0]

   return result;
}
1a002ade:	4628      	mov	r0, r5
1a002ae0:	b003      	add	sp, #12
1a002ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002ae6:	bf00      	nop
1a002ae8:	1a004ba0 	.word	0x1a004ba0
1a002aec:	42c80000 	.word	0x42c80000
1a002af0:	447a0000 	.word	0x447a0000
1a002af4:	461c4000 	.word	0x461c4000
1a002af8:	47c35000 	.word	0x47c35000
1a002afc:	66666667 	.word	0x66666667

1a002b00 <__aeabi_drsub>:
1a002b00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002b04:	e002      	b.n	1a002b0c <__adddf3>
1a002b06:	bf00      	nop

1a002b08 <__aeabi_dsub>:
1a002b08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002b0c <__adddf3>:
1a002b0c:	b530      	push	{r4, r5, lr}
1a002b0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002b12:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002b16:	ea94 0f05 	teq	r4, r5
1a002b1a:	bf08      	it	eq
1a002b1c:	ea90 0f02 	teqeq	r0, r2
1a002b20:	bf1f      	itttt	ne
1a002b22:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002b26:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002b2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002b2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002b32:	f000 80e2 	beq.w	1a002cfa <__adddf3+0x1ee>
1a002b36:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002b3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002b3e:	bfb8      	it	lt
1a002b40:	426d      	neglt	r5, r5
1a002b42:	dd0c      	ble.n	1a002b5e <__adddf3+0x52>
1a002b44:	442c      	add	r4, r5
1a002b46:	ea80 0202 	eor.w	r2, r0, r2
1a002b4a:	ea81 0303 	eor.w	r3, r1, r3
1a002b4e:	ea82 0000 	eor.w	r0, r2, r0
1a002b52:	ea83 0101 	eor.w	r1, r3, r1
1a002b56:	ea80 0202 	eor.w	r2, r0, r2
1a002b5a:	ea81 0303 	eor.w	r3, r1, r3
1a002b5e:	2d36      	cmp	r5, #54	; 0x36
1a002b60:	bf88      	it	hi
1a002b62:	bd30      	pophi	{r4, r5, pc}
1a002b64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002b68:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002b6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002b70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002b74:	d002      	beq.n	1a002b7c <__adddf3+0x70>
1a002b76:	4240      	negs	r0, r0
1a002b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002b7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002b80:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002b84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002b88:	d002      	beq.n	1a002b90 <__adddf3+0x84>
1a002b8a:	4252      	negs	r2, r2
1a002b8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002b90:	ea94 0f05 	teq	r4, r5
1a002b94:	f000 80a7 	beq.w	1a002ce6 <__adddf3+0x1da>
1a002b98:	f1a4 0401 	sub.w	r4, r4, #1
1a002b9c:	f1d5 0e20 	rsbs	lr, r5, #32
1a002ba0:	db0d      	blt.n	1a002bbe <__adddf3+0xb2>
1a002ba2:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002ba6:	fa22 f205 	lsr.w	r2, r2, r5
1a002baa:	1880      	adds	r0, r0, r2
1a002bac:	f141 0100 	adc.w	r1, r1, #0
1a002bb0:	fa03 f20e 	lsl.w	r2, r3, lr
1a002bb4:	1880      	adds	r0, r0, r2
1a002bb6:	fa43 f305 	asr.w	r3, r3, r5
1a002bba:	4159      	adcs	r1, r3
1a002bbc:	e00e      	b.n	1a002bdc <__adddf3+0xd0>
1a002bbe:	f1a5 0520 	sub.w	r5, r5, #32
1a002bc2:	f10e 0e20 	add.w	lr, lr, #32
1a002bc6:	2a01      	cmp	r2, #1
1a002bc8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002bcc:	bf28      	it	cs
1a002bce:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002bd2:	fa43 f305 	asr.w	r3, r3, r5
1a002bd6:	18c0      	adds	r0, r0, r3
1a002bd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002bdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002be0:	d507      	bpl.n	1a002bf2 <__adddf3+0xe6>
1a002be2:	f04f 0e00 	mov.w	lr, #0
1a002be6:	f1dc 0c00 	rsbs	ip, ip, #0
1a002bea:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002bee:	eb6e 0101 	sbc.w	r1, lr, r1
1a002bf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002bf6:	d31b      	bcc.n	1a002c30 <__adddf3+0x124>
1a002bf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002bfc:	d30c      	bcc.n	1a002c18 <__adddf3+0x10c>
1a002bfe:	0849      	lsrs	r1, r1, #1
1a002c00:	ea5f 0030 	movs.w	r0, r0, rrx
1a002c04:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002c08:	f104 0401 	add.w	r4, r4, #1
1a002c0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002c10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002c14:	f080 809a 	bcs.w	1a002d4c <__adddf3+0x240>
1a002c18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002c1c:	bf08      	it	eq
1a002c1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002c22:	f150 0000 	adcs.w	r0, r0, #0
1a002c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002c2a:	ea41 0105 	orr.w	r1, r1, r5
1a002c2e:	bd30      	pop	{r4, r5, pc}
1a002c30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002c34:	4140      	adcs	r0, r0
1a002c36:	eb41 0101 	adc.w	r1, r1, r1
1a002c3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002c3e:	f1a4 0401 	sub.w	r4, r4, #1
1a002c42:	d1e9      	bne.n	1a002c18 <__adddf3+0x10c>
1a002c44:	f091 0f00 	teq	r1, #0
1a002c48:	bf04      	itt	eq
1a002c4a:	4601      	moveq	r1, r0
1a002c4c:	2000      	moveq	r0, #0
1a002c4e:	fab1 f381 	clz	r3, r1
1a002c52:	bf08      	it	eq
1a002c54:	3320      	addeq	r3, #32
1a002c56:	f1a3 030b 	sub.w	r3, r3, #11
1a002c5a:	f1b3 0220 	subs.w	r2, r3, #32
1a002c5e:	da0c      	bge.n	1a002c7a <__adddf3+0x16e>
1a002c60:	320c      	adds	r2, #12
1a002c62:	dd08      	ble.n	1a002c76 <__adddf3+0x16a>
1a002c64:	f102 0c14 	add.w	ip, r2, #20
1a002c68:	f1c2 020c 	rsb	r2, r2, #12
1a002c6c:	fa01 f00c 	lsl.w	r0, r1, ip
1a002c70:	fa21 f102 	lsr.w	r1, r1, r2
1a002c74:	e00c      	b.n	1a002c90 <__adddf3+0x184>
1a002c76:	f102 0214 	add.w	r2, r2, #20
1a002c7a:	bfd8      	it	le
1a002c7c:	f1c2 0c20 	rsble	ip, r2, #32
1a002c80:	fa01 f102 	lsl.w	r1, r1, r2
1a002c84:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002c88:	bfdc      	itt	le
1a002c8a:	ea41 010c 	orrle.w	r1, r1, ip
1a002c8e:	4090      	lslle	r0, r2
1a002c90:	1ae4      	subs	r4, r4, r3
1a002c92:	bfa2      	ittt	ge
1a002c94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002c98:	4329      	orrge	r1, r5
1a002c9a:	bd30      	popge	{r4, r5, pc}
1a002c9c:	ea6f 0404 	mvn.w	r4, r4
1a002ca0:	3c1f      	subs	r4, #31
1a002ca2:	da1c      	bge.n	1a002cde <__adddf3+0x1d2>
1a002ca4:	340c      	adds	r4, #12
1a002ca6:	dc0e      	bgt.n	1a002cc6 <__adddf3+0x1ba>
1a002ca8:	f104 0414 	add.w	r4, r4, #20
1a002cac:	f1c4 0220 	rsb	r2, r4, #32
1a002cb0:	fa20 f004 	lsr.w	r0, r0, r4
1a002cb4:	fa01 f302 	lsl.w	r3, r1, r2
1a002cb8:	ea40 0003 	orr.w	r0, r0, r3
1a002cbc:	fa21 f304 	lsr.w	r3, r1, r4
1a002cc0:	ea45 0103 	orr.w	r1, r5, r3
1a002cc4:	bd30      	pop	{r4, r5, pc}
1a002cc6:	f1c4 040c 	rsb	r4, r4, #12
1a002cca:	f1c4 0220 	rsb	r2, r4, #32
1a002cce:	fa20 f002 	lsr.w	r0, r0, r2
1a002cd2:	fa01 f304 	lsl.w	r3, r1, r4
1a002cd6:	ea40 0003 	orr.w	r0, r0, r3
1a002cda:	4629      	mov	r1, r5
1a002cdc:	bd30      	pop	{r4, r5, pc}
1a002cde:	fa21 f004 	lsr.w	r0, r1, r4
1a002ce2:	4629      	mov	r1, r5
1a002ce4:	bd30      	pop	{r4, r5, pc}
1a002ce6:	f094 0f00 	teq	r4, #0
1a002cea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002cee:	bf06      	itte	eq
1a002cf0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002cf4:	3401      	addeq	r4, #1
1a002cf6:	3d01      	subne	r5, #1
1a002cf8:	e74e      	b.n	1a002b98 <__adddf3+0x8c>
1a002cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002cfe:	bf18      	it	ne
1a002d00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002d04:	d029      	beq.n	1a002d5a <__adddf3+0x24e>
1a002d06:	ea94 0f05 	teq	r4, r5
1a002d0a:	bf08      	it	eq
1a002d0c:	ea90 0f02 	teqeq	r0, r2
1a002d10:	d005      	beq.n	1a002d1e <__adddf3+0x212>
1a002d12:	ea54 0c00 	orrs.w	ip, r4, r0
1a002d16:	bf04      	itt	eq
1a002d18:	4619      	moveq	r1, r3
1a002d1a:	4610      	moveq	r0, r2
1a002d1c:	bd30      	pop	{r4, r5, pc}
1a002d1e:	ea91 0f03 	teq	r1, r3
1a002d22:	bf1e      	ittt	ne
1a002d24:	2100      	movne	r1, #0
1a002d26:	2000      	movne	r0, #0
1a002d28:	bd30      	popne	{r4, r5, pc}
1a002d2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002d2e:	d105      	bne.n	1a002d3c <__adddf3+0x230>
1a002d30:	0040      	lsls	r0, r0, #1
1a002d32:	4149      	adcs	r1, r1
1a002d34:	bf28      	it	cs
1a002d36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002d3a:	bd30      	pop	{r4, r5, pc}
1a002d3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002d40:	bf3c      	itt	cc
1a002d42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002d46:	bd30      	popcc	{r4, r5, pc}
1a002d48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002d4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002d50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002d54:	f04f 0000 	mov.w	r0, #0
1a002d58:	bd30      	pop	{r4, r5, pc}
1a002d5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002d5e:	bf1a      	itte	ne
1a002d60:	4619      	movne	r1, r3
1a002d62:	4610      	movne	r0, r2
1a002d64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002d68:	bf1c      	itt	ne
1a002d6a:	460b      	movne	r3, r1
1a002d6c:	4602      	movne	r2, r0
1a002d6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002d72:	bf06      	itte	eq
1a002d74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002d78:	ea91 0f03 	teqeq	r1, r3
1a002d7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002d80:	bd30      	pop	{r4, r5, pc}
1a002d82:	bf00      	nop

1a002d84 <__aeabi_ui2d>:
1a002d84:	f090 0f00 	teq	r0, #0
1a002d88:	bf04      	itt	eq
1a002d8a:	2100      	moveq	r1, #0
1a002d8c:	4770      	bxeq	lr
1a002d8e:	b530      	push	{r4, r5, lr}
1a002d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002d98:	f04f 0500 	mov.w	r5, #0
1a002d9c:	f04f 0100 	mov.w	r1, #0
1a002da0:	e750      	b.n	1a002c44 <__adddf3+0x138>
1a002da2:	bf00      	nop

1a002da4 <__aeabi_i2d>:
1a002da4:	f090 0f00 	teq	r0, #0
1a002da8:	bf04      	itt	eq
1a002daa:	2100      	moveq	r1, #0
1a002dac:	4770      	bxeq	lr
1a002dae:	b530      	push	{r4, r5, lr}
1a002db0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002db4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002db8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002dbc:	bf48      	it	mi
1a002dbe:	4240      	negmi	r0, r0
1a002dc0:	f04f 0100 	mov.w	r1, #0
1a002dc4:	e73e      	b.n	1a002c44 <__adddf3+0x138>
1a002dc6:	bf00      	nop

1a002dc8 <__aeabi_f2d>:
1a002dc8:	0042      	lsls	r2, r0, #1
1a002dca:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002dce:	ea4f 0131 	mov.w	r1, r1, rrx
1a002dd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002dd6:	bf1f      	itttt	ne
1a002dd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002ddc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002de0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002de4:	4770      	bxne	lr
1a002de6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002dea:	bf08      	it	eq
1a002dec:	4770      	bxeq	lr
1a002dee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a002df2:	bf04      	itt	eq
1a002df4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002df8:	4770      	bxeq	lr
1a002dfa:	b530      	push	{r4, r5, lr}
1a002dfc:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002e00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002e04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002e08:	e71c      	b.n	1a002c44 <__adddf3+0x138>
1a002e0a:	bf00      	nop

1a002e0c <__aeabi_ul2d>:
1a002e0c:	ea50 0201 	orrs.w	r2, r0, r1
1a002e10:	bf08      	it	eq
1a002e12:	4770      	bxeq	lr
1a002e14:	b530      	push	{r4, r5, lr}
1a002e16:	f04f 0500 	mov.w	r5, #0
1a002e1a:	e00a      	b.n	1a002e32 <__aeabi_l2d+0x16>

1a002e1c <__aeabi_l2d>:
1a002e1c:	ea50 0201 	orrs.w	r2, r0, r1
1a002e20:	bf08      	it	eq
1a002e22:	4770      	bxeq	lr
1a002e24:	b530      	push	{r4, r5, lr}
1a002e26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002e2a:	d502      	bpl.n	1a002e32 <__aeabi_l2d+0x16>
1a002e2c:	4240      	negs	r0, r0
1a002e2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002e32:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002e36:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002e3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002e3e:	f43f aed8 	beq.w	1a002bf2 <__adddf3+0xe6>
1a002e42:	f04f 0203 	mov.w	r2, #3
1a002e46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002e4a:	bf18      	it	ne
1a002e4c:	3203      	addne	r2, #3
1a002e4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002e52:	bf18      	it	ne
1a002e54:	3203      	addne	r2, #3
1a002e56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002e5a:	f1c2 0320 	rsb	r3, r2, #32
1a002e5e:	fa00 fc03 	lsl.w	ip, r0, r3
1a002e62:	fa20 f002 	lsr.w	r0, r0, r2
1a002e66:	fa01 fe03 	lsl.w	lr, r1, r3
1a002e6a:	ea40 000e 	orr.w	r0, r0, lr
1a002e6e:	fa21 f102 	lsr.w	r1, r1, r2
1a002e72:	4414      	add	r4, r2
1a002e74:	e6bd      	b.n	1a002bf2 <__adddf3+0xe6>
1a002e76:	bf00      	nop

1a002e78 <__aeabi_dmul>:
1a002e78:	b570      	push	{r4, r5, r6, lr}
1a002e7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002e7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002e82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002e86:	bf1d      	ittte	ne
1a002e88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002e8c:	ea94 0f0c 	teqne	r4, ip
1a002e90:	ea95 0f0c 	teqne	r5, ip
1a002e94:	f000 f8de 	bleq	1a003054 <__aeabi_dmul+0x1dc>
1a002e98:	442c      	add	r4, r5
1a002e9a:	ea81 0603 	eor.w	r6, r1, r3
1a002e9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002ea2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002ea6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002eaa:	bf18      	it	ne
1a002eac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002eb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002eb8:	d038      	beq.n	1a002f2c <__aeabi_dmul+0xb4>
1a002eba:	fba0 ce02 	umull	ip, lr, r0, r2
1a002ebe:	f04f 0500 	mov.w	r5, #0
1a002ec2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002ec6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002eca:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002ece:	f04f 0600 	mov.w	r6, #0
1a002ed2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002ed6:	f09c 0f00 	teq	ip, #0
1a002eda:	bf18      	it	ne
1a002edc:	f04e 0e01 	orrne.w	lr, lr, #1
1a002ee0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002ee4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002ee8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002eec:	d204      	bcs.n	1a002ef8 <__aeabi_dmul+0x80>
1a002eee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002ef2:	416d      	adcs	r5, r5
1a002ef4:	eb46 0606 	adc.w	r6, r6, r6
1a002ef8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002efc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002f00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002f04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002f08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002f0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002f10:	bf88      	it	hi
1a002f12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002f16:	d81e      	bhi.n	1a002f56 <__aeabi_dmul+0xde>
1a002f18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002f1c:	bf08      	it	eq
1a002f1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002f22:	f150 0000 	adcs.w	r0, r0, #0
1a002f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002f2a:	bd70      	pop	{r4, r5, r6, pc}
1a002f2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002f30:	ea46 0101 	orr.w	r1, r6, r1
1a002f34:	ea40 0002 	orr.w	r0, r0, r2
1a002f38:	ea81 0103 	eor.w	r1, r1, r3
1a002f3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002f40:	bfc2      	ittt	gt
1a002f42:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002f46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002f4a:	bd70      	popgt	{r4, r5, r6, pc}
1a002f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002f50:	f04f 0e00 	mov.w	lr, #0
1a002f54:	3c01      	subs	r4, #1
1a002f56:	f300 80ab 	bgt.w	1a0030b0 <__aeabi_dmul+0x238>
1a002f5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002f5e:	bfde      	ittt	le
1a002f60:	2000      	movle	r0, #0
1a002f62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002f66:	bd70      	pople	{r4, r5, r6, pc}
1a002f68:	f1c4 0400 	rsb	r4, r4, #0
1a002f6c:	3c20      	subs	r4, #32
1a002f6e:	da35      	bge.n	1a002fdc <__aeabi_dmul+0x164>
1a002f70:	340c      	adds	r4, #12
1a002f72:	dc1b      	bgt.n	1a002fac <__aeabi_dmul+0x134>
1a002f74:	f104 0414 	add.w	r4, r4, #20
1a002f78:	f1c4 0520 	rsb	r5, r4, #32
1a002f7c:	fa00 f305 	lsl.w	r3, r0, r5
1a002f80:	fa20 f004 	lsr.w	r0, r0, r4
1a002f84:	fa01 f205 	lsl.w	r2, r1, r5
1a002f88:	ea40 0002 	orr.w	r0, r0, r2
1a002f8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002f90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002f94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002f98:	fa21 f604 	lsr.w	r6, r1, r4
1a002f9c:	eb42 0106 	adc.w	r1, r2, r6
1a002fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002fa4:	bf08      	it	eq
1a002fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002faa:	bd70      	pop	{r4, r5, r6, pc}
1a002fac:	f1c4 040c 	rsb	r4, r4, #12
1a002fb0:	f1c4 0520 	rsb	r5, r4, #32
1a002fb4:	fa00 f304 	lsl.w	r3, r0, r4
1a002fb8:	fa20 f005 	lsr.w	r0, r0, r5
1a002fbc:	fa01 f204 	lsl.w	r2, r1, r4
1a002fc0:	ea40 0002 	orr.w	r0, r0, r2
1a002fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002fc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002fcc:	f141 0100 	adc.w	r1, r1, #0
1a002fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002fd4:	bf08      	it	eq
1a002fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002fda:	bd70      	pop	{r4, r5, r6, pc}
1a002fdc:	f1c4 0520 	rsb	r5, r4, #32
1a002fe0:	fa00 f205 	lsl.w	r2, r0, r5
1a002fe4:	ea4e 0e02 	orr.w	lr, lr, r2
1a002fe8:	fa20 f304 	lsr.w	r3, r0, r4
1a002fec:	fa01 f205 	lsl.w	r2, r1, r5
1a002ff0:	ea43 0302 	orr.w	r3, r3, r2
1a002ff4:	fa21 f004 	lsr.w	r0, r1, r4
1a002ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ffc:	fa21 f204 	lsr.w	r2, r1, r4
1a003000:	ea20 0002 	bic.w	r0, r0, r2
1a003004:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00300c:	bf08      	it	eq
1a00300e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003012:	bd70      	pop	{r4, r5, r6, pc}
1a003014:	f094 0f00 	teq	r4, #0
1a003018:	d10f      	bne.n	1a00303a <__aeabi_dmul+0x1c2>
1a00301a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00301e:	0040      	lsls	r0, r0, #1
1a003020:	eb41 0101 	adc.w	r1, r1, r1
1a003024:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003028:	bf08      	it	eq
1a00302a:	3c01      	subeq	r4, #1
1a00302c:	d0f7      	beq.n	1a00301e <__aeabi_dmul+0x1a6>
1a00302e:	ea41 0106 	orr.w	r1, r1, r6
1a003032:	f095 0f00 	teq	r5, #0
1a003036:	bf18      	it	ne
1a003038:	4770      	bxne	lr
1a00303a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00303e:	0052      	lsls	r2, r2, #1
1a003040:	eb43 0303 	adc.w	r3, r3, r3
1a003044:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003048:	bf08      	it	eq
1a00304a:	3d01      	subeq	r5, #1
1a00304c:	d0f7      	beq.n	1a00303e <__aeabi_dmul+0x1c6>
1a00304e:	ea43 0306 	orr.w	r3, r3, r6
1a003052:	4770      	bx	lr
1a003054:	ea94 0f0c 	teq	r4, ip
1a003058:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00305c:	bf18      	it	ne
1a00305e:	ea95 0f0c 	teqne	r5, ip
1a003062:	d00c      	beq.n	1a00307e <__aeabi_dmul+0x206>
1a003064:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003068:	bf18      	it	ne
1a00306a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00306e:	d1d1      	bne.n	1a003014 <__aeabi_dmul+0x19c>
1a003070:	ea81 0103 	eor.w	r1, r1, r3
1a003074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003078:	f04f 0000 	mov.w	r0, #0
1a00307c:	bd70      	pop	{r4, r5, r6, pc}
1a00307e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003082:	bf06      	itte	eq
1a003084:	4610      	moveq	r0, r2
1a003086:	4619      	moveq	r1, r3
1a003088:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00308c:	d019      	beq.n	1a0030c2 <__aeabi_dmul+0x24a>
1a00308e:	ea94 0f0c 	teq	r4, ip
1a003092:	d102      	bne.n	1a00309a <__aeabi_dmul+0x222>
1a003094:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003098:	d113      	bne.n	1a0030c2 <__aeabi_dmul+0x24a>
1a00309a:	ea95 0f0c 	teq	r5, ip
1a00309e:	d105      	bne.n	1a0030ac <__aeabi_dmul+0x234>
1a0030a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0030a4:	bf1c      	itt	ne
1a0030a6:	4610      	movne	r0, r2
1a0030a8:	4619      	movne	r1, r3
1a0030aa:	d10a      	bne.n	1a0030c2 <__aeabi_dmul+0x24a>
1a0030ac:	ea81 0103 	eor.w	r1, r1, r3
1a0030b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0030b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0030b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0030bc:	f04f 0000 	mov.w	r0, #0
1a0030c0:	bd70      	pop	{r4, r5, r6, pc}
1a0030c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0030c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0030ca:	bd70      	pop	{r4, r5, r6, pc}

1a0030cc <__aeabi_ddiv>:
1a0030cc:	b570      	push	{r4, r5, r6, lr}
1a0030ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0030d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0030d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0030da:	bf1d      	ittte	ne
1a0030dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0030e0:	ea94 0f0c 	teqne	r4, ip
1a0030e4:	ea95 0f0c 	teqne	r5, ip
1a0030e8:	f000 f8a7 	bleq	1a00323a <__aeabi_ddiv+0x16e>
1a0030ec:	eba4 0405 	sub.w	r4, r4, r5
1a0030f0:	ea81 0e03 	eor.w	lr, r1, r3
1a0030f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0030f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0030fc:	f000 8088 	beq.w	1a003210 <__aeabi_ddiv+0x144>
1a003100:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003104:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003108:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a00310c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a003110:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003114:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003118:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a00311c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003120:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003124:	429d      	cmp	r5, r3
1a003126:	bf08      	it	eq
1a003128:	4296      	cmpeq	r6, r2
1a00312a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00312e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003132:	d202      	bcs.n	1a00313a <__aeabi_ddiv+0x6e>
1a003134:	085b      	lsrs	r3, r3, #1
1a003136:	ea4f 0232 	mov.w	r2, r2, rrx
1a00313a:	1ab6      	subs	r6, r6, r2
1a00313c:	eb65 0503 	sbc.w	r5, r5, r3
1a003140:	085b      	lsrs	r3, r3, #1
1a003142:	ea4f 0232 	mov.w	r2, r2, rrx
1a003146:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00314a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00314e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003152:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003156:	bf22      	ittt	cs
1a003158:	1ab6      	subcs	r6, r6, r2
1a00315a:	4675      	movcs	r5, lr
1a00315c:	ea40 000c 	orrcs.w	r0, r0, ip
1a003160:	085b      	lsrs	r3, r3, #1
1a003162:	ea4f 0232 	mov.w	r2, r2, rrx
1a003166:	ebb6 0e02 	subs.w	lr, r6, r2
1a00316a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00316e:	bf22      	ittt	cs
1a003170:	1ab6      	subcs	r6, r6, r2
1a003172:	4675      	movcs	r5, lr
1a003174:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003178:	085b      	lsrs	r3, r3, #1
1a00317a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00317e:	ebb6 0e02 	subs.w	lr, r6, r2
1a003182:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003186:	bf22      	ittt	cs
1a003188:	1ab6      	subcs	r6, r6, r2
1a00318a:	4675      	movcs	r5, lr
1a00318c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003190:	085b      	lsrs	r3, r3, #1
1a003192:	ea4f 0232 	mov.w	r2, r2, rrx
1a003196:	ebb6 0e02 	subs.w	lr, r6, r2
1a00319a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00319e:	bf22      	ittt	cs
1a0031a0:	1ab6      	subcs	r6, r6, r2
1a0031a2:	4675      	movcs	r5, lr
1a0031a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0031a8:	ea55 0e06 	orrs.w	lr, r5, r6
1a0031ac:	d018      	beq.n	1a0031e0 <__aeabi_ddiv+0x114>
1a0031ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0031b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0031b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0031ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0031be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0031c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0031c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0031ca:	d1c0      	bne.n	1a00314e <__aeabi_ddiv+0x82>
1a0031cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0031d0:	d10b      	bne.n	1a0031ea <__aeabi_ddiv+0x11e>
1a0031d2:	ea41 0100 	orr.w	r1, r1, r0
1a0031d6:	f04f 0000 	mov.w	r0, #0
1a0031da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0031de:	e7b6      	b.n	1a00314e <__aeabi_ddiv+0x82>
1a0031e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0031e4:	bf04      	itt	eq
1a0031e6:	4301      	orreq	r1, r0
1a0031e8:	2000      	moveq	r0, #0
1a0031ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0031ee:	bf88      	it	hi
1a0031f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0031f4:	f63f aeaf 	bhi.w	1a002f56 <__aeabi_dmul+0xde>
1a0031f8:	ebb5 0c03 	subs.w	ip, r5, r3
1a0031fc:	bf04      	itt	eq
1a0031fe:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003202:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003206:	f150 0000 	adcs.w	r0, r0, #0
1a00320a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00320e:	bd70      	pop	{r4, r5, r6, pc}
1a003210:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003214:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003218:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a00321c:	bfc2      	ittt	gt
1a00321e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003222:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003226:	bd70      	popgt	{r4, r5, r6, pc}
1a003228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00322c:	f04f 0e00 	mov.w	lr, #0
1a003230:	3c01      	subs	r4, #1
1a003232:	e690      	b.n	1a002f56 <__aeabi_dmul+0xde>
1a003234:	ea45 0e06 	orr.w	lr, r5, r6
1a003238:	e68d      	b.n	1a002f56 <__aeabi_dmul+0xde>
1a00323a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00323e:	ea94 0f0c 	teq	r4, ip
1a003242:	bf08      	it	eq
1a003244:	ea95 0f0c 	teqeq	r5, ip
1a003248:	f43f af3b 	beq.w	1a0030c2 <__aeabi_dmul+0x24a>
1a00324c:	ea94 0f0c 	teq	r4, ip
1a003250:	d10a      	bne.n	1a003268 <__aeabi_ddiv+0x19c>
1a003252:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003256:	f47f af34 	bne.w	1a0030c2 <__aeabi_dmul+0x24a>
1a00325a:	ea95 0f0c 	teq	r5, ip
1a00325e:	f47f af25 	bne.w	1a0030ac <__aeabi_dmul+0x234>
1a003262:	4610      	mov	r0, r2
1a003264:	4619      	mov	r1, r3
1a003266:	e72c      	b.n	1a0030c2 <__aeabi_dmul+0x24a>
1a003268:	ea95 0f0c 	teq	r5, ip
1a00326c:	d106      	bne.n	1a00327c <__aeabi_ddiv+0x1b0>
1a00326e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003272:	f43f aefd 	beq.w	1a003070 <__aeabi_dmul+0x1f8>
1a003276:	4610      	mov	r0, r2
1a003278:	4619      	mov	r1, r3
1a00327a:	e722      	b.n	1a0030c2 <__aeabi_dmul+0x24a>
1a00327c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003280:	bf18      	it	ne
1a003282:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003286:	f47f aec5 	bne.w	1a003014 <__aeabi_dmul+0x19c>
1a00328a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00328e:	f47f af0d 	bne.w	1a0030ac <__aeabi_dmul+0x234>
1a003292:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003296:	f47f aeeb 	bne.w	1a003070 <__aeabi_dmul+0x1f8>
1a00329a:	e712      	b.n	1a0030c2 <__aeabi_dmul+0x24a>

1a00329c <__gedf2>:
1a00329c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0032a0:	e006      	b.n	1a0032b0 <__cmpdf2+0x4>
1a0032a2:	bf00      	nop

1a0032a4 <__ledf2>:
1a0032a4:	f04f 0c01 	mov.w	ip, #1
1a0032a8:	e002      	b.n	1a0032b0 <__cmpdf2+0x4>
1a0032aa:	bf00      	nop

1a0032ac <__cmpdf2>:
1a0032ac:	f04f 0c01 	mov.w	ip, #1
1a0032b0:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0032b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0032b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0032bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0032c0:	bf18      	it	ne
1a0032c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0032c6:	d01b      	beq.n	1a003300 <__cmpdf2+0x54>
1a0032c8:	b001      	add	sp, #4
1a0032ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a0032ce:	bf0c      	ite	eq
1a0032d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a0032d4:	ea91 0f03 	teqne	r1, r3
1a0032d8:	bf02      	ittt	eq
1a0032da:	ea90 0f02 	teqeq	r0, r2
1a0032de:	2000      	moveq	r0, #0
1a0032e0:	4770      	bxeq	lr
1a0032e2:	f110 0f00 	cmn.w	r0, #0
1a0032e6:	ea91 0f03 	teq	r1, r3
1a0032ea:	bf58      	it	pl
1a0032ec:	4299      	cmppl	r1, r3
1a0032ee:	bf08      	it	eq
1a0032f0:	4290      	cmpeq	r0, r2
1a0032f2:	bf2c      	ite	cs
1a0032f4:	17d8      	asrcs	r0, r3, #31
1a0032f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0032fa:	f040 0001 	orr.w	r0, r0, #1
1a0032fe:	4770      	bx	lr
1a003300:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003308:	d102      	bne.n	1a003310 <__cmpdf2+0x64>
1a00330a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00330e:	d107      	bne.n	1a003320 <__cmpdf2+0x74>
1a003310:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003314:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003318:	d1d6      	bne.n	1a0032c8 <__cmpdf2+0x1c>
1a00331a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00331e:	d0d3      	beq.n	1a0032c8 <__cmpdf2+0x1c>
1a003320:	f85d 0b04 	ldr.w	r0, [sp], #4
1a003324:	4770      	bx	lr
1a003326:	bf00      	nop

1a003328 <__aeabi_cdrcmple>:
1a003328:	4684      	mov	ip, r0
1a00332a:	4610      	mov	r0, r2
1a00332c:	4662      	mov	r2, ip
1a00332e:	468c      	mov	ip, r1
1a003330:	4619      	mov	r1, r3
1a003332:	4663      	mov	r3, ip
1a003334:	e000      	b.n	1a003338 <__aeabi_cdcmpeq>
1a003336:	bf00      	nop

1a003338 <__aeabi_cdcmpeq>:
1a003338:	b501      	push	{r0, lr}
1a00333a:	f7ff ffb7 	bl	1a0032ac <__cmpdf2>
1a00333e:	2800      	cmp	r0, #0
1a003340:	bf48      	it	mi
1a003342:	f110 0f00 	cmnmi.w	r0, #0
1a003346:	bd01      	pop	{r0, pc}

1a003348 <__aeabi_dcmpeq>:
1a003348:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00334c:	f7ff fff4 	bl	1a003338 <__aeabi_cdcmpeq>
1a003350:	bf0c      	ite	eq
1a003352:	2001      	moveq	r0, #1
1a003354:	2000      	movne	r0, #0
1a003356:	f85d fb08 	ldr.w	pc, [sp], #8
1a00335a:	bf00      	nop

1a00335c <__aeabi_dcmplt>:
1a00335c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003360:	f7ff ffea 	bl	1a003338 <__aeabi_cdcmpeq>
1a003364:	bf34      	ite	cc
1a003366:	2001      	movcc	r0, #1
1a003368:	2000      	movcs	r0, #0
1a00336a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00336e:	bf00      	nop

1a003370 <__aeabi_dcmple>:
1a003370:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003374:	f7ff ffe0 	bl	1a003338 <__aeabi_cdcmpeq>
1a003378:	bf94      	ite	ls
1a00337a:	2001      	movls	r0, #1
1a00337c:	2000      	movhi	r0, #0
1a00337e:	f85d fb08 	ldr.w	pc, [sp], #8
1a003382:	bf00      	nop

1a003384 <__aeabi_dcmpge>:
1a003384:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003388:	f7ff ffce 	bl	1a003328 <__aeabi_cdrcmple>
1a00338c:	bf94      	ite	ls
1a00338e:	2001      	movls	r0, #1
1a003390:	2000      	movhi	r0, #0
1a003392:	f85d fb08 	ldr.w	pc, [sp], #8
1a003396:	bf00      	nop

1a003398 <__aeabi_dcmpgt>:
1a003398:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00339c:	f7ff ffc4 	bl	1a003328 <__aeabi_cdrcmple>
1a0033a0:	bf34      	ite	cc
1a0033a2:	2001      	movcc	r0, #1
1a0033a4:	2000      	movcs	r0, #0
1a0033a6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0033aa:	bf00      	nop

1a0033ac <__aeabi_d2iz>:
1a0033ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0033b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0033b4:	d215      	bcs.n	1a0033e2 <__aeabi_d2iz+0x36>
1a0033b6:	d511      	bpl.n	1a0033dc <__aeabi_d2iz+0x30>
1a0033b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0033bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0033c0:	d912      	bls.n	1a0033e8 <__aeabi_d2iz+0x3c>
1a0033c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0033c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0033ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0033ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0033d2:	fa23 f002 	lsr.w	r0, r3, r2
1a0033d6:	bf18      	it	ne
1a0033d8:	4240      	negne	r0, r0
1a0033da:	4770      	bx	lr
1a0033dc:	f04f 0000 	mov.w	r0, #0
1a0033e0:	4770      	bx	lr
1a0033e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0033e6:	d105      	bne.n	1a0033f4 <__aeabi_d2iz+0x48>
1a0033e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a0033ec:	bf08      	it	eq
1a0033ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0033f2:	4770      	bx	lr
1a0033f4:	f04f 0000 	mov.w	r0, #0
1a0033f8:	4770      	bx	lr
1a0033fa:	bf00      	nop

1a0033fc <__aeabi_d2f>:
1a0033fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a003400:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a003404:	bf24      	itt	cs
1a003406:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00340a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a00340e:	d90d      	bls.n	1a00342c <__aeabi_d2f+0x30>
1a003410:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a003414:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a003418:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a00341c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a003420:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a003424:	bf08      	it	eq
1a003426:	f020 0001 	biceq.w	r0, r0, #1
1a00342a:	4770      	bx	lr
1a00342c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a003430:	d121      	bne.n	1a003476 <__aeabi_d2f+0x7a>
1a003432:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a003436:	bfbc      	itt	lt
1a003438:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a00343c:	4770      	bxlt	lr
1a00343e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003442:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a003446:	f1c2 0218 	rsb	r2, r2, #24
1a00344a:	f1c2 0c20 	rsb	ip, r2, #32
1a00344e:	fa10 f30c 	lsls.w	r3, r0, ip
1a003452:	fa20 f002 	lsr.w	r0, r0, r2
1a003456:	bf18      	it	ne
1a003458:	f040 0001 	orrne.w	r0, r0, #1
1a00345c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a003460:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a003464:	fa03 fc0c 	lsl.w	ip, r3, ip
1a003468:	ea40 000c 	orr.w	r0, r0, ip
1a00346c:	fa23 f302 	lsr.w	r3, r3, r2
1a003470:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a003474:	e7cc      	b.n	1a003410 <__aeabi_d2f+0x14>
1a003476:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00347a:	d107      	bne.n	1a00348c <__aeabi_d2f+0x90>
1a00347c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a003480:	bf1e      	ittt	ne
1a003482:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a003486:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00348a:	4770      	bxne	lr
1a00348c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a003490:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a003494:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a003498:	4770      	bx	lr
1a00349a:	bf00      	nop

1a00349c <__aeabi_uldivmod>:
1a00349c:	b953      	cbnz	r3, 1a0034b4 <__aeabi_uldivmod+0x18>
1a00349e:	b94a      	cbnz	r2, 1a0034b4 <__aeabi_uldivmod+0x18>
1a0034a0:	2900      	cmp	r1, #0
1a0034a2:	bf08      	it	eq
1a0034a4:	2800      	cmpeq	r0, #0
1a0034a6:	bf1c      	itt	ne
1a0034a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0034ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0034b0:	f000 b974 	b.w	1a00379c <__aeabi_idiv0>
1a0034b4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0034b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0034bc:	f000 f806 	bl	1a0034cc <__udivmoddi4>
1a0034c0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0034c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0034c8:	b004      	add	sp, #16
1a0034ca:	4770      	bx	lr

1a0034cc <__udivmoddi4>:
1a0034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0034d0:	9e08      	ldr	r6, [sp, #32]
1a0034d2:	4604      	mov	r4, r0
1a0034d4:	4688      	mov	r8, r1
1a0034d6:	2b00      	cmp	r3, #0
1a0034d8:	f040 8085 	bne.w	1a0035e6 <__udivmoddi4+0x11a>
1a0034dc:	428a      	cmp	r2, r1
1a0034de:	4615      	mov	r5, r2
1a0034e0:	d948      	bls.n	1a003574 <__udivmoddi4+0xa8>
1a0034e2:	fab2 f282 	clz	r2, r2
1a0034e6:	b14a      	cbz	r2, 1a0034fc <__udivmoddi4+0x30>
1a0034e8:	f1c2 0720 	rsb	r7, r2, #32
1a0034ec:	fa01 f302 	lsl.w	r3, r1, r2
1a0034f0:	fa20 f707 	lsr.w	r7, r0, r7
1a0034f4:	4095      	lsls	r5, r2
1a0034f6:	ea47 0803 	orr.w	r8, r7, r3
1a0034fa:	4094      	lsls	r4, r2
1a0034fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003500:	0c23      	lsrs	r3, r4, #16
1a003502:	fbb8 f7fe 	udiv	r7, r8, lr
1a003506:	fa1f fc85 	uxth.w	ip, r5
1a00350a:	fb0e 8817 	mls	r8, lr, r7, r8
1a00350e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003512:	fb07 f10c 	mul.w	r1, r7, ip
1a003516:	4299      	cmp	r1, r3
1a003518:	d909      	bls.n	1a00352e <__udivmoddi4+0x62>
1a00351a:	18eb      	adds	r3, r5, r3
1a00351c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003520:	f080 80e3 	bcs.w	1a0036ea <__udivmoddi4+0x21e>
1a003524:	4299      	cmp	r1, r3
1a003526:	f240 80e0 	bls.w	1a0036ea <__udivmoddi4+0x21e>
1a00352a:	3f02      	subs	r7, #2
1a00352c:	442b      	add	r3, r5
1a00352e:	1a5b      	subs	r3, r3, r1
1a003530:	b2a4      	uxth	r4, r4
1a003532:	fbb3 f0fe 	udiv	r0, r3, lr
1a003536:	fb0e 3310 	mls	r3, lr, r0, r3
1a00353a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00353e:	fb00 fc0c 	mul.w	ip, r0, ip
1a003542:	45a4      	cmp	ip, r4
1a003544:	d909      	bls.n	1a00355a <__udivmoddi4+0x8e>
1a003546:	192c      	adds	r4, r5, r4
1a003548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00354c:	f080 80cb 	bcs.w	1a0036e6 <__udivmoddi4+0x21a>
1a003550:	45a4      	cmp	ip, r4
1a003552:	f240 80c8 	bls.w	1a0036e6 <__udivmoddi4+0x21a>
1a003556:	3802      	subs	r0, #2
1a003558:	442c      	add	r4, r5
1a00355a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00355e:	eba4 040c 	sub.w	r4, r4, ip
1a003562:	2700      	movs	r7, #0
1a003564:	b11e      	cbz	r6, 1a00356e <__udivmoddi4+0xa2>
1a003566:	40d4      	lsrs	r4, r2
1a003568:	2300      	movs	r3, #0
1a00356a:	e9c6 4300 	strd	r4, r3, [r6]
1a00356e:	4639      	mov	r1, r7
1a003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003574:	2a00      	cmp	r2, #0
1a003576:	d053      	beq.n	1a003620 <__udivmoddi4+0x154>
1a003578:	fab2 f282 	clz	r2, r2
1a00357c:	2a00      	cmp	r2, #0
1a00357e:	f040 80b6 	bne.w	1a0036ee <__udivmoddi4+0x222>
1a003582:	1b49      	subs	r1, r1, r5
1a003584:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003588:	fa1f f885 	uxth.w	r8, r5
1a00358c:	2701      	movs	r7, #1
1a00358e:	fbb1 fcfe 	udiv	ip, r1, lr
1a003592:	0c23      	lsrs	r3, r4, #16
1a003594:	fb0e 111c 	mls	r1, lr, ip, r1
1a003598:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00359c:	fb08 f10c 	mul.w	r1, r8, ip
1a0035a0:	4299      	cmp	r1, r3
1a0035a2:	d907      	bls.n	1a0035b4 <__udivmoddi4+0xe8>
1a0035a4:	18eb      	adds	r3, r5, r3
1a0035a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0035aa:	d202      	bcs.n	1a0035b2 <__udivmoddi4+0xe6>
1a0035ac:	4299      	cmp	r1, r3
1a0035ae:	f200 80ec 	bhi.w	1a00378a <__udivmoddi4+0x2be>
1a0035b2:	4684      	mov	ip, r0
1a0035b4:	1a59      	subs	r1, r3, r1
1a0035b6:	b2a3      	uxth	r3, r4
1a0035b8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0035bc:	fb0e 1410 	mls	r4, lr, r0, r1
1a0035c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0035c4:	fb08 f800 	mul.w	r8, r8, r0
1a0035c8:	45a0      	cmp	r8, r4
1a0035ca:	d907      	bls.n	1a0035dc <__udivmoddi4+0x110>
1a0035cc:	192c      	adds	r4, r5, r4
1a0035ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035d2:	d202      	bcs.n	1a0035da <__udivmoddi4+0x10e>
1a0035d4:	45a0      	cmp	r8, r4
1a0035d6:	f200 80dc 	bhi.w	1a003792 <__udivmoddi4+0x2c6>
1a0035da:	4618      	mov	r0, r3
1a0035dc:	eba4 0408 	sub.w	r4, r4, r8
1a0035e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0035e4:	e7be      	b.n	1a003564 <__udivmoddi4+0x98>
1a0035e6:	428b      	cmp	r3, r1
1a0035e8:	d908      	bls.n	1a0035fc <__udivmoddi4+0x130>
1a0035ea:	2e00      	cmp	r6, #0
1a0035ec:	d078      	beq.n	1a0036e0 <__udivmoddi4+0x214>
1a0035ee:	2700      	movs	r7, #0
1a0035f0:	e9c6 0100 	strd	r0, r1, [r6]
1a0035f4:	4638      	mov	r0, r7
1a0035f6:	4639      	mov	r1, r7
1a0035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035fc:	fab3 f783 	clz	r7, r3
1a003600:	b97f      	cbnz	r7, 1a003622 <__udivmoddi4+0x156>
1a003602:	428b      	cmp	r3, r1
1a003604:	d302      	bcc.n	1a00360c <__udivmoddi4+0x140>
1a003606:	4282      	cmp	r2, r0
1a003608:	f200 80bd 	bhi.w	1a003786 <__udivmoddi4+0x2ba>
1a00360c:	1a84      	subs	r4, r0, r2
1a00360e:	eb61 0303 	sbc.w	r3, r1, r3
1a003612:	2001      	movs	r0, #1
1a003614:	4698      	mov	r8, r3
1a003616:	2e00      	cmp	r6, #0
1a003618:	d0a9      	beq.n	1a00356e <__udivmoddi4+0xa2>
1a00361a:	e9c6 4800 	strd	r4, r8, [r6]
1a00361e:	e7a6      	b.n	1a00356e <__udivmoddi4+0xa2>
1a003620:	deff      	udf	#255	; 0xff
1a003622:	f1c7 0520 	rsb	r5, r7, #32
1a003626:	40bb      	lsls	r3, r7
1a003628:	fa22 fc05 	lsr.w	ip, r2, r5
1a00362c:	ea4c 0c03 	orr.w	ip, ip, r3
1a003630:	fa01 f407 	lsl.w	r4, r1, r7
1a003634:	fa20 f805 	lsr.w	r8, r0, r5
1a003638:	fa21 f305 	lsr.w	r3, r1, r5
1a00363c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a003640:	ea48 0404 	orr.w	r4, r8, r4
1a003644:	fbb3 f9fe 	udiv	r9, r3, lr
1a003648:	0c21      	lsrs	r1, r4, #16
1a00364a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00364e:	fa1f f88c 	uxth.w	r8, ip
1a003652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003656:	fb09 fa08 	mul.w	sl, r9, r8
1a00365a:	459a      	cmp	sl, r3
1a00365c:	fa02 f207 	lsl.w	r2, r2, r7
1a003660:	fa00 f107 	lsl.w	r1, r0, r7
1a003664:	d90b      	bls.n	1a00367e <__udivmoddi4+0x1b2>
1a003666:	eb1c 0303 	adds.w	r3, ip, r3
1a00366a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00366e:	f080 8088 	bcs.w	1a003782 <__udivmoddi4+0x2b6>
1a003672:	459a      	cmp	sl, r3
1a003674:	f240 8085 	bls.w	1a003782 <__udivmoddi4+0x2b6>
1a003678:	f1a9 0902 	sub.w	r9, r9, #2
1a00367c:	4463      	add	r3, ip
1a00367e:	eba3 030a 	sub.w	r3, r3, sl
1a003682:	b2a4      	uxth	r4, r4
1a003684:	fbb3 f0fe 	udiv	r0, r3, lr
1a003688:	fb0e 3310 	mls	r3, lr, r0, r3
1a00368c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003690:	fb00 f808 	mul.w	r8, r0, r8
1a003694:	45a0      	cmp	r8, r4
1a003696:	d908      	bls.n	1a0036aa <__udivmoddi4+0x1de>
1a003698:	eb1c 0404 	adds.w	r4, ip, r4
1a00369c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0036a0:	d26b      	bcs.n	1a00377a <__udivmoddi4+0x2ae>
1a0036a2:	45a0      	cmp	r8, r4
1a0036a4:	d969      	bls.n	1a00377a <__udivmoddi4+0x2ae>
1a0036a6:	3802      	subs	r0, #2
1a0036a8:	4464      	add	r4, ip
1a0036aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0036ae:	eba4 0408 	sub.w	r4, r4, r8
1a0036b2:	fba0 8902 	umull	r8, r9, r0, r2
1a0036b6:	454c      	cmp	r4, r9
1a0036b8:	46c6      	mov	lr, r8
1a0036ba:	464b      	mov	r3, r9
1a0036bc:	d354      	bcc.n	1a003768 <__udivmoddi4+0x29c>
1a0036be:	d051      	beq.n	1a003764 <__udivmoddi4+0x298>
1a0036c0:	2e00      	cmp	r6, #0
1a0036c2:	d069      	beq.n	1a003798 <__udivmoddi4+0x2cc>
1a0036c4:	ebb1 020e 	subs.w	r2, r1, lr
1a0036c8:	eb64 0403 	sbc.w	r4, r4, r3
1a0036cc:	fa04 f505 	lsl.w	r5, r4, r5
1a0036d0:	fa22 f307 	lsr.w	r3, r2, r7
1a0036d4:	40fc      	lsrs	r4, r7
1a0036d6:	431d      	orrs	r5, r3
1a0036d8:	e9c6 5400 	strd	r5, r4, [r6]
1a0036dc:	2700      	movs	r7, #0
1a0036de:	e746      	b.n	1a00356e <__udivmoddi4+0xa2>
1a0036e0:	4637      	mov	r7, r6
1a0036e2:	4630      	mov	r0, r6
1a0036e4:	e743      	b.n	1a00356e <__udivmoddi4+0xa2>
1a0036e6:	4618      	mov	r0, r3
1a0036e8:	e737      	b.n	1a00355a <__udivmoddi4+0x8e>
1a0036ea:	4607      	mov	r7, r0
1a0036ec:	e71f      	b.n	1a00352e <__udivmoddi4+0x62>
1a0036ee:	f1c2 0320 	rsb	r3, r2, #32
1a0036f2:	fa20 f703 	lsr.w	r7, r0, r3
1a0036f6:	4095      	lsls	r5, r2
1a0036f8:	fa01 f002 	lsl.w	r0, r1, r2
1a0036fc:	fa21 f303 	lsr.w	r3, r1, r3
1a003700:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003704:	4338      	orrs	r0, r7
1a003706:	0c01      	lsrs	r1, r0, #16
1a003708:	fbb3 f7fe 	udiv	r7, r3, lr
1a00370c:	fa1f f885 	uxth.w	r8, r5
1a003710:	fb0e 3317 	mls	r3, lr, r7, r3
1a003714:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003718:	fb07 f308 	mul.w	r3, r7, r8
1a00371c:	428b      	cmp	r3, r1
1a00371e:	fa04 f402 	lsl.w	r4, r4, r2
1a003722:	d907      	bls.n	1a003734 <__udivmoddi4+0x268>
1a003724:	1869      	adds	r1, r5, r1
1a003726:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00372a:	d228      	bcs.n	1a00377e <__udivmoddi4+0x2b2>
1a00372c:	428b      	cmp	r3, r1
1a00372e:	d926      	bls.n	1a00377e <__udivmoddi4+0x2b2>
1a003730:	3f02      	subs	r7, #2
1a003732:	4429      	add	r1, r5
1a003734:	1acb      	subs	r3, r1, r3
1a003736:	b281      	uxth	r1, r0
1a003738:	fbb3 f0fe 	udiv	r0, r3, lr
1a00373c:	fb0e 3310 	mls	r3, lr, r0, r3
1a003740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003744:	fb00 f308 	mul.w	r3, r0, r8
1a003748:	428b      	cmp	r3, r1
1a00374a:	d907      	bls.n	1a00375c <__udivmoddi4+0x290>
1a00374c:	1869      	adds	r1, r5, r1
1a00374e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003752:	d210      	bcs.n	1a003776 <__udivmoddi4+0x2aa>
1a003754:	428b      	cmp	r3, r1
1a003756:	d90e      	bls.n	1a003776 <__udivmoddi4+0x2aa>
1a003758:	3802      	subs	r0, #2
1a00375a:	4429      	add	r1, r5
1a00375c:	1ac9      	subs	r1, r1, r3
1a00375e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003762:	e714      	b.n	1a00358e <__udivmoddi4+0xc2>
1a003764:	4541      	cmp	r1, r8
1a003766:	d2ab      	bcs.n	1a0036c0 <__udivmoddi4+0x1f4>
1a003768:	ebb8 0e02 	subs.w	lr, r8, r2
1a00376c:	eb69 020c 	sbc.w	r2, r9, ip
1a003770:	3801      	subs	r0, #1
1a003772:	4613      	mov	r3, r2
1a003774:	e7a4      	b.n	1a0036c0 <__udivmoddi4+0x1f4>
1a003776:	4660      	mov	r0, ip
1a003778:	e7f0      	b.n	1a00375c <__udivmoddi4+0x290>
1a00377a:	4618      	mov	r0, r3
1a00377c:	e795      	b.n	1a0036aa <__udivmoddi4+0x1de>
1a00377e:	4667      	mov	r7, ip
1a003780:	e7d8      	b.n	1a003734 <__udivmoddi4+0x268>
1a003782:	4681      	mov	r9, r0
1a003784:	e77b      	b.n	1a00367e <__udivmoddi4+0x1b2>
1a003786:	4638      	mov	r0, r7
1a003788:	e745      	b.n	1a003616 <__udivmoddi4+0x14a>
1a00378a:	f1ac 0c02 	sub.w	ip, ip, #2
1a00378e:	442b      	add	r3, r5
1a003790:	e710      	b.n	1a0035b4 <__udivmoddi4+0xe8>
1a003792:	3802      	subs	r0, #2
1a003794:	442c      	add	r4, r5
1a003796:	e721      	b.n	1a0035dc <__udivmoddi4+0x110>
1a003798:	4637      	mov	r7, r6
1a00379a:	e6e8      	b.n	1a00356e <__udivmoddi4+0xa2>

1a00379c <__aeabi_idiv0>:
1a00379c:	4770      	bx	lr
1a00379e:	bf00      	nop

1a0037a0 <__libc_init_array>:
1a0037a0:	b570      	push	{r4, r5, r6, lr}
1a0037a2:	4d0d      	ldr	r5, [pc, #52]	; (1a0037d8 <__libc_init_array+0x38>)
1a0037a4:	4c0d      	ldr	r4, [pc, #52]	; (1a0037dc <__libc_init_array+0x3c>)
1a0037a6:	1b64      	subs	r4, r4, r5
1a0037a8:	10a4      	asrs	r4, r4, #2
1a0037aa:	2600      	movs	r6, #0
1a0037ac:	42a6      	cmp	r6, r4
1a0037ae:	d109      	bne.n	1a0037c4 <__libc_init_array+0x24>
1a0037b0:	4d0b      	ldr	r5, [pc, #44]	; (1a0037e0 <__libc_init_array+0x40>)
1a0037b2:	4c0c      	ldr	r4, [pc, #48]	; (1a0037e4 <__libc_init_array+0x44>)
1a0037b4:	f7fd fd27 	bl	1a001206 <_init>
1a0037b8:	1b64      	subs	r4, r4, r5
1a0037ba:	10a4      	asrs	r4, r4, #2
1a0037bc:	2600      	movs	r6, #0
1a0037be:	42a6      	cmp	r6, r4
1a0037c0:	d105      	bne.n	1a0037ce <__libc_init_array+0x2e>
1a0037c2:	bd70      	pop	{r4, r5, r6, pc}
1a0037c4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0037c8:	4798      	blx	r3
1a0037ca:	3601      	adds	r6, #1
1a0037cc:	e7ee      	b.n	1a0037ac <__libc_init_array+0xc>
1a0037ce:	f855 3b04 	ldr.w	r3, [r5], #4
1a0037d2:	4798      	blx	r3
1a0037d4:	3601      	adds	r6, #1
1a0037d6:	e7f2      	b.n	1a0037be <__libc_init_array+0x1e>
1a0037d8:	1a004c90 	.word	0x1a004c90
1a0037dc:	1a004c90 	.word	0x1a004c90
1a0037e0:	1a004c90 	.word	0x1a004c90
1a0037e4:	1a004c94 	.word	0x1a004c94

1a0037e8 <memset>:
1a0037e8:	4402      	add	r2, r0
1a0037ea:	4603      	mov	r3, r0
1a0037ec:	4293      	cmp	r3, r2
1a0037ee:	d100      	bne.n	1a0037f2 <memset+0xa>
1a0037f0:	4770      	bx	lr
1a0037f2:	f803 1b01 	strb.w	r1, [r3], #1
1a0037f6:	e7f9      	b.n	1a0037ec <memset+0x4>

1a0037f8 <iprintf>:
1a0037f8:	b40f      	push	{r0, r1, r2, r3}
1a0037fa:	4b0a      	ldr	r3, [pc, #40]	; (1a003824 <iprintf+0x2c>)
1a0037fc:	b513      	push	{r0, r1, r4, lr}
1a0037fe:	681c      	ldr	r4, [r3, #0]
1a003800:	b124      	cbz	r4, 1a00380c <iprintf+0x14>
1a003802:	69a3      	ldr	r3, [r4, #24]
1a003804:	b913      	cbnz	r3, 1a00380c <iprintf+0x14>
1a003806:	4620      	mov	r0, r4
1a003808:	f000 fa5e 	bl	1a003cc8 <__sinit>
1a00380c:	ab05      	add	r3, sp, #20
1a00380e:	9a04      	ldr	r2, [sp, #16]
1a003810:	68a1      	ldr	r1, [r4, #8]
1a003812:	9301      	str	r3, [sp, #4]
1a003814:	4620      	mov	r0, r4
1a003816:	f000 fc2d 	bl	1a004074 <_vfiprintf_r>
1a00381a:	b002      	add	sp, #8
1a00381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003820:	b004      	add	sp, #16
1a003822:	4770      	bx	lr
1a003824:	10000048 	.word	0x10000048

1a003828 <_puts_r>:
1a003828:	b570      	push	{r4, r5, r6, lr}
1a00382a:	460e      	mov	r6, r1
1a00382c:	4605      	mov	r5, r0
1a00382e:	b118      	cbz	r0, 1a003838 <_puts_r+0x10>
1a003830:	6983      	ldr	r3, [r0, #24]
1a003832:	b90b      	cbnz	r3, 1a003838 <_puts_r+0x10>
1a003834:	f000 fa48 	bl	1a003cc8 <__sinit>
1a003838:	69ab      	ldr	r3, [r5, #24]
1a00383a:	68ac      	ldr	r4, [r5, #8]
1a00383c:	b913      	cbnz	r3, 1a003844 <_puts_r+0x1c>
1a00383e:	4628      	mov	r0, r5
1a003840:	f000 fa42 	bl	1a003cc8 <__sinit>
1a003844:	4b2c      	ldr	r3, [pc, #176]	; (1a0038f8 <_puts_r+0xd0>)
1a003846:	429c      	cmp	r4, r3
1a003848:	d120      	bne.n	1a00388c <_puts_r+0x64>
1a00384a:	686c      	ldr	r4, [r5, #4]
1a00384c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00384e:	07db      	lsls	r3, r3, #31
1a003850:	d405      	bmi.n	1a00385e <_puts_r+0x36>
1a003852:	89a3      	ldrh	r3, [r4, #12]
1a003854:	0598      	lsls	r0, r3, #22
1a003856:	d402      	bmi.n	1a00385e <_puts_r+0x36>
1a003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00385a:	f000 fad2 	bl	1a003e02 <__retarget_lock_acquire_recursive>
1a00385e:	89a3      	ldrh	r3, [r4, #12]
1a003860:	0719      	lsls	r1, r3, #28
1a003862:	d51d      	bpl.n	1a0038a0 <_puts_r+0x78>
1a003864:	6923      	ldr	r3, [r4, #16]
1a003866:	b1db      	cbz	r3, 1a0038a0 <_puts_r+0x78>
1a003868:	3e01      	subs	r6, #1
1a00386a:	68a3      	ldr	r3, [r4, #8]
1a00386c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003870:	3b01      	subs	r3, #1
1a003872:	60a3      	str	r3, [r4, #8]
1a003874:	bb39      	cbnz	r1, 1a0038c6 <_puts_r+0x9e>
1a003876:	2b00      	cmp	r3, #0
1a003878:	da38      	bge.n	1a0038ec <_puts_r+0xc4>
1a00387a:	4622      	mov	r2, r4
1a00387c:	210a      	movs	r1, #10
1a00387e:	4628      	mov	r0, r5
1a003880:	f000 f848 	bl	1a003914 <__swbuf_r>
1a003884:	3001      	adds	r0, #1
1a003886:	d011      	beq.n	1a0038ac <_puts_r+0x84>
1a003888:	250a      	movs	r5, #10
1a00388a:	e011      	b.n	1a0038b0 <_puts_r+0x88>
1a00388c:	4b1b      	ldr	r3, [pc, #108]	; (1a0038fc <_puts_r+0xd4>)
1a00388e:	429c      	cmp	r4, r3
1a003890:	d101      	bne.n	1a003896 <_puts_r+0x6e>
1a003892:	68ac      	ldr	r4, [r5, #8]
1a003894:	e7da      	b.n	1a00384c <_puts_r+0x24>
1a003896:	4b1a      	ldr	r3, [pc, #104]	; (1a003900 <_puts_r+0xd8>)
1a003898:	429c      	cmp	r4, r3
1a00389a:	bf08      	it	eq
1a00389c:	68ec      	ldreq	r4, [r5, #12]
1a00389e:	e7d5      	b.n	1a00384c <_puts_r+0x24>
1a0038a0:	4621      	mov	r1, r4
1a0038a2:	4628      	mov	r0, r5
1a0038a4:	f000 f888 	bl	1a0039b8 <__swsetup_r>
1a0038a8:	2800      	cmp	r0, #0
1a0038aa:	d0dd      	beq.n	1a003868 <_puts_r+0x40>
1a0038ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0038b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0038b2:	07da      	lsls	r2, r3, #31
1a0038b4:	d405      	bmi.n	1a0038c2 <_puts_r+0x9a>
1a0038b6:	89a3      	ldrh	r3, [r4, #12]
1a0038b8:	059b      	lsls	r3, r3, #22
1a0038ba:	d402      	bmi.n	1a0038c2 <_puts_r+0x9a>
1a0038bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0038be:	f000 faa1 	bl	1a003e04 <__retarget_lock_release_recursive>
1a0038c2:	4628      	mov	r0, r5
1a0038c4:	bd70      	pop	{r4, r5, r6, pc}
1a0038c6:	2b00      	cmp	r3, #0
1a0038c8:	da04      	bge.n	1a0038d4 <_puts_r+0xac>
1a0038ca:	69a2      	ldr	r2, [r4, #24]
1a0038cc:	429a      	cmp	r2, r3
1a0038ce:	dc06      	bgt.n	1a0038de <_puts_r+0xb6>
1a0038d0:	290a      	cmp	r1, #10
1a0038d2:	d004      	beq.n	1a0038de <_puts_r+0xb6>
1a0038d4:	6823      	ldr	r3, [r4, #0]
1a0038d6:	1c5a      	adds	r2, r3, #1
1a0038d8:	6022      	str	r2, [r4, #0]
1a0038da:	7019      	strb	r1, [r3, #0]
1a0038dc:	e7c5      	b.n	1a00386a <_puts_r+0x42>
1a0038de:	4622      	mov	r2, r4
1a0038e0:	4628      	mov	r0, r5
1a0038e2:	f000 f817 	bl	1a003914 <__swbuf_r>
1a0038e6:	3001      	adds	r0, #1
1a0038e8:	d1bf      	bne.n	1a00386a <_puts_r+0x42>
1a0038ea:	e7df      	b.n	1a0038ac <_puts_r+0x84>
1a0038ec:	6823      	ldr	r3, [r4, #0]
1a0038ee:	250a      	movs	r5, #10
1a0038f0:	1c5a      	adds	r2, r3, #1
1a0038f2:	6022      	str	r2, [r4, #0]
1a0038f4:	701d      	strb	r5, [r3, #0]
1a0038f6:	e7db      	b.n	1a0038b0 <_puts_r+0x88>
1a0038f8:	1a004c18 	.word	0x1a004c18
1a0038fc:	1a004c38 	.word	0x1a004c38
1a003900:	1a004bf8 	.word	0x1a004bf8

1a003904 <puts>:
1a003904:	4b02      	ldr	r3, [pc, #8]	; (1a003910 <puts+0xc>)
1a003906:	4601      	mov	r1, r0
1a003908:	6818      	ldr	r0, [r3, #0]
1a00390a:	f7ff bf8d 	b.w	1a003828 <_puts_r>
1a00390e:	bf00      	nop
1a003910:	10000048 	.word	0x10000048

1a003914 <__swbuf_r>:
1a003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003916:	460e      	mov	r6, r1
1a003918:	4614      	mov	r4, r2
1a00391a:	4605      	mov	r5, r0
1a00391c:	b118      	cbz	r0, 1a003926 <__swbuf_r+0x12>
1a00391e:	6983      	ldr	r3, [r0, #24]
1a003920:	b90b      	cbnz	r3, 1a003926 <__swbuf_r+0x12>
1a003922:	f000 f9d1 	bl	1a003cc8 <__sinit>
1a003926:	4b21      	ldr	r3, [pc, #132]	; (1a0039ac <__swbuf_r+0x98>)
1a003928:	429c      	cmp	r4, r3
1a00392a:	d12b      	bne.n	1a003984 <__swbuf_r+0x70>
1a00392c:	686c      	ldr	r4, [r5, #4]
1a00392e:	69a3      	ldr	r3, [r4, #24]
1a003930:	60a3      	str	r3, [r4, #8]
1a003932:	89a3      	ldrh	r3, [r4, #12]
1a003934:	071a      	lsls	r2, r3, #28
1a003936:	d52f      	bpl.n	1a003998 <__swbuf_r+0x84>
1a003938:	6923      	ldr	r3, [r4, #16]
1a00393a:	b36b      	cbz	r3, 1a003998 <__swbuf_r+0x84>
1a00393c:	6923      	ldr	r3, [r4, #16]
1a00393e:	6820      	ldr	r0, [r4, #0]
1a003940:	1ac0      	subs	r0, r0, r3
1a003942:	6963      	ldr	r3, [r4, #20]
1a003944:	b2f6      	uxtb	r6, r6
1a003946:	4283      	cmp	r3, r0
1a003948:	4637      	mov	r7, r6
1a00394a:	dc04      	bgt.n	1a003956 <__swbuf_r+0x42>
1a00394c:	4621      	mov	r1, r4
1a00394e:	4628      	mov	r0, r5
1a003950:	f000 f926 	bl	1a003ba0 <_fflush_r>
1a003954:	bb30      	cbnz	r0, 1a0039a4 <__swbuf_r+0x90>
1a003956:	68a3      	ldr	r3, [r4, #8]
1a003958:	3b01      	subs	r3, #1
1a00395a:	60a3      	str	r3, [r4, #8]
1a00395c:	6823      	ldr	r3, [r4, #0]
1a00395e:	1c5a      	adds	r2, r3, #1
1a003960:	6022      	str	r2, [r4, #0]
1a003962:	701e      	strb	r6, [r3, #0]
1a003964:	6963      	ldr	r3, [r4, #20]
1a003966:	3001      	adds	r0, #1
1a003968:	4283      	cmp	r3, r0
1a00396a:	d004      	beq.n	1a003976 <__swbuf_r+0x62>
1a00396c:	89a3      	ldrh	r3, [r4, #12]
1a00396e:	07db      	lsls	r3, r3, #31
1a003970:	d506      	bpl.n	1a003980 <__swbuf_r+0x6c>
1a003972:	2e0a      	cmp	r6, #10
1a003974:	d104      	bne.n	1a003980 <__swbuf_r+0x6c>
1a003976:	4621      	mov	r1, r4
1a003978:	4628      	mov	r0, r5
1a00397a:	f000 f911 	bl	1a003ba0 <_fflush_r>
1a00397e:	b988      	cbnz	r0, 1a0039a4 <__swbuf_r+0x90>
1a003980:	4638      	mov	r0, r7
1a003982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003984:	4b0a      	ldr	r3, [pc, #40]	; (1a0039b0 <__swbuf_r+0x9c>)
1a003986:	429c      	cmp	r4, r3
1a003988:	d101      	bne.n	1a00398e <__swbuf_r+0x7a>
1a00398a:	68ac      	ldr	r4, [r5, #8]
1a00398c:	e7cf      	b.n	1a00392e <__swbuf_r+0x1a>
1a00398e:	4b09      	ldr	r3, [pc, #36]	; (1a0039b4 <__swbuf_r+0xa0>)
1a003990:	429c      	cmp	r4, r3
1a003992:	bf08      	it	eq
1a003994:	68ec      	ldreq	r4, [r5, #12]
1a003996:	e7ca      	b.n	1a00392e <__swbuf_r+0x1a>
1a003998:	4621      	mov	r1, r4
1a00399a:	4628      	mov	r0, r5
1a00399c:	f000 f80c 	bl	1a0039b8 <__swsetup_r>
1a0039a0:	2800      	cmp	r0, #0
1a0039a2:	d0cb      	beq.n	1a00393c <__swbuf_r+0x28>
1a0039a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0039a8:	e7ea      	b.n	1a003980 <__swbuf_r+0x6c>
1a0039aa:	bf00      	nop
1a0039ac:	1a004c18 	.word	0x1a004c18
1a0039b0:	1a004c38 	.word	0x1a004c38
1a0039b4:	1a004bf8 	.word	0x1a004bf8

1a0039b8 <__swsetup_r>:
1a0039b8:	4b32      	ldr	r3, [pc, #200]	; (1a003a84 <__swsetup_r+0xcc>)
1a0039ba:	b570      	push	{r4, r5, r6, lr}
1a0039bc:	681d      	ldr	r5, [r3, #0]
1a0039be:	4606      	mov	r6, r0
1a0039c0:	460c      	mov	r4, r1
1a0039c2:	b125      	cbz	r5, 1a0039ce <__swsetup_r+0x16>
1a0039c4:	69ab      	ldr	r3, [r5, #24]
1a0039c6:	b913      	cbnz	r3, 1a0039ce <__swsetup_r+0x16>
1a0039c8:	4628      	mov	r0, r5
1a0039ca:	f000 f97d 	bl	1a003cc8 <__sinit>
1a0039ce:	4b2e      	ldr	r3, [pc, #184]	; (1a003a88 <__swsetup_r+0xd0>)
1a0039d0:	429c      	cmp	r4, r3
1a0039d2:	d10f      	bne.n	1a0039f4 <__swsetup_r+0x3c>
1a0039d4:	686c      	ldr	r4, [r5, #4]
1a0039d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0039da:	b29a      	uxth	r2, r3
1a0039dc:	0715      	lsls	r5, r2, #28
1a0039de:	d42c      	bmi.n	1a003a3a <__swsetup_r+0x82>
1a0039e0:	06d0      	lsls	r0, r2, #27
1a0039e2:	d411      	bmi.n	1a003a08 <__swsetup_r+0x50>
1a0039e4:	2209      	movs	r2, #9
1a0039e6:	6032      	str	r2, [r6, #0]
1a0039e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0039ec:	81a3      	strh	r3, [r4, #12]
1a0039ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0039f2:	e03e      	b.n	1a003a72 <__swsetup_r+0xba>
1a0039f4:	4b25      	ldr	r3, [pc, #148]	; (1a003a8c <__swsetup_r+0xd4>)
1a0039f6:	429c      	cmp	r4, r3
1a0039f8:	d101      	bne.n	1a0039fe <__swsetup_r+0x46>
1a0039fa:	68ac      	ldr	r4, [r5, #8]
1a0039fc:	e7eb      	b.n	1a0039d6 <__swsetup_r+0x1e>
1a0039fe:	4b24      	ldr	r3, [pc, #144]	; (1a003a90 <__swsetup_r+0xd8>)
1a003a00:	429c      	cmp	r4, r3
1a003a02:	bf08      	it	eq
1a003a04:	68ec      	ldreq	r4, [r5, #12]
1a003a06:	e7e6      	b.n	1a0039d6 <__swsetup_r+0x1e>
1a003a08:	0751      	lsls	r1, r2, #29
1a003a0a:	d512      	bpl.n	1a003a32 <__swsetup_r+0x7a>
1a003a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003a0e:	b141      	cbz	r1, 1a003a22 <__swsetup_r+0x6a>
1a003a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003a14:	4299      	cmp	r1, r3
1a003a16:	d002      	beq.n	1a003a1e <__swsetup_r+0x66>
1a003a18:	4630      	mov	r0, r6
1a003a1a:	f000 fa59 	bl	1a003ed0 <_free_r>
1a003a1e:	2300      	movs	r3, #0
1a003a20:	6363      	str	r3, [r4, #52]	; 0x34
1a003a22:	89a3      	ldrh	r3, [r4, #12]
1a003a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003a28:	81a3      	strh	r3, [r4, #12]
1a003a2a:	2300      	movs	r3, #0
1a003a2c:	6063      	str	r3, [r4, #4]
1a003a2e:	6923      	ldr	r3, [r4, #16]
1a003a30:	6023      	str	r3, [r4, #0]
1a003a32:	89a3      	ldrh	r3, [r4, #12]
1a003a34:	f043 0308 	orr.w	r3, r3, #8
1a003a38:	81a3      	strh	r3, [r4, #12]
1a003a3a:	6923      	ldr	r3, [r4, #16]
1a003a3c:	b94b      	cbnz	r3, 1a003a52 <__swsetup_r+0x9a>
1a003a3e:	89a3      	ldrh	r3, [r4, #12]
1a003a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003a48:	d003      	beq.n	1a003a52 <__swsetup_r+0x9a>
1a003a4a:	4621      	mov	r1, r4
1a003a4c:	4630      	mov	r0, r6
1a003a4e:	f000 f9ff 	bl	1a003e50 <__smakebuf_r>
1a003a52:	89a2      	ldrh	r2, [r4, #12]
1a003a54:	f012 0301 	ands.w	r3, r2, #1
1a003a58:	d00c      	beq.n	1a003a74 <__swsetup_r+0xbc>
1a003a5a:	2300      	movs	r3, #0
1a003a5c:	60a3      	str	r3, [r4, #8]
1a003a5e:	6963      	ldr	r3, [r4, #20]
1a003a60:	425b      	negs	r3, r3
1a003a62:	61a3      	str	r3, [r4, #24]
1a003a64:	6923      	ldr	r3, [r4, #16]
1a003a66:	b953      	cbnz	r3, 1a003a7e <__swsetup_r+0xc6>
1a003a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003a6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003a70:	d1ba      	bne.n	1a0039e8 <__swsetup_r+0x30>
1a003a72:	bd70      	pop	{r4, r5, r6, pc}
1a003a74:	0792      	lsls	r2, r2, #30
1a003a76:	bf58      	it	pl
1a003a78:	6963      	ldrpl	r3, [r4, #20]
1a003a7a:	60a3      	str	r3, [r4, #8]
1a003a7c:	e7f2      	b.n	1a003a64 <__swsetup_r+0xac>
1a003a7e:	2000      	movs	r0, #0
1a003a80:	e7f7      	b.n	1a003a72 <__swsetup_r+0xba>
1a003a82:	bf00      	nop
1a003a84:	10000048 	.word	0x10000048
1a003a88:	1a004c18 	.word	0x1a004c18
1a003a8c:	1a004c38 	.word	0x1a004c38
1a003a90:	1a004bf8 	.word	0x1a004bf8

1a003a94 <__sflush_r>:
1a003a94:	898a      	ldrh	r2, [r1, #12]
1a003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a9a:	4605      	mov	r5, r0
1a003a9c:	0710      	lsls	r0, r2, #28
1a003a9e:	460c      	mov	r4, r1
1a003aa0:	d458      	bmi.n	1a003b54 <__sflush_r+0xc0>
1a003aa2:	684b      	ldr	r3, [r1, #4]
1a003aa4:	2b00      	cmp	r3, #0
1a003aa6:	dc05      	bgt.n	1a003ab4 <__sflush_r+0x20>
1a003aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003aaa:	2b00      	cmp	r3, #0
1a003aac:	dc02      	bgt.n	1a003ab4 <__sflush_r+0x20>
1a003aae:	2000      	movs	r0, #0
1a003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003ab6:	2e00      	cmp	r6, #0
1a003ab8:	d0f9      	beq.n	1a003aae <__sflush_r+0x1a>
1a003aba:	2300      	movs	r3, #0
1a003abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003ac0:	682f      	ldr	r7, [r5, #0]
1a003ac2:	602b      	str	r3, [r5, #0]
1a003ac4:	d032      	beq.n	1a003b2c <__sflush_r+0x98>
1a003ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003ac8:	89a3      	ldrh	r3, [r4, #12]
1a003aca:	075a      	lsls	r2, r3, #29
1a003acc:	d505      	bpl.n	1a003ada <__sflush_r+0x46>
1a003ace:	6863      	ldr	r3, [r4, #4]
1a003ad0:	1ac0      	subs	r0, r0, r3
1a003ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003ad4:	b10b      	cbz	r3, 1a003ada <__sflush_r+0x46>
1a003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003ad8:	1ac0      	subs	r0, r0, r3
1a003ada:	2300      	movs	r3, #0
1a003adc:	4602      	mov	r2, r0
1a003ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003ae0:	6a21      	ldr	r1, [r4, #32]
1a003ae2:	4628      	mov	r0, r5
1a003ae4:	47b0      	blx	r6
1a003ae6:	1c43      	adds	r3, r0, #1
1a003ae8:	89a3      	ldrh	r3, [r4, #12]
1a003aea:	d106      	bne.n	1a003afa <__sflush_r+0x66>
1a003aec:	6829      	ldr	r1, [r5, #0]
1a003aee:	291d      	cmp	r1, #29
1a003af0:	d849      	bhi.n	1a003b86 <__sflush_r+0xf2>
1a003af2:	4a2a      	ldr	r2, [pc, #168]	; (1a003b9c <__sflush_r+0x108>)
1a003af4:	40ca      	lsrs	r2, r1
1a003af6:	07d6      	lsls	r6, r2, #31
1a003af8:	d545      	bpl.n	1a003b86 <__sflush_r+0xf2>
1a003afa:	2200      	movs	r2, #0
1a003afc:	6062      	str	r2, [r4, #4]
1a003afe:	04d9      	lsls	r1, r3, #19
1a003b00:	6922      	ldr	r2, [r4, #16]
1a003b02:	6022      	str	r2, [r4, #0]
1a003b04:	d504      	bpl.n	1a003b10 <__sflush_r+0x7c>
1a003b06:	1c42      	adds	r2, r0, #1
1a003b08:	d101      	bne.n	1a003b0e <__sflush_r+0x7a>
1a003b0a:	682b      	ldr	r3, [r5, #0]
1a003b0c:	b903      	cbnz	r3, 1a003b10 <__sflush_r+0x7c>
1a003b0e:	6560      	str	r0, [r4, #84]	; 0x54
1a003b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003b12:	602f      	str	r7, [r5, #0]
1a003b14:	2900      	cmp	r1, #0
1a003b16:	d0ca      	beq.n	1a003aae <__sflush_r+0x1a>
1a003b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003b1c:	4299      	cmp	r1, r3
1a003b1e:	d002      	beq.n	1a003b26 <__sflush_r+0x92>
1a003b20:	4628      	mov	r0, r5
1a003b22:	f000 f9d5 	bl	1a003ed0 <_free_r>
1a003b26:	2000      	movs	r0, #0
1a003b28:	6360      	str	r0, [r4, #52]	; 0x34
1a003b2a:	e7c1      	b.n	1a003ab0 <__sflush_r+0x1c>
1a003b2c:	6a21      	ldr	r1, [r4, #32]
1a003b2e:	2301      	movs	r3, #1
1a003b30:	4628      	mov	r0, r5
1a003b32:	47b0      	blx	r6
1a003b34:	1c41      	adds	r1, r0, #1
1a003b36:	d1c7      	bne.n	1a003ac8 <__sflush_r+0x34>
1a003b38:	682b      	ldr	r3, [r5, #0]
1a003b3a:	2b00      	cmp	r3, #0
1a003b3c:	d0c4      	beq.n	1a003ac8 <__sflush_r+0x34>
1a003b3e:	2b1d      	cmp	r3, #29
1a003b40:	d001      	beq.n	1a003b46 <__sflush_r+0xb2>
1a003b42:	2b16      	cmp	r3, #22
1a003b44:	d101      	bne.n	1a003b4a <__sflush_r+0xb6>
1a003b46:	602f      	str	r7, [r5, #0]
1a003b48:	e7b1      	b.n	1a003aae <__sflush_r+0x1a>
1a003b4a:	89a3      	ldrh	r3, [r4, #12]
1a003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003b50:	81a3      	strh	r3, [r4, #12]
1a003b52:	e7ad      	b.n	1a003ab0 <__sflush_r+0x1c>
1a003b54:	690f      	ldr	r7, [r1, #16]
1a003b56:	2f00      	cmp	r7, #0
1a003b58:	d0a9      	beq.n	1a003aae <__sflush_r+0x1a>
1a003b5a:	0793      	lsls	r3, r2, #30
1a003b5c:	680e      	ldr	r6, [r1, #0]
1a003b5e:	bf08      	it	eq
1a003b60:	694b      	ldreq	r3, [r1, #20]
1a003b62:	600f      	str	r7, [r1, #0]
1a003b64:	bf18      	it	ne
1a003b66:	2300      	movne	r3, #0
1a003b68:	eba6 0807 	sub.w	r8, r6, r7
1a003b6c:	608b      	str	r3, [r1, #8]
1a003b6e:	f1b8 0f00 	cmp.w	r8, #0
1a003b72:	dd9c      	ble.n	1a003aae <__sflush_r+0x1a>
1a003b74:	4643      	mov	r3, r8
1a003b76:	463a      	mov	r2, r7
1a003b78:	6a21      	ldr	r1, [r4, #32]
1a003b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003b7c:	4628      	mov	r0, r5
1a003b7e:	47b0      	blx	r6
1a003b80:	2800      	cmp	r0, #0
1a003b82:	dc06      	bgt.n	1a003b92 <__sflush_r+0xfe>
1a003b84:	89a3      	ldrh	r3, [r4, #12]
1a003b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003b8a:	81a3      	strh	r3, [r4, #12]
1a003b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003b90:	e78e      	b.n	1a003ab0 <__sflush_r+0x1c>
1a003b92:	4407      	add	r7, r0
1a003b94:	eba8 0800 	sub.w	r8, r8, r0
1a003b98:	e7e9      	b.n	1a003b6e <__sflush_r+0xda>
1a003b9a:	bf00      	nop
1a003b9c:	20400001 	.word	0x20400001

1a003ba0 <_fflush_r>:
1a003ba0:	b538      	push	{r3, r4, r5, lr}
1a003ba2:	690b      	ldr	r3, [r1, #16]
1a003ba4:	4605      	mov	r5, r0
1a003ba6:	460c      	mov	r4, r1
1a003ba8:	b913      	cbnz	r3, 1a003bb0 <_fflush_r+0x10>
1a003baa:	2500      	movs	r5, #0
1a003bac:	4628      	mov	r0, r5
1a003bae:	bd38      	pop	{r3, r4, r5, pc}
1a003bb0:	b118      	cbz	r0, 1a003bba <_fflush_r+0x1a>
1a003bb2:	6983      	ldr	r3, [r0, #24]
1a003bb4:	b90b      	cbnz	r3, 1a003bba <_fflush_r+0x1a>
1a003bb6:	f000 f887 	bl	1a003cc8 <__sinit>
1a003bba:	4b14      	ldr	r3, [pc, #80]	; (1a003c0c <_fflush_r+0x6c>)
1a003bbc:	429c      	cmp	r4, r3
1a003bbe:	d11b      	bne.n	1a003bf8 <_fflush_r+0x58>
1a003bc0:	686c      	ldr	r4, [r5, #4]
1a003bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003bc6:	2b00      	cmp	r3, #0
1a003bc8:	d0ef      	beq.n	1a003baa <_fflush_r+0xa>
1a003bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003bcc:	07d0      	lsls	r0, r2, #31
1a003bce:	d404      	bmi.n	1a003bda <_fflush_r+0x3a>
1a003bd0:	0599      	lsls	r1, r3, #22
1a003bd2:	d402      	bmi.n	1a003bda <_fflush_r+0x3a>
1a003bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003bd6:	f000 f914 	bl	1a003e02 <__retarget_lock_acquire_recursive>
1a003bda:	4628      	mov	r0, r5
1a003bdc:	4621      	mov	r1, r4
1a003bde:	f7ff ff59 	bl	1a003a94 <__sflush_r>
1a003be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003be4:	07da      	lsls	r2, r3, #31
1a003be6:	4605      	mov	r5, r0
1a003be8:	d4e0      	bmi.n	1a003bac <_fflush_r+0xc>
1a003bea:	89a3      	ldrh	r3, [r4, #12]
1a003bec:	059b      	lsls	r3, r3, #22
1a003bee:	d4dd      	bmi.n	1a003bac <_fflush_r+0xc>
1a003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003bf2:	f000 f907 	bl	1a003e04 <__retarget_lock_release_recursive>
1a003bf6:	e7d9      	b.n	1a003bac <_fflush_r+0xc>
1a003bf8:	4b05      	ldr	r3, [pc, #20]	; (1a003c10 <_fflush_r+0x70>)
1a003bfa:	429c      	cmp	r4, r3
1a003bfc:	d101      	bne.n	1a003c02 <_fflush_r+0x62>
1a003bfe:	68ac      	ldr	r4, [r5, #8]
1a003c00:	e7df      	b.n	1a003bc2 <_fflush_r+0x22>
1a003c02:	4b04      	ldr	r3, [pc, #16]	; (1a003c14 <_fflush_r+0x74>)
1a003c04:	429c      	cmp	r4, r3
1a003c06:	bf08      	it	eq
1a003c08:	68ec      	ldreq	r4, [r5, #12]
1a003c0a:	e7da      	b.n	1a003bc2 <_fflush_r+0x22>
1a003c0c:	1a004c18 	.word	0x1a004c18
1a003c10:	1a004c38 	.word	0x1a004c38
1a003c14:	1a004bf8 	.word	0x1a004bf8

1a003c18 <std>:
1a003c18:	2300      	movs	r3, #0
1a003c1a:	b510      	push	{r4, lr}
1a003c1c:	4604      	mov	r4, r0
1a003c1e:	e9c0 3300 	strd	r3, r3, [r0]
1a003c22:	6083      	str	r3, [r0, #8]
1a003c24:	8181      	strh	r1, [r0, #12]
1a003c26:	6643      	str	r3, [r0, #100]	; 0x64
1a003c28:	81c2      	strh	r2, [r0, #14]
1a003c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003c2e:	6183      	str	r3, [r0, #24]
1a003c30:	4619      	mov	r1, r3
1a003c32:	2208      	movs	r2, #8
1a003c34:	305c      	adds	r0, #92	; 0x5c
1a003c36:	f7ff fdd7 	bl	1a0037e8 <memset>
1a003c3a:	4b05      	ldr	r3, [pc, #20]	; (1a003c50 <std+0x38>)
1a003c3c:	6263      	str	r3, [r4, #36]	; 0x24
1a003c3e:	4b05      	ldr	r3, [pc, #20]	; (1a003c54 <std+0x3c>)
1a003c40:	62a3      	str	r3, [r4, #40]	; 0x28
1a003c42:	4b05      	ldr	r3, [pc, #20]	; (1a003c58 <std+0x40>)
1a003c44:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003c46:	4b05      	ldr	r3, [pc, #20]	; (1a003c5c <std+0x44>)
1a003c48:	6224      	str	r4, [r4, #32]
1a003c4a:	6323      	str	r3, [r4, #48]	; 0x30
1a003c4c:	bd10      	pop	{r4, pc}
1a003c4e:	bf00      	nop
1a003c50:	1a0045d9 	.word	0x1a0045d9
1a003c54:	1a0045fb 	.word	0x1a0045fb
1a003c58:	1a004633 	.word	0x1a004633
1a003c5c:	1a004657 	.word	0x1a004657

1a003c60 <_cleanup_r>:
1a003c60:	4901      	ldr	r1, [pc, #4]	; (1a003c68 <_cleanup_r+0x8>)
1a003c62:	f000 b8af 	b.w	1a003dc4 <_fwalk_reent>
1a003c66:	bf00      	nop
1a003c68:	1a003ba1 	.word	0x1a003ba1

1a003c6c <__sfmoreglue>:
1a003c6c:	b570      	push	{r4, r5, r6, lr}
1a003c6e:	1e4a      	subs	r2, r1, #1
1a003c70:	2568      	movs	r5, #104	; 0x68
1a003c72:	4355      	muls	r5, r2
1a003c74:	460e      	mov	r6, r1
1a003c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003c7a:	f000 f977 	bl	1a003f6c <_malloc_r>
1a003c7e:	4604      	mov	r4, r0
1a003c80:	b140      	cbz	r0, 1a003c94 <__sfmoreglue+0x28>
1a003c82:	2100      	movs	r1, #0
1a003c84:	e9c0 1600 	strd	r1, r6, [r0]
1a003c88:	300c      	adds	r0, #12
1a003c8a:	60a0      	str	r0, [r4, #8]
1a003c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003c90:	f7ff fdaa 	bl	1a0037e8 <memset>
1a003c94:	4620      	mov	r0, r4
1a003c96:	bd70      	pop	{r4, r5, r6, pc}

1a003c98 <__sfp_lock_acquire>:
1a003c98:	4801      	ldr	r0, [pc, #4]	; (1a003ca0 <__sfp_lock_acquire+0x8>)
1a003c9a:	f000 b8b2 	b.w	1a003e02 <__retarget_lock_acquire_recursive>
1a003c9e:	bf00      	nop
1a003ca0:	100000f8 	.word	0x100000f8

1a003ca4 <__sfp_lock_release>:
1a003ca4:	4801      	ldr	r0, [pc, #4]	; (1a003cac <__sfp_lock_release+0x8>)
1a003ca6:	f000 b8ad 	b.w	1a003e04 <__retarget_lock_release_recursive>
1a003caa:	bf00      	nop
1a003cac:	100000f8 	.word	0x100000f8

1a003cb0 <__sinit_lock_acquire>:
1a003cb0:	4801      	ldr	r0, [pc, #4]	; (1a003cb8 <__sinit_lock_acquire+0x8>)
1a003cb2:	f000 b8a6 	b.w	1a003e02 <__retarget_lock_acquire_recursive>
1a003cb6:	bf00      	nop
1a003cb8:	100000f3 	.word	0x100000f3

1a003cbc <__sinit_lock_release>:
1a003cbc:	4801      	ldr	r0, [pc, #4]	; (1a003cc4 <__sinit_lock_release+0x8>)
1a003cbe:	f000 b8a1 	b.w	1a003e04 <__retarget_lock_release_recursive>
1a003cc2:	bf00      	nop
1a003cc4:	100000f3 	.word	0x100000f3

1a003cc8 <__sinit>:
1a003cc8:	b510      	push	{r4, lr}
1a003cca:	4604      	mov	r4, r0
1a003ccc:	f7ff fff0 	bl	1a003cb0 <__sinit_lock_acquire>
1a003cd0:	69a3      	ldr	r3, [r4, #24]
1a003cd2:	b11b      	cbz	r3, 1a003cdc <__sinit+0x14>
1a003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003cd8:	f7ff bff0 	b.w	1a003cbc <__sinit_lock_release>
1a003cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003ce0:	6523      	str	r3, [r4, #80]	; 0x50
1a003ce2:	4b13      	ldr	r3, [pc, #76]	; (1a003d30 <__sinit+0x68>)
1a003ce4:	4a13      	ldr	r2, [pc, #76]	; (1a003d34 <__sinit+0x6c>)
1a003ce6:	681b      	ldr	r3, [r3, #0]
1a003ce8:	62a2      	str	r2, [r4, #40]	; 0x28
1a003cea:	42a3      	cmp	r3, r4
1a003cec:	bf04      	itt	eq
1a003cee:	2301      	moveq	r3, #1
1a003cf0:	61a3      	streq	r3, [r4, #24]
1a003cf2:	4620      	mov	r0, r4
1a003cf4:	f000 f820 	bl	1a003d38 <__sfp>
1a003cf8:	6060      	str	r0, [r4, #4]
1a003cfa:	4620      	mov	r0, r4
1a003cfc:	f000 f81c 	bl	1a003d38 <__sfp>
1a003d00:	60a0      	str	r0, [r4, #8]
1a003d02:	4620      	mov	r0, r4
1a003d04:	f000 f818 	bl	1a003d38 <__sfp>
1a003d08:	2200      	movs	r2, #0
1a003d0a:	60e0      	str	r0, [r4, #12]
1a003d0c:	2104      	movs	r1, #4
1a003d0e:	6860      	ldr	r0, [r4, #4]
1a003d10:	f7ff ff82 	bl	1a003c18 <std>
1a003d14:	2201      	movs	r2, #1
1a003d16:	2109      	movs	r1, #9
1a003d18:	68a0      	ldr	r0, [r4, #8]
1a003d1a:	f7ff ff7d 	bl	1a003c18 <std>
1a003d1e:	2202      	movs	r2, #2
1a003d20:	2112      	movs	r1, #18
1a003d22:	68e0      	ldr	r0, [r4, #12]
1a003d24:	f7ff ff78 	bl	1a003c18 <std>
1a003d28:	2301      	movs	r3, #1
1a003d2a:	61a3      	str	r3, [r4, #24]
1a003d2c:	e7d2      	b.n	1a003cd4 <__sinit+0xc>
1a003d2e:	bf00      	nop
1a003d30:	1a004c58 	.word	0x1a004c58
1a003d34:	1a003c61 	.word	0x1a003c61

1a003d38 <__sfp>:
1a003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003d3a:	4607      	mov	r7, r0
1a003d3c:	f7ff ffac 	bl	1a003c98 <__sfp_lock_acquire>
1a003d40:	4b1e      	ldr	r3, [pc, #120]	; (1a003dbc <__sfp+0x84>)
1a003d42:	681e      	ldr	r6, [r3, #0]
1a003d44:	69b3      	ldr	r3, [r6, #24]
1a003d46:	b913      	cbnz	r3, 1a003d4e <__sfp+0x16>
1a003d48:	4630      	mov	r0, r6
1a003d4a:	f7ff ffbd 	bl	1a003cc8 <__sinit>
1a003d4e:	3648      	adds	r6, #72	; 0x48
1a003d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003d54:	3b01      	subs	r3, #1
1a003d56:	d503      	bpl.n	1a003d60 <__sfp+0x28>
1a003d58:	6833      	ldr	r3, [r6, #0]
1a003d5a:	b30b      	cbz	r3, 1a003da0 <__sfp+0x68>
1a003d5c:	6836      	ldr	r6, [r6, #0]
1a003d5e:	e7f7      	b.n	1a003d50 <__sfp+0x18>
1a003d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003d64:	b9d5      	cbnz	r5, 1a003d9c <__sfp+0x64>
1a003d66:	4b16      	ldr	r3, [pc, #88]	; (1a003dc0 <__sfp+0x88>)
1a003d68:	60e3      	str	r3, [r4, #12]
1a003d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003d6e:	6665      	str	r5, [r4, #100]	; 0x64
1a003d70:	f000 f846 	bl	1a003e00 <__retarget_lock_init_recursive>
1a003d74:	f7ff ff96 	bl	1a003ca4 <__sfp_lock_release>
1a003d78:	6025      	str	r5, [r4, #0]
1a003d7a:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a003d7e:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003d82:	61a5      	str	r5, [r4, #24]
1a003d84:	2208      	movs	r2, #8
1a003d86:	4629      	mov	r1, r5
1a003d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003d8c:	f7ff fd2c 	bl	1a0037e8 <memset>
1a003d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003d98:	4620      	mov	r0, r4
1a003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d9c:	3468      	adds	r4, #104	; 0x68
1a003d9e:	e7d9      	b.n	1a003d54 <__sfp+0x1c>
1a003da0:	2104      	movs	r1, #4
1a003da2:	4638      	mov	r0, r7
1a003da4:	f7ff ff62 	bl	1a003c6c <__sfmoreglue>
1a003da8:	4604      	mov	r4, r0
1a003daa:	6030      	str	r0, [r6, #0]
1a003dac:	2800      	cmp	r0, #0
1a003dae:	d1d5      	bne.n	1a003d5c <__sfp+0x24>
1a003db0:	f7ff ff78 	bl	1a003ca4 <__sfp_lock_release>
1a003db4:	230c      	movs	r3, #12
1a003db6:	603b      	str	r3, [r7, #0]
1a003db8:	e7ee      	b.n	1a003d98 <__sfp+0x60>
1a003dba:	bf00      	nop
1a003dbc:	1a004c58 	.word	0x1a004c58
1a003dc0:	ffff0001 	.word	0xffff0001

1a003dc4 <_fwalk_reent>:
1a003dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003dc8:	4680      	mov	r8, r0
1a003dca:	4689      	mov	r9, r1
1a003dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003dd0:	2600      	movs	r6, #0
1a003dd2:	b914      	cbnz	r4, 1a003dda <_fwalk_reent+0x16>
1a003dd4:	4630      	mov	r0, r6
1a003dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003dda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003dde:	3f01      	subs	r7, #1
1a003de0:	d501      	bpl.n	1a003de6 <_fwalk_reent+0x22>
1a003de2:	6824      	ldr	r4, [r4, #0]
1a003de4:	e7f5      	b.n	1a003dd2 <_fwalk_reent+0xe>
1a003de6:	89ab      	ldrh	r3, [r5, #12]
1a003de8:	2b01      	cmp	r3, #1
1a003dea:	d907      	bls.n	1a003dfc <_fwalk_reent+0x38>
1a003dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003df0:	3301      	adds	r3, #1
1a003df2:	d003      	beq.n	1a003dfc <_fwalk_reent+0x38>
1a003df4:	4629      	mov	r1, r5
1a003df6:	4640      	mov	r0, r8
1a003df8:	47c8      	blx	r9
1a003dfa:	4306      	orrs	r6, r0
1a003dfc:	3568      	adds	r5, #104	; 0x68
1a003dfe:	e7ee      	b.n	1a003dde <_fwalk_reent+0x1a>

1a003e00 <__retarget_lock_init_recursive>:
1a003e00:	4770      	bx	lr

1a003e02 <__retarget_lock_acquire_recursive>:
1a003e02:	4770      	bx	lr

1a003e04 <__retarget_lock_release_recursive>:
1a003e04:	4770      	bx	lr

1a003e06 <__swhatbuf_r>:
1a003e06:	b570      	push	{r4, r5, r6, lr}
1a003e08:	460e      	mov	r6, r1
1a003e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e0e:	2900      	cmp	r1, #0
1a003e10:	b096      	sub	sp, #88	; 0x58
1a003e12:	4614      	mov	r4, r2
1a003e14:	461d      	mov	r5, r3
1a003e16:	da07      	bge.n	1a003e28 <__swhatbuf_r+0x22>
1a003e18:	2300      	movs	r3, #0
1a003e1a:	602b      	str	r3, [r5, #0]
1a003e1c:	89b3      	ldrh	r3, [r6, #12]
1a003e1e:	061a      	lsls	r2, r3, #24
1a003e20:	d410      	bmi.n	1a003e44 <__swhatbuf_r+0x3e>
1a003e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003e26:	e00e      	b.n	1a003e46 <__swhatbuf_r+0x40>
1a003e28:	466a      	mov	r2, sp
1a003e2a:	f7fd f9f2 	bl	1a001212 <_fstat_r>
1a003e2e:	2800      	cmp	r0, #0
1a003e30:	dbf2      	blt.n	1a003e18 <__swhatbuf_r+0x12>
1a003e32:	9a01      	ldr	r2, [sp, #4]
1a003e34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003e38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003e3c:	425a      	negs	r2, r3
1a003e3e:	415a      	adcs	r2, r3
1a003e40:	602a      	str	r2, [r5, #0]
1a003e42:	e7ee      	b.n	1a003e22 <__swhatbuf_r+0x1c>
1a003e44:	2340      	movs	r3, #64	; 0x40
1a003e46:	2000      	movs	r0, #0
1a003e48:	6023      	str	r3, [r4, #0]
1a003e4a:	b016      	add	sp, #88	; 0x58
1a003e4c:	bd70      	pop	{r4, r5, r6, pc}
1a003e4e:	Address 0x000000001a003e4e is out of bounds.


1a003e50 <__smakebuf_r>:
1a003e50:	898b      	ldrh	r3, [r1, #12]
1a003e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a003e54:	079d      	lsls	r5, r3, #30
1a003e56:	4606      	mov	r6, r0
1a003e58:	460c      	mov	r4, r1
1a003e5a:	d507      	bpl.n	1a003e6c <__smakebuf_r+0x1c>
1a003e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003e60:	6023      	str	r3, [r4, #0]
1a003e62:	6123      	str	r3, [r4, #16]
1a003e64:	2301      	movs	r3, #1
1a003e66:	6163      	str	r3, [r4, #20]
1a003e68:	b002      	add	sp, #8
1a003e6a:	bd70      	pop	{r4, r5, r6, pc}
1a003e6c:	ab01      	add	r3, sp, #4
1a003e6e:	466a      	mov	r2, sp
1a003e70:	f7ff ffc9 	bl	1a003e06 <__swhatbuf_r>
1a003e74:	9900      	ldr	r1, [sp, #0]
1a003e76:	4605      	mov	r5, r0
1a003e78:	4630      	mov	r0, r6
1a003e7a:	f000 f877 	bl	1a003f6c <_malloc_r>
1a003e7e:	b948      	cbnz	r0, 1a003e94 <__smakebuf_r+0x44>
1a003e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003e84:	059a      	lsls	r2, r3, #22
1a003e86:	d4ef      	bmi.n	1a003e68 <__smakebuf_r+0x18>
1a003e88:	f023 0303 	bic.w	r3, r3, #3
1a003e8c:	f043 0302 	orr.w	r3, r3, #2
1a003e90:	81a3      	strh	r3, [r4, #12]
1a003e92:	e7e3      	b.n	1a003e5c <__smakebuf_r+0xc>
1a003e94:	4b0d      	ldr	r3, [pc, #52]	; (1a003ecc <__smakebuf_r+0x7c>)
1a003e96:	62b3      	str	r3, [r6, #40]	; 0x28
1a003e98:	89a3      	ldrh	r3, [r4, #12]
1a003e9a:	6020      	str	r0, [r4, #0]
1a003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003ea0:	81a3      	strh	r3, [r4, #12]
1a003ea2:	9b00      	ldr	r3, [sp, #0]
1a003ea4:	6163      	str	r3, [r4, #20]
1a003ea6:	9b01      	ldr	r3, [sp, #4]
1a003ea8:	6120      	str	r0, [r4, #16]
1a003eaa:	b15b      	cbz	r3, 1a003ec4 <__smakebuf_r+0x74>
1a003eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003eb0:	4630      	mov	r0, r6
1a003eb2:	f7fd f9b3 	bl	1a00121c <_isatty_r>
1a003eb6:	b128      	cbz	r0, 1a003ec4 <__smakebuf_r+0x74>
1a003eb8:	89a3      	ldrh	r3, [r4, #12]
1a003eba:	f023 0303 	bic.w	r3, r3, #3
1a003ebe:	f043 0301 	orr.w	r3, r3, #1
1a003ec2:	81a3      	strh	r3, [r4, #12]
1a003ec4:	89a3      	ldrh	r3, [r4, #12]
1a003ec6:	431d      	orrs	r5, r3
1a003ec8:	81a5      	strh	r5, [r4, #12]
1a003eca:	e7cd      	b.n	1a003e68 <__smakebuf_r+0x18>
1a003ecc:	1a003c61 	.word	0x1a003c61

1a003ed0 <_free_r>:
1a003ed0:	b538      	push	{r3, r4, r5, lr}
1a003ed2:	4605      	mov	r5, r0
1a003ed4:	2900      	cmp	r1, #0
1a003ed6:	d045      	beq.n	1a003f64 <_free_r+0x94>
1a003ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003edc:	1f0c      	subs	r4, r1, #4
1a003ede:	2b00      	cmp	r3, #0
1a003ee0:	bfb8      	it	lt
1a003ee2:	18e4      	addlt	r4, r4, r3
1a003ee4:	f000 fc0c 	bl	1a004700 <__malloc_lock>
1a003ee8:	4a1f      	ldr	r2, [pc, #124]	; (1a003f68 <_free_r+0x98>)
1a003eea:	6813      	ldr	r3, [r2, #0]
1a003eec:	4610      	mov	r0, r2
1a003eee:	b933      	cbnz	r3, 1a003efe <_free_r+0x2e>
1a003ef0:	6063      	str	r3, [r4, #4]
1a003ef2:	6014      	str	r4, [r2, #0]
1a003ef4:	4628      	mov	r0, r5
1a003ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003efa:	f000 bc07 	b.w	1a00470c <__malloc_unlock>
1a003efe:	42a3      	cmp	r3, r4
1a003f00:	d90c      	bls.n	1a003f1c <_free_r+0x4c>
1a003f02:	6821      	ldr	r1, [r4, #0]
1a003f04:	1862      	adds	r2, r4, r1
1a003f06:	4293      	cmp	r3, r2
1a003f08:	bf04      	itt	eq
1a003f0a:	681a      	ldreq	r2, [r3, #0]
1a003f0c:	685b      	ldreq	r3, [r3, #4]
1a003f0e:	6063      	str	r3, [r4, #4]
1a003f10:	bf04      	itt	eq
1a003f12:	1852      	addeq	r2, r2, r1
1a003f14:	6022      	streq	r2, [r4, #0]
1a003f16:	6004      	str	r4, [r0, #0]
1a003f18:	e7ec      	b.n	1a003ef4 <_free_r+0x24>
1a003f1a:	4613      	mov	r3, r2
1a003f1c:	685a      	ldr	r2, [r3, #4]
1a003f1e:	b10a      	cbz	r2, 1a003f24 <_free_r+0x54>
1a003f20:	42a2      	cmp	r2, r4
1a003f22:	d9fa      	bls.n	1a003f1a <_free_r+0x4a>
1a003f24:	6819      	ldr	r1, [r3, #0]
1a003f26:	1858      	adds	r0, r3, r1
1a003f28:	42a0      	cmp	r0, r4
1a003f2a:	d10b      	bne.n	1a003f44 <_free_r+0x74>
1a003f2c:	6820      	ldr	r0, [r4, #0]
1a003f2e:	4401      	add	r1, r0
1a003f30:	1858      	adds	r0, r3, r1
1a003f32:	4282      	cmp	r2, r0
1a003f34:	6019      	str	r1, [r3, #0]
1a003f36:	d1dd      	bne.n	1a003ef4 <_free_r+0x24>
1a003f38:	6810      	ldr	r0, [r2, #0]
1a003f3a:	6852      	ldr	r2, [r2, #4]
1a003f3c:	605a      	str	r2, [r3, #4]
1a003f3e:	4401      	add	r1, r0
1a003f40:	6019      	str	r1, [r3, #0]
1a003f42:	e7d7      	b.n	1a003ef4 <_free_r+0x24>
1a003f44:	d902      	bls.n	1a003f4c <_free_r+0x7c>
1a003f46:	230c      	movs	r3, #12
1a003f48:	602b      	str	r3, [r5, #0]
1a003f4a:	e7d3      	b.n	1a003ef4 <_free_r+0x24>
1a003f4c:	6820      	ldr	r0, [r4, #0]
1a003f4e:	1821      	adds	r1, r4, r0
1a003f50:	428a      	cmp	r2, r1
1a003f52:	bf04      	itt	eq
1a003f54:	6811      	ldreq	r1, [r2, #0]
1a003f56:	6852      	ldreq	r2, [r2, #4]
1a003f58:	6062      	str	r2, [r4, #4]
1a003f5a:	bf04      	itt	eq
1a003f5c:	1809      	addeq	r1, r1, r0
1a003f5e:	6021      	streq	r1, [r4, #0]
1a003f60:	605c      	str	r4, [r3, #4]
1a003f62:	e7c7      	b.n	1a003ef4 <_free_r+0x24>
1a003f64:	bd38      	pop	{r3, r4, r5, pc}
1a003f66:	bf00      	nop
1a003f68:	100000e0 	.word	0x100000e0

1a003f6c <_malloc_r>:
1a003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003f6e:	1ccd      	adds	r5, r1, #3
1a003f70:	f025 0503 	bic.w	r5, r5, #3
1a003f74:	3508      	adds	r5, #8
1a003f76:	2d0c      	cmp	r5, #12
1a003f78:	bf38      	it	cc
1a003f7a:	250c      	movcc	r5, #12
1a003f7c:	2d00      	cmp	r5, #0
1a003f7e:	4606      	mov	r6, r0
1a003f80:	db01      	blt.n	1a003f86 <_malloc_r+0x1a>
1a003f82:	42a9      	cmp	r1, r5
1a003f84:	d903      	bls.n	1a003f8e <_malloc_r+0x22>
1a003f86:	230c      	movs	r3, #12
1a003f88:	6033      	str	r3, [r6, #0]
1a003f8a:	2000      	movs	r0, #0
1a003f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003f8e:	f000 fbb7 	bl	1a004700 <__malloc_lock>
1a003f92:	4921      	ldr	r1, [pc, #132]	; (1a004018 <_malloc_r+0xac>)
1a003f94:	680a      	ldr	r2, [r1, #0]
1a003f96:	4614      	mov	r4, r2
1a003f98:	b99c      	cbnz	r4, 1a003fc2 <_malloc_r+0x56>
1a003f9a:	4f20      	ldr	r7, [pc, #128]	; (1a00401c <_malloc_r+0xb0>)
1a003f9c:	683b      	ldr	r3, [r7, #0]
1a003f9e:	b923      	cbnz	r3, 1a003faa <_malloc_r+0x3e>
1a003fa0:	4621      	mov	r1, r4
1a003fa2:	4630      	mov	r0, r6
1a003fa4:	f7fd f984 	bl	1a0012b0 <_sbrk_r>
1a003fa8:	6038      	str	r0, [r7, #0]
1a003faa:	4629      	mov	r1, r5
1a003fac:	4630      	mov	r0, r6
1a003fae:	f7fd f97f 	bl	1a0012b0 <_sbrk_r>
1a003fb2:	1c43      	adds	r3, r0, #1
1a003fb4:	d123      	bne.n	1a003ffe <_malloc_r+0x92>
1a003fb6:	230c      	movs	r3, #12
1a003fb8:	6033      	str	r3, [r6, #0]
1a003fba:	4630      	mov	r0, r6
1a003fbc:	f000 fba6 	bl	1a00470c <__malloc_unlock>
1a003fc0:	e7e3      	b.n	1a003f8a <_malloc_r+0x1e>
1a003fc2:	6823      	ldr	r3, [r4, #0]
1a003fc4:	1b5b      	subs	r3, r3, r5
1a003fc6:	d417      	bmi.n	1a003ff8 <_malloc_r+0x8c>
1a003fc8:	2b0b      	cmp	r3, #11
1a003fca:	d903      	bls.n	1a003fd4 <_malloc_r+0x68>
1a003fcc:	6023      	str	r3, [r4, #0]
1a003fce:	441c      	add	r4, r3
1a003fd0:	6025      	str	r5, [r4, #0]
1a003fd2:	e004      	b.n	1a003fde <_malloc_r+0x72>
1a003fd4:	6863      	ldr	r3, [r4, #4]
1a003fd6:	42a2      	cmp	r2, r4
1a003fd8:	bf0c      	ite	eq
1a003fda:	600b      	streq	r3, [r1, #0]
1a003fdc:	6053      	strne	r3, [r2, #4]
1a003fde:	4630      	mov	r0, r6
1a003fe0:	f000 fb94 	bl	1a00470c <__malloc_unlock>
1a003fe4:	f104 000b 	add.w	r0, r4, #11
1a003fe8:	1d23      	adds	r3, r4, #4
1a003fea:	f020 0007 	bic.w	r0, r0, #7
1a003fee:	1ac2      	subs	r2, r0, r3
1a003ff0:	d0cc      	beq.n	1a003f8c <_malloc_r+0x20>
1a003ff2:	1a1b      	subs	r3, r3, r0
1a003ff4:	50a3      	str	r3, [r4, r2]
1a003ff6:	e7c9      	b.n	1a003f8c <_malloc_r+0x20>
1a003ff8:	4622      	mov	r2, r4
1a003ffa:	6864      	ldr	r4, [r4, #4]
1a003ffc:	e7cc      	b.n	1a003f98 <_malloc_r+0x2c>
1a003ffe:	1cc4      	adds	r4, r0, #3
1a004000:	f024 0403 	bic.w	r4, r4, #3
1a004004:	42a0      	cmp	r0, r4
1a004006:	d0e3      	beq.n	1a003fd0 <_malloc_r+0x64>
1a004008:	1a21      	subs	r1, r4, r0
1a00400a:	4630      	mov	r0, r6
1a00400c:	f7fd f950 	bl	1a0012b0 <_sbrk_r>
1a004010:	3001      	adds	r0, #1
1a004012:	d1dd      	bne.n	1a003fd0 <_malloc_r+0x64>
1a004014:	e7cf      	b.n	1a003fb6 <_malloc_r+0x4a>
1a004016:	bf00      	nop
1a004018:	100000e0 	.word	0x100000e0
1a00401c:	100000e4 	.word	0x100000e4

1a004020 <__sfputc_r>:
1a004020:	6893      	ldr	r3, [r2, #8]
1a004022:	3b01      	subs	r3, #1
1a004024:	2b00      	cmp	r3, #0
1a004026:	b410      	push	{r4}
1a004028:	6093      	str	r3, [r2, #8]
1a00402a:	da08      	bge.n	1a00403e <__sfputc_r+0x1e>
1a00402c:	6994      	ldr	r4, [r2, #24]
1a00402e:	42a3      	cmp	r3, r4
1a004030:	db01      	blt.n	1a004036 <__sfputc_r+0x16>
1a004032:	290a      	cmp	r1, #10
1a004034:	d103      	bne.n	1a00403e <__sfputc_r+0x1e>
1a004036:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00403a:	f7ff bc6b 	b.w	1a003914 <__swbuf_r>
1a00403e:	6813      	ldr	r3, [r2, #0]
1a004040:	1c58      	adds	r0, r3, #1
1a004042:	6010      	str	r0, [r2, #0]
1a004044:	7019      	strb	r1, [r3, #0]
1a004046:	4608      	mov	r0, r1
1a004048:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00404c:	4770      	bx	lr

1a00404e <__sfputs_r>:
1a00404e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004050:	4606      	mov	r6, r0
1a004052:	460f      	mov	r7, r1
1a004054:	4614      	mov	r4, r2
1a004056:	18d5      	adds	r5, r2, r3
1a004058:	42ac      	cmp	r4, r5
1a00405a:	d101      	bne.n	1a004060 <__sfputs_r+0x12>
1a00405c:	2000      	movs	r0, #0
1a00405e:	e007      	b.n	1a004070 <__sfputs_r+0x22>
1a004060:	463a      	mov	r2, r7
1a004062:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004066:	4630      	mov	r0, r6
1a004068:	f7ff ffda 	bl	1a004020 <__sfputc_r>
1a00406c:	1c43      	adds	r3, r0, #1
1a00406e:	d1f3      	bne.n	1a004058 <__sfputs_r+0xa>
1a004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004072:	Address 0x000000001a004072 is out of bounds.


1a004074 <_vfiprintf_r>:
1a004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004078:	460d      	mov	r5, r1
1a00407a:	b09d      	sub	sp, #116	; 0x74
1a00407c:	4614      	mov	r4, r2
1a00407e:	461e      	mov	r6, r3
1a004080:	4607      	mov	r7, r0
1a004082:	b118      	cbz	r0, 1a00408c <_vfiprintf_r+0x18>
1a004084:	6983      	ldr	r3, [r0, #24]
1a004086:	b90b      	cbnz	r3, 1a00408c <_vfiprintf_r+0x18>
1a004088:	f7ff fe1e 	bl	1a003cc8 <__sinit>
1a00408c:	4b85      	ldr	r3, [pc, #532]	; (1a0042a4 <_vfiprintf_r+0x230>)
1a00408e:	429d      	cmp	r5, r3
1a004090:	d11b      	bne.n	1a0040ca <_vfiprintf_r+0x56>
1a004092:	687d      	ldr	r5, [r7, #4]
1a004094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004096:	07d9      	lsls	r1, r3, #31
1a004098:	d405      	bmi.n	1a0040a6 <_vfiprintf_r+0x32>
1a00409a:	89ab      	ldrh	r3, [r5, #12]
1a00409c:	059a      	lsls	r2, r3, #22
1a00409e:	d402      	bmi.n	1a0040a6 <_vfiprintf_r+0x32>
1a0040a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0040a2:	f7ff feae 	bl	1a003e02 <__retarget_lock_acquire_recursive>
1a0040a6:	89ab      	ldrh	r3, [r5, #12]
1a0040a8:	071b      	lsls	r3, r3, #28
1a0040aa:	d501      	bpl.n	1a0040b0 <_vfiprintf_r+0x3c>
1a0040ac:	692b      	ldr	r3, [r5, #16]
1a0040ae:	b9eb      	cbnz	r3, 1a0040ec <_vfiprintf_r+0x78>
1a0040b0:	4629      	mov	r1, r5
1a0040b2:	4638      	mov	r0, r7
1a0040b4:	f7ff fc80 	bl	1a0039b8 <__swsetup_r>
1a0040b8:	b1c0      	cbz	r0, 1a0040ec <_vfiprintf_r+0x78>
1a0040ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0040bc:	07d8      	lsls	r0, r3, #31
1a0040be:	d50e      	bpl.n	1a0040de <_vfiprintf_r+0x6a>
1a0040c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0040c4:	b01d      	add	sp, #116	; 0x74
1a0040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0040ca:	4b77      	ldr	r3, [pc, #476]	; (1a0042a8 <_vfiprintf_r+0x234>)
1a0040cc:	429d      	cmp	r5, r3
1a0040ce:	d101      	bne.n	1a0040d4 <_vfiprintf_r+0x60>
1a0040d0:	68bd      	ldr	r5, [r7, #8]
1a0040d2:	e7df      	b.n	1a004094 <_vfiprintf_r+0x20>
1a0040d4:	4b75      	ldr	r3, [pc, #468]	; (1a0042ac <_vfiprintf_r+0x238>)
1a0040d6:	429d      	cmp	r5, r3
1a0040d8:	bf08      	it	eq
1a0040da:	68fd      	ldreq	r5, [r7, #12]
1a0040dc:	e7da      	b.n	1a004094 <_vfiprintf_r+0x20>
1a0040de:	89ab      	ldrh	r3, [r5, #12]
1a0040e0:	0599      	lsls	r1, r3, #22
1a0040e2:	d4ed      	bmi.n	1a0040c0 <_vfiprintf_r+0x4c>
1a0040e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0040e6:	f7ff fe8d 	bl	1a003e04 <__retarget_lock_release_recursive>
1a0040ea:	e7e9      	b.n	1a0040c0 <_vfiprintf_r+0x4c>
1a0040ec:	2300      	movs	r3, #0
1a0040ee:	9309      	str	r3, [sp, #36]	; 0x24
1a0040f0:	2320      	movs	r3, #32
1a0040f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0040f6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a0042b0 <_vfiprintf_r+0x23c>
1a0040fa:	9603      	str	r6, [sp, #12]
1a0040fc:	2330      	movs	r3, #48	; 0x30
1a0040fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004102:	f04f 0a01 	mov.w	sl, #1
1a004106:	4623      	mov	r3, r4
1a004108:	461e      	mov	r6, r3
1a00410a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00410e:	b10a      	cbz	r2, 1a004114 <_vfiprintf_r+0xa0>
1a004110:	2a25      	cmp	r2, #37	; 0x25
1a004112:	d1f9      	bne.n	1a004108 <_vfiprintf_r+0x94>
1a004114:	ebb6 0b04 	subs.w	fp, r6, r4
1a004118:	d00b      	beq.n	1a004132 <_vfiprintf_r+0xbe>
1a00411a:	465b      	mov	r3, fp
1a00411c:	4622      	mov	r2, r4
1a00411e:	4629      	mov	r1, r5
1a004120:	4638      	mov	r0, r7
1a004122:	f7ff ff94 	bl	1a00404e <__sfputs_r>
1a004126:	3001      	adds	r0, #1
1a004128:	f000 80a3 	beq.w	1a004272 <_vfiprintf_r+0x1fe>
1a00412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00412e:	445b      	add	r3, fp
1a004130:	9309      	str	r3, [sp, #36]	; 0x24
1a004132:	7833      	ldrb	r3, [r6, #0]
1a004134:	2b00      	cmp	r3, #0
1a004136:	f000 809c 	beq.w	1a004272 <_vfiprintf_r+0x1fe>
1a00413a:	2300      	movs	r3, #0
1a00413c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004140:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004144:	3601      	adds	r6, #1
1a004146:	9304      	str	r3, [sp, #16]
1a004148:	9307      	str	r3, [sp, #28]
1a00414a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00414e:	931a      	str	r3, [sp, #104]	; 0x68
1a004150:	4634      	mov	r4, r6
1a004152:	2205      	movs	r2, #5
1a004154:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004158:	4855      	ldr	r0, [pc, #340]	; (1a0042b0 <_vfiprintf_r+0x23c>)
1a00415a:	f000 fa81 	bl	1a004660 <memchr>
1a00415e:	9b04      	ldr	r3, [sp, #16]
1a004160:	b9c0      	cbnz	r0, 1a004194 <_vfiprintf_r+0x120>
1a004162:	06da      	lsls	r2, r3, #27
1a004164:	bf44      	itt	mi
1a004166:	2220      	movmi	r2, #32
1a004168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00416c:	0718      	lsls	r0, r3, #28
1a00416e:	bf44      	itt	mi
1a004170:	222b      	movmi	r2, #43	; 0x2b
1a004172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004176:	7832      	ldrb	r2, [r6, #0]
1a004178:	2a2a      	cmp	r2, #42	; 0x2a
1a00417a:	d013      	beq.n	1a0041a4 <_vfiprintf_r+0x130>
1a00417c:	9a07      	ldr	r2, [sp, #28]
1a00417e:	4634      	mov	r4, r6
1a004180:	2000      	movs	r0, #0
1a004182:	260a      	movs	r6, #10
1a004184:	4621      	mov	r1, r4
1a004186:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00418a:	3b30      	subs	r3, #48	; 0x30
1a00418c:	2b09      	cmp	r3, #9
1a00418e:	d94b      	bls.n	1a004228 <_vfiprintf_r+0x1b4>
1a004190:	b970      	cbnz	r0, 1a0041b0 <_vfiprintf_r+0x13c>
1a004192:	e014      	b.n	1a0041be <_vfiprintf_r+0x14a>
1a004194:	eba0 0009 	sub.w	r0, r0, r9
1a004198:	fa0a f000 	lsl.w	r0, sl, r0
1a00419c:	4318      	orrs	r0, r3
1a00419e:	9004      	str	r0, [sp, #16]
1a0041a0:	4626      	mov	r6, r4
1a0041a2:	e7d5      	b.n	1a004150 <_vfiprintf_r+0xdc>
1a0041a4:	9a03      	ldr	r2, [sp, #12]
1a0041a6:	1d11      	adds	r1, r2, #4
1a0041a8:	6812      	ldr	r2, [r2, #0]
1a0041aa:	9103      	str	r1, [sp, #12]
1a0041ac:	2a00      	cmp	r2, #0
1a0041ae:	db01      	blt.n	1a0041b4 <_vfiprintf_r+0x140>
1a0041b0:	9207      	str	r2, [sp, #28]
1a0041b2:	e004      	b.n	1a0041be <_vfiprintf_r+0x14a>
1a0041b4:	4252      	negs	r2, r2
1a0041b6:	f043 0302 	orr.w	r3, r3, #2
1a0041ba:	9207      	str	r2, [sp, #28]
1a0041bc:	9304      	str	r3, [sp, #16]
1a0041be:	7823      	ldrb	r3, [r4, #0]
1a0041c0:	2b2e      	cmp	r3, #46	; 0x2e
1a0041c2:	d10c      	bne.n	1a0041de <_vfiprintf_r+0x16a>
1a0041c4:	7863      	ldrb	r3, [r4, #1]
1a0041c6:	2b2a      	cmp	r3, #42	; 0x2a
1a0041c8:	d133      	bne.n	1a004232 <_vfiprintf_r+0x1be>
1a0041ca:	9b03      	ldr	r3, [sp, #12]
1a0041cc:	1d1a      	adds	r2, r3, #4
1a0041ce:	681b      	ldr	r3, [r3, #0]
1a0041d0:	9203      	str	r2, [sp, #12]
1a0041d2:	2b00      	cmp	r3, #0
1a0041d4:	bfb8      	it	lt
1a0041d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0041da:	3402      	adds	r4, #2
1a0041dc:	9305      	str	r3, [sp, #20]
1a0041de:	4e35      	ldr	r6, [pc, #212]	; (1a0042b4 <_vfiprintf_r+0x240>)
1a0041e0:	7821      	ldrb	r1, [r4, #0]
1a0041e2:	2203      	movs	r2, #3
1a0041e4:	4630      	mov	r0, r6
1a0041e6:	f000 fa3b 	bl	1a004660 <memchr>
1a0041ea:	b138      	cbz	r0, 1a0041fc <_vfiprintf_r+0x188>
1a0041ec:	2340      	movs	r3, #64	; 0x40
1a0041ee:	1b80      	subs	r0, r0, r6
1a0041f0:	fa03 f000 	lsl.w	r0, r3, r0
1a0041f4:	9b04      	ldr	r3, [sp, #16]
1a0041f6:	4303      	orrs	r3, r0
1a0041f8:	3401      	adds	r4, #1
1a0041fa:	9304      	str	r3, [sp, #16]
1a0041fc:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004200:	482d      	ldr	r0, [pc, #180]	; (1a0042b8 <_vfiprintf_r+0x244>)
1a004202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004206:	2206      	movs	r2, #6
1a004208:	f000 fa2a 	bl	1a004660 <memchr>
1a00420c:	2800      	cmp	r0, #0
1a00420e:	d03f      	beq.n	1a004290 <_vfiprintf_r+0x21c>
1a004210:	4b2a      	ldr	r3, [pc, #168]	; (1a0042bc <_vfiprintf_r+0x248>)
1a004212:	bb13      	cbnz	r3, 1a00425a <_vfiprintf_r+0x1e6>
1a004214:	9b03      	ldr	r3, [sp, #12]
1a004216:	3307      	adds	r3, #7
1a004218:	f023 0307 	bic.w	r3, r3, #7
1a00421c:	3308      	adds	r3, #8
1a00421e:	9303      	str	r3, [sp, #12]
1a004220:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004222:	4443      	add	r3, r8
1a004224:	9309      	str	r3, [sp, #36]	; 0x24
1a004226:	e76e      	b.n	1a004106 <_vfiprintf_r+0x92>
1a004228:	fb06 3202 	mla	r2, r6, r2, r3
1a00422c:	2001      	movs	r0, #1
1a00422e:	460c      	mov	r4, r1
1a004230:	e7a8      	b.n	1a004184 <_vfiprintf_r+0x110>
1a004232:	2300      	movs	r3, #0
1a004234:	3401      	adds	r4, #1
1a004236:	9305      	str	r3, [sp, #20]
1a004238:	4619      	mov	r1, r3
1a00423a:	260a      	movs	r6, #10
1a00423c:	4620      	mov	r0, r4
1a00423e:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004242:	3a30      	subs	r2, #48	; 0x30
1a004244:	2a09      	cmp	r2, #9
1a004246:	d903      	bls.n	1a004250 <_vfiprintf_r+0x1dc>
1a004248:	2b00      	cmp	r3, #0
1a00424a:	d0c8      	beq.n	1a0041de <_vfiprintf_r+0x16a>
1a00424c:	9105      	str	r1, [sp, #20]
1a00424e:	e7c6      	b.n	1a0041de <_vfiprintf_r+0x16a>
1a004250:	fb06 2101 	mla	r1, r6, r1, r2
1a004254:	2301      	movs	r3, #1
1a004256:	4604      	mov	r4, r0
1a004258:	e7f0      	b.n	1a00423c <_vfiprintf_r+0x1c8>
1a00425a:	ab03      	add	r3, sp, #12
1a00425c:	9300      	str	r3, [sp, #0]
1a00425e:	462a      	mov	r2, r5
1a004260:	4b17      	ldr	r3, [pc, #92]	; (1a0042c0 <_vfiprintf_r+0x24c>)
1a004262:	a904      	add	r1, sp, #16
1a004264:	4638      	mov	r0, r7
1a004266:	f3af 8000 	nop.w
1a00426a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00426e:	4680      	mov	r8, r0
1a004270:	d1d6      	bne.n	1a004220 <_vfiprintf_r+0x1ac>
1a004272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a004274:	07d9      	lsls	r1, r3, #31
1a004276:	d405      	bmi.n	1a004284 <_vfiprintf_r+0x210>
1a004278:	89ab      	ldrh	r3, [r5, #12]
1a00427a:	059a      	lsls	r2, r3, #22
1a00427c:	d402      	bmi.n	1a004284 <_vfiprintf_r+0x210>
1a00427e:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a004280:	f7ff fdc0 	bl	1a003e04 <__retarget_lock_release_recursive>
1a004284:	89ab      	ldrh	r3, [r5, #12]
1a004286:	065b      	lsls	r3, r3, #25
1a004288:	f53f af1a 	bmi.w	1a0040c0 <_vfiprintf_r+0x4c>
1a00428c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00428e:	e719      	b.n	1a0040c4 <_vfiprintf_r+0x50>
1a004290:	ab03      	add	r3, sp, #12
1a004292:	9300      	str	r3, [sp, #0]
1a004294:	462a      	mov	r2, r5
1a004296:	4b0a      	ldr	r3, [pc, #40]	; (1a0042c0 <_vfiprintf_r+0x24c>)
1a004298:	a904      	add	r1, sp, #16
1a00429a:	4638      	mov	r0, r7
1a00429c:	f000 f888 	bl	1a0043b0 <_printf_i>
1a0042a0:	e7e3      	b.n	1a00426a <_vfiprintf_r+0x1f6>
1a0042a2:	bf00      	nop
1a0042a4:	1a004c18 	.word	0x1a004c18
1a0042a8:	1a004c38 	.word	0x1a004c38
1a0042ac:	1a004bf8 	.word	0x1a004bf8
1a0042b0:	1a004c5c 	.word	0x1a004c5c
1a0042b4:	1a004c62 	.word	0x1a004c62
1a0042b8:	1a004c66 	.word	0x1a004c66
1a0042bc:	00000000 	.word	0x00000000
1a0042c0:	1a00404f 	.word	0x1a00404f

1a0042c4 <_printf_common>:
1a0042c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0042c8:	4691      	mov	r9, r2
1a0042ca:	461f      	mov	r7, r3
1a0042cc:	688a      	ldr	r2, [r1, #8]
1a0042ce:	690b      	ldr	r3, [r1, #16]
1a0042d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0042d4:	4293      	cmp	r3, r2
1a0042d6:	bfb8      	it	lt
1a0042d8:	4613      	movlt	r3, r2
1a0042da:	f8c9 3000 	str.w	r3, [r9]
1a0042de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0042e2:	4606      	mov	r6, r0
1a0042e4:	460c      	mov	r4, r1
1a0042e6:	b112      	cbz	r2, 1a0042ee <_printf_common+0x2a>
1a0042e8:	3301      	adds	r3, #1
1a0042ea:	f8c9 3000 	str.w	r3, [r9]
1a0042ee:	6823      	ldr	r3, [r4, #0]
1a0042f0:	0699      	lsls	r1, r3, #26
1a0042f2:	bf42      	ittt	mi
1a0042f4:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0042f8:	3302      	addmi	r3, #2
1a0042fa:	f8c9 3000 	strmi.w	r3, [r9]
1a0042fe:	6825      	ldr	r5, [r4, #0]
1a004300:	f015 0506 	ands.w	r5, r5, #6
1a004304:	d107      	bne.n	1a004316 <_printf_common+0x52>
1a004306:	f104 0a19 	add.w	sl, r4, #25
1a00430a:	68e3      	ldr	r3, [r4, #12]
1a00430c:	f8d9 2000 	ldr.w	r2, [r9]
1a004310:	1a9b      	subs	r3, r3, r2
1a004312:	42ab      	cmp	r3, r5
1a004314:	dc28      	bgt.n	1a004368 <_printf_common+0xa4>
1a004316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00431a:	6822      	ldr	r2, [r4, #0]
1a00431c:	3300      	adds	r3, #0
1a00431e:	bf18      	it	ne
1a004320:	2301      	movne	r3, #1
1a004322:	0692      	lsls	r2, r2, #26
1a004324:	d42d      	bmi.n	1a004382 <_printf_common+0xbe>
1a004326:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00432a:	4639      	mov	r1, r7
1a00432c:	4630      	mov	r0, r6
1a00432e:	47c0      	blx	r8
1a004330:	3001      	adds	r0, #1
1a004332:	d020      	beq.n	1a004376 <_printf_common+0xb2>
1a004334:	6823      	ldr	r3, [r4, #0]
1a004336:	68e5      	ldr	r5, [r4, #12]
1a004338:	f8d9 2000 	ldr.w	r2, [r9]
1a00433c:	f003 0306 	and.w	r3, r3, #6
1a004340:	2b04      	cmp	r3, #4
1a004342:	bf08      	it	eq
1a004344:	1aad      	subeq	r5, r5, r2
1a004346:	68a3      	ldr	r3, [r4, #8]
1a004348:	6922      	ldr	r2, [r4, #16]
1a00434a:	bf0c      	ite	eq
1a00434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004350:	2500      	movne	r5, #0
1a004352:	4293      	cmp	r3, r2
1a004354:	bfc4      	itt	gt
1a004356:	1a9b      	subgt	r3, r3, r2
1a004358:	18ed      	addgt	r5, r5, r3
1a00435a:	f04f 0900 	mov.w	r9, #0
1a00435e:	341a      	adds	r4, #26
1a004360:	454d      	cmp	r5, r9
1a004362:	d11a      	bne.n	1a00439a <_printf_common+0xd6>
1a004364:	2000      	movs	r0, #0
1a004366:	e008      	b.n	1a00437a <_printf_common+0xb6>
1a004368:	2301      	movs	r3, #1
1a00436a:	4652      	mov	r2, sl
1a00436c:	4639      	mov	r1, r7
1a00436e:	4630      	mov	r0, r6
1a004370:	47c0      	blx	r8
1a004372:	3001      	adds	r0, #1
1a004374:	d103      	bne.n	1a00437e <_printf_common+0xba>
1a004376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00437e:	3501      	adds	r5, #1
1a004380:	e7c3      	b.n	1a00430a <_printf_common+0x46>
1a004382:	18e1      	adds	r1, r4, r3
1a004384:	1c5a      	adds	r2, r3, #1
1a004386:	2030      	movs	r0, #48	; 0x30
1a004388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a00438c:	4422      	add	r2, r4
1a00438e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004396:	3302      	adds	r3, #2
1a004398:	e7c5      	b.n	1a004326 <_printf_common+0x62>
1a00439a:	2301      	movs	r3, #1
1a00439c:	4622      	mov	r2, r4
1a00439e:	4639      	mov	r1, r7
1a0043a0:	4630      	mov	r0, r6
1a0043a2:	47c0      	blx	r8
1a0043a4:	3001      	adds	r0, #1
1a0043a6:	d0e6      	beq.n	1a004376 <_printf_common+0xb2>
1a0043a8:	f109 0901 	add.w	r9, r9, #1
1a0043ac:	e7d8      	b.n	1a004360 <_printf_common+0x9c>
1a0043ae:	Address 0x000000001a0043ae is out of bounds.


1a0043b0 <_printf_i>:
1a0043b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0043b4:	4606      	mov	r6, r0
1a0043b6:	460c      	mov	r4, r1
1a0043b8:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0043bc:	7e09      	ldrb	r1, [r1, #24]
1a0043be:	b085      	sub	sp, #20
1a0043c0:	296e      	cmp	r1, #110	; 0x6e
1a0043c2:	4698      	mov	r8, r3
1a0043c4:	4617      	mov	r7, r2
1a0043c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0043c8:	f000 80ba 	beq.w	1a004540 <_printf_i+0x190>
1a0043cc:	d824      	bhi.n	1a004418 <_printf_i+0x68>
1a0043ce:	2963      	cmp	r1, #99	; 0x63
1a0043d0:	d039      	beq.n	1a004446 <_printf_i+0x96>
1a0043d2:	d80a      	bhi.n	1a0043ea <_printf_i+0x3a>
1a0043d4:	2900      	cmp	r1, #0
1a0043d6:	f000 80c3 	beq.w	1a004560 <_printf_i+0x1b0>
1a0043da:	2958      	cmp	r1, #88	; 0x58
1a0043dc:	f000 8091 	beq.w	1a004502 <_printf_i+0x152>
1a0043e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0043e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0043e8:	e035      	b.n	1a004456 <_printf_i+0xa6>
1a0043ea:	2964      	cmp	r1, #100	; 0x64
1a0043ec:	d001      	beq.n	1a0043f2 <_printf_i+0x42>
1a0043ee:	2969      	cmp	r1, #105	; 0x69
1a0043f0:	d1f6      	bne.n	1a0043e0 <_printf_i+0x30>
1a0043f2:	6825      	ldr	r5, [r4, #0]
1a0043f4:	681a      	ldr	r2, [r3, #0]
1a0043f6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0043fa:	f102 0104 	add.w	r1, r2, #4
1a0043fe:	d02c      	beq.n	1a00445a <_printf_i+0xaa>
1a004400:	6812      	ldr	r2, [r2, #0]
1a004402:	6019      	str	r1, [r3, #0]
1a004404:	2a00      	cmp	r2, #0
1a004406:	da03      	bge.n	1a004410 <_printf_i+0x60>
1a004408:	232d      	movs	r3, #45	; 0x2d
1a00440a:	4252      	negs	r2, r2
1a00440c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004410:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0045d0 <_printf_i+0x220>
1a004414:	230a      	movs	r3, #10
1a004416:	e03f      	b.n	1a004498 <_printf_i+0xe8>
1a004418:	2973      	cmp	r1, #115	; 0x73
1a00441a:	f000 80a5 	beq.w	1a004568 <_printf_i+0x1b8>
1a00441e:	d808      	bhi.n	1a004432 <_printf_i+0x82>
1a004420:	296f      	cmp	r1, #111	; 0x6f
1a004422:	d021      	beq.n	1a004468 <_printf_i+0xb8>
1a004424:	2970      	cmp	r1, #112	; 0x70
1a004426:	d1db      	bne.n	1a0043e0 <_printf_i+0x30>
1a004428:	6822      	ldr	r2, [r4, #0]
1a00442a:	f042 0220 	orr.w	r2, r2, #32
1a00442e:	6022      	str	r2, [r4, #0]
1a004430:	e003      	b.n	1a00443a <_printf_i+0x8a>
1a004432:	2975      	cmp	r1, #117	; 0x75
1a004434:	d018      	beq.n	1a004468 <_printf_i+0xb8>
1a004436:	2978      	cmp	r1, #120	; 0x78
1a004438:	d1d2      	bne.n	1a0043e0 <_printf_i+0x30>
1a00443a:	2278      	movs	r2, #120	; 0x78
1a00443c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a004440:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0045d4 <_printf_i+0x224>
1a004444:	e061      	b.n	1a00450a <_printf_i+0x15a>
1a004446:	681a      	ldr	r2, [r3, #0]
1a004448:	1d11      	adds	r1, r2, #4
1a00444a:	6019      	str	r1, [r3, #0]
1a00444c:	6813      	ldr	r3, [r2, #0]
1a00444e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004452:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004456:	2301      	movs	r3, #1
1a004458:	e093      	b.n	1a004582 <_printf_i+0x1d2>
1a00445a:	6812      	ldr	r2, [r2, #0]
1a00445c:	6019      	str	r1, [r3, #0]
1a00445e:	f015 0f40 	tst.w	r5, #64	; 0x40
1a004462:	bf18      	it	ne
1a004464:	b212      	sxthne	r2, r2
1a004466:	e7cd      	b.n	1a004404 <_printf_i+0x54>
1a004468:	f8d4 c000 	ldr.w	ip, [r4]
1a00446c:	681a      	ldr	r2, [r3, #0]
1a00446e:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004472:	f102 0504 	add.w	r5, r2, #4
1a004476:	601d      	str	r5, [r3, #0]
1a004478:	d001      	beq.n	1a00447e <_printf_i+0xce>
1a00447a:	6812      	ldr	r2, [r2, #0]
1a00447c:	e003      	b.n	1a004486 <_printf_i+0xd6>
1a00447e:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004482:	d0fa      	beq.n	1a00447a <_printf_i+0xca>
1a004484:	8812      	ldrh	r2, [r2, #0]
1a004486:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0045d0 <_printf_i+0x220>
1a00448a:	296f      	cmp	r1, #111	; 0x6f
1a00448c:	bf0c      	ite	eq
1a00448e:	2308      	moveq	r3, #8
1a004490:	230a      	movne	r3, #10
1a004492:	2100      	movs	r1, #0
1a004494:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004498:	6865      	ldr	r5, [r4, #4]
1a00449a:	60a5      	str	r5, [r4, #8]
1a00449c:	2d00      	cmp	r5, #0
1a00449e:	bfa2      	ittt	ge
1a0044a0:	6821      	ldrge	r1, [r4, #0]
1a0044a2:	f021 0104 	bicge.w	r1, r1, #4
1a0044a6:	6021      	strge	r1, [r4, #0]
1a0044a8:	b90a      	cbnz	r2, 1a0044ae <_printf_i+0xfe>
1a0044aa:	2d00      	cmp	r5, #0
1a0044ac:	d046      	beq.n	1a00453c <_printf_i+0x18c>
1a0044ae:	4605      	mov	r5, r0
1a0044b0:	fbb2 f1f3 	udiv	r1, r2, r3
1a0044b4:	fb03 2e11 	mls	lr, r3, r1, r2
1a0044b8:	4293      	cmp	r3, r2
1a0044ba:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0044be:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0044c2:	d939      	bls.n	1a004538 <_printf_i+0x188>
1a0044c4:	2b08      	cmp	r3, #8
1a0044c6:	d10b      	bne.n	1a0044e0 <_printf_i+0x130>
1a0044c8:	6823      	ldr	r3, [r4, #0]
1a0044ca:	07da      	lsls	r2, r3, #31
1a0044cc:	d508      	bpl.n	1a0044e0 <_printf_i+0x130>
1a0044ce:	6923      	ldr	r3, [r4, #16]
1a0044d0:	6862      	ldr	r2, [r4, #4]
1a0044d2:	429a      	cmp	r2, r3
1a0044d4:	bfde      	ittt	le
1a0044d6:	2330      	movle	r3, #48	; 0x30
1a0044d8:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0044dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0044e0:	1b40      	subs	r0, r0, r5
1a0044e2:	6120      	str	r0, [r4, #16]
1a0044e4:	f8cd 8000 	str.w	r8, [sp]
1a0044e8:	463b      	mov	r3, r7
1a0044ea:	aa03      	add	r2, sp, #12
1a0044ec:	4621      	mov	r1, r4
1a0044ee:	4630      	mov	r0, r6
1a0044f0:	f7ff fee8 	bl	1a0042c4 <_printf_common>
1a0044f4:	3001      	adds	r0, #1
1a0044f6:	d149      	bne.n	1a00458c <_printf_i+0x1dc>
1a0044f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0044fc:	b005      	add	sp, #20
1a0044fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004502:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0045d0 <_printf_i+0x220>
1a004506:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00450a:	681d      	ldr	r5, [r3, #0]
1a00450c:	6821      	ldr	r1, [r4, #0]
1a00450e:	f855 2b04 	ldr.w	r2, [r5], #4
1a004512:	601d      	str	r5, [r3, #0]
1a004514:	060d      	lsls	r5, r1, #24
1a004516:	d50b      	bpl.n	1a004530 <_printf_i+0x180>
1a004518:	07cd      	lsls	r5, r1, #31
1a00451a:	bf44      	itt	mi
1a00451c:	f041 0120 	orrmi.w	r1, r1, #32
1a004520:	6021      	strmi	r1, [r4, #0]
1a004522:	b91a      	cbnz	r2, 1a00452c <_printf_i+0x17c>
1a004524:	6823      	ldr	r3, [r4, #0]
1a004526:	f023 0320 	bic.w	r3, r3, #32
1a00452a:	6023      	str	r3, [r4, #0]
1a00452c:	2310      	movs	r3, #16
1a00452e:	e7b0      	b.n	1a004492 <_printf_i+0xe2>
1a004530:	064b      	lsls	r3, r1, #25
1a004532:	bf48      	it	mi
1a004534:	b292      	uxthmi	r2, r2
1a004536:	e7ef      	b.n	1a004518 <_printf_i+0x168>
1a004538:	460a      	mov	r2, r1
1a00453a:	e7b9      	b.n	1a0044b0 <_printf_i+0x100>
1a00453c:	4605      	mov	r5, r0
1a00453e:	e7c1      	b.n	1a0044c4 <_printf_i+0x114>
1a004540:	681a      	ldr	r2, [r3, #0]
1a004542:	f8d4 c000 	ldr.w	ip, [r4]
1a004546:	6961      	ldr	r1, [r4, #20]
1a004548:	1d15      	adds	r5, r2, #4
1a00454a:	601d      	str	r5, [r3, #0]
1a00454c:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a004550:	6813      	ldr	r3, [r2, #0]
1a004552:	d001      	beq.n	1a004558 <_printf_i+0x1a8>
1a004554:	6019      	str	r1, [r3, #0]
1a004556:	e003      	b.n	1a004560 <_printf_i+0x1b0>
1a004558:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00455c:	d0fa      	beq.n	1a004554 <_printf_i+0x1a4>
1a00455e:	8019      	strh	r1, [r3, #0]
1a004560:	2300      	movs	r3, #0
1a004562:	6123      	str	r3, [r4, #16]
1a004564:	4605      	mov	r5, r0
1a004566:	e7bd      	b.n	1a0044e4 <_printf_i+0x134>
1a004568:	681a      	ldr	r2, [r3, #0]
1a00456a:	1d11      	adds	r1, r2, #4
1a00456c:	6019      	str	r1, [r3, #0]
1a00456e:	6815      	ldr	r5, [r2, #0]
1a004570:	6862      	ldr	r2, [r4, #4]
1a004572:	2100      	movs	r1, #0
1a004574:	4628      	mov	r0, r5
1a004576:	f000 f873 	bl	1a004660 <memchr>
1a00457a:	b108      	cbz	r0, 1a004580 <_printf_i+0x1d0>
1a00457c:	1b40      	subs	r0, r0, r5
1a00457e:	6060      	str	r0, [r4, #4]
1a004580:	6863      	ldr	r3, [r4, #4]
1a004582:	6123      	str	r3, [r4, #16]
1a004584:	2300      	movs	r3, #0
1a004586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00458a:	e7ab      	b.n	1a0044e4 <_printf_i+0x134>
1a00458c:	6923      	ldr	r3, [r4, #16]
1a00458e:	462a      	mov	r2, r5
1a004590:	4639      	mov	r1, r7
1a004592:	4630      	mov	r0, r6
1a004594:	47c0      	blx	r8
1a004596:	3001      	adds	r0, #1
1a004598:	d0ae      	beq.n	1a0044f8 <_printf_i+0x148>
1a00459a:	6823      	ldr	r3, [r4, #0]
1a00459c:	079b      	lsls	r3, r3, #30
1a00459e:	d413      	bmi.n	1a0045c8 <_printf_i+0x218>
1a0045a0:	68e0      	ldr	r0, [r4, #12]
1a0045a2:	9b03      	ldr	r3, [sp, #12]
1a0045a4:	4298      	cmp	r0, r3
1a0045a6:	bfb8      	it	lt
1a0045a8:	4618      	movlt	r0, r3
1a0045aa:	e7a7      	b.n	1a0044fc <_printf_i+0x14c>
1a0045ac:	2301      	movs	r3, #1
1a0045ae:	464a      	mov	r2, r9
1a0045b0:	4639      	mov	r1, r7
1a0045b2:	4630      	mov	r0, r6
1a0045b4:	47c0      	blx	r8
1a0045b6:	3001      	adds	r0, #1
1a0045b8:	d09e      	beq.n	1a0044f8 <_printf_i+0x148>
1a0045ba:	3501      	adds	r5, #1
1a0045bc:	68e3      	ldr	r3, [r4, #12]
1a0045be:	9a03      	ldr	r2, [sp, #12]
1a0045c0:	1a9b      	subs	r3, r3, r2
1a0045c2:	42ab      	cmp	r3, r5
1a0045c4:	dcf2      	bgt.n	1a0045ac <_printf_i+0x1fc>
1a0045c6:	e7eb      	b.n	1a0045a0 <_printf_i+0x1f0>
1a0045c8:	2500      	movs	r5, #0
1a0045ca:	f104 0919 	add.w	r9, r4, #25
1a0045ce:	e7f5      	b.n	1a0045bc <_printf_i+0x20c>
1a0045d0:	1a004c6d 	.word	0x1a004c6d
1a0045d4:	1a004c7e 	.word	0x1a004c7e

1a0045d8 <__sread>:
1a0045d8:	b510      	push	{r4, lr}
1a0045da:	460c      	mov	r4, r1
1a0045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0045e0:	f7fc fe2a 	bl	1a001238 <_read_r>
1a0045e4:	2800      	cmp	r0, #0
1a0045e6:	bfab      	itete	ge
1a0045e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0045ea:	89a3      	ldrhlt	r3, [r4, #12]
1a0045ec:	181b      	addge	r3, r3, r0
1a0045ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0045f2:	bfac      	ite	ge
1a0045f4:	6563      	strge	r3, [r4, #84]	; 0x54
1a0045f6:	81a3      	strhlt	r3, [r4, #12]
1a0045f8:	bd10      	pop	{r4, pc}

1a0045fa <__swrite>:
1a0045fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0045fe:	461f      	mov	r7, r3
1a004600:	898b      	ldrh	r3, [r1, #12]
1a004602:	05db      	lsls	r3, r3, #23
1a004604:	4605      	mov	r5, r0
1a004606:	460c      	mov	r4, r1
1a004608:	4616      	mov	r6, r2
1a00460a:	d505      	bpl.n	1a004618 <__swrite+0x1e>
1a00460c:	2302      	movs	r3, #2
1a00460e:	2200      	movs	r2, #0
1a004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004614:	f7fc fe0b 	bl	1a00122e <_lseek_r>
1a004618:	89a3      	ldrh	r3, [r4, #12]
1a00461a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00461e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004622:	81a3      	strh	r3, [r4, #12]
1a004624:	4632      	mov	r2, r6
1a004626:	463b      	mov	r3, r7
1a004628:	4628      	mov	r0, r5
1a00462a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00462e:	f7fc be2a 	b.w	1a001286 <_write_r>

1a004632 <__sseek>:
1a004632:	b510      	push	{r4, lr}
1a004634:	460c      	mov	r4, r1
1a004636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00463a:	f7fc fdf8 	bl	1a00122e <_lseek_r>
1a00463e:	1c43      	adds	r3, r0, #1
1a004640:	89a3      	ldrh	r3, [r4, #12]
1a004642:	bf15      	itete	ne
1a004644:	6560      	strne	r0, [r4, #84]	; 0x54
1a004646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00464a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00464e:	81a3      	strheq	r3, [r4, #12]
1a004650:	bf18      	it	ne
1a004652:	81a3      	strhne	r3, [r4, #12]
1a004654:	bd10      	pop	{r4, pc}

1a004656 <__sclose>:
1a004656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00465a:	f7fc bdd5 	b.w	1a001208 <_close_r>
1a00465e:	Address 0x000000001a00465e is out of bounds.


1a004660 <memchr>:
1a004660:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004664:	2a10      	cmp	r2, #16
1a004666:	db2b      	blt.n	1a0046c0 <memchr+0x60>
1a004668:	f010 0f07 	tst.w	r0, #7
1a00466c:	d008      	beq.n	1a004680 <memchr+0x20>
1a00466e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004672:	3a01      	subs	r2, #1
1a004674:	428b      	cmp	r3, r1
1a004676:	d02d      	beq.n	1a0046d4 <memchr+0x74>
1a004678:	f010 0f07 	tst.w	r0, #7
1a00467c:	b342      	cbz	r2, 1a0046d0 <memchr+0x70>
1a00467e:	d1f6      	bne.n	1a00466e <memchr+0xe>
1a004680:	b4f0      	push	{r4, r5, r6, r7}
1a004682:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004686:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00468a:	f022 0407 	bic.w	r4, r2, #7
1a00468e:	f07f 0700 	mvns.w	r7, #0
1a004692:	2300      	movs	r3, #0
1a004694:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004698:	3c08      	subs	r4, #8
1a00469a:	ea85 0501 	eor.w	r5, r5, r1
1a00469e:	ea86 0601 	eor.w	r6, r6, r1
1a0046a2:	fa85 f547 	uadd8	r5, r5, r7
1a0046a6:	faa3 f587 	sel	r5, r3, r7
1a0046aa:	fa86 f647 	uadd8	r6, r6, r7
1a0046ae:	faa5 f687 	sel	r6, r5, r7
1a0046b2:	b98e      	cbnz	r6, 1a0046d8 <memchr+0x78>
1a0046b4:	d1ee      	bne.n	1a004694 <memchr+0x34>
1a0046b6:	bcf0      	pop	{r4, r5, r6, r7}
1a0046b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0046bc:	f002 0207 	and.w	r2, r2, #7
1a0046c0:	b132      	cbz	r2, 1a0046d0 <memchr+0x70>
1a0046c2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0046c6:	3a01      	subs	r2, #1
1a0046c8:	ea83 0301 	eor.w	r3, r3, r1
1a0046cc:	b113      	cbz	r3, 1a0046d4 <memchr+0x74>
1a0046ce:	d1f8      	bne.n	1a0046c2 <memchr+0x62>
1a0046d0:	2000      	movs	r0, #0
1a0046d2:	4770      	bx	lr
1a0046d4:	3801      	subs	r0, #1
1a0046d6:	4770      	bx	lr
1a0046d8:	2d00      	cmp	r5, #0
1a0046da:	bf06      	itte	eq
1a0046dc:	4635      	moveq	r5, r6
1a0046de:	3803      	subeq	r0, #3
1a0046e0:	3807      	subne	r0, #7
1a0046e2:	f015 0f01 	tst.w	r5, #1
1a0046e6:	d107      	bne.n	1a0046f8 <memchr+0x98>
1a0046e8:	3001      	adds	r0, #1
1a0046ea:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0046ee:	bf02      	ittt	eq
1a0046f0:	3001      	addeq	r0, #1
1a0046f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0046f6:	3001      	addeq	r0, #1
1a0046f8:	bcf0      	pop	{r4, r5, r6, r7}
1a0046fa:	3801      	subs	r0, #1
1a0046fc:	4770      	bx	lr
1a0046fe:	bf00      	nop

1a004700 <__malloc_lock>:
1a004700:	4801      	ldr	r0, [pc, #4]	; (1a004708 <__malloc_lock+0x8>)
1a004702:	f7ff bb7e 	b.w	1a003e02 <__retarget_lock_acquire_recursive>
1a004706:	bf00      	nop
1a004708:	100000f4 	.word	0x100000f4

1a00470c <__malloc_unlock>:
1a00470c:	4801      	ldr	r0, [pc, #4]	; (1a004714 <__malloc_unlock+0x8>)
1a00470e:	f7ff bb79 	b.w	1a003e04 <__retarget_lock_release_recursive>
1a004712:	bf00      	nop
1a004714:	100000f4 	.word	0x100000f4
1a004718:	6c6c6146 	.word	0x6c6c6146
1a00471c:	6e65206f 	.word	0x6e65206f
1a004720:	20616c20 	.word	0x20616c20
1a004724:	63696e69 	.word	0x63696e69
1a004728:	696c6169 	.word	0x696c6169
1a00472c:	6963617a 	.word	0x6963617a
1a004730:	28206e6f 	.word	0x28206e6f
1a004734:	65646f63 	.word	0x65646f63
1a004738:	642b2520 	.word	0x642b2520
1a00473c:	000a0d29 	.word	0x000a0d29
1a004740:	75736552 	.word	0x75736552
1a004744:	6461746c 	.word	0x6461746c
1a004748:	6564206f 	.word	0x6564206f
1a00474c:	20616c20 	.word	0x20616c20
1a004750:	63696e69 	.word	0x63696e69
1a004754:	696c6169 	.word	0x696c6169
1a004758:	6963617a 	.word	0x6963617a
1a00475c:	28206e6f 	.word	0x28206e6f
1a004760:	65646f63 	.word	0x65646f63
1a004764:	642b2520 	.word	0x642b2520
1a004768:	000a0d29 	.word	0x000a0d29
1a00476c:	706d6554 	.word	0x706d6554
1a004770:	74617265 	.word	0x74617265
1a004774:	2c657275 	.word	0x2c657275
1a004778:	65725020 	.word	0x65725020
1a00477c:	72757373 	.word	0x72757373
1a004780:	48202c65 	.word	0x48202c65
1a004784:	64696d75 	.word	0x64696d75
1a004788:	0d797469 	.word	0x0d797469
1a00478c:	ffffff00 	.word	0xffffff00
1a004790:	70696843 	.word	0x70696843
1a004794:	20646920 	.word	0x20646920
1a004798:	6425203a 	.word	0x6425203a
1a00479c:	000a0d20 	.word	0x000a0d20
1a0047a0:	75736552 	.word	0x75736552
1a0047a4:	6461746c 	.word	0x6461746c
1a0047a8:	6564206f 	.word	0x6564206f
1a0047ac:	74656720 	.word	0x74656720
1a0047b0:	6c61635f 	.word	0x6c61635f
1a0047b4:	645f6269 	.word	0x645f6269
1a0047b8:	20617461 	.word	0x20617461
1a0047bc:	646f6328 	.word	0x646f6328
1a0047c0:	2b252065 	.word	0x2b252065
1a0047c4:	0a0d2964 	.word	0x0a0d2964
1a0047c8:	ffffff00 	.word	0xffffff00
1a0047cc:	322e3025 	.word	0x322e3025
1a0047d0:	25202c66 	.word	0x25202c66
1a0047d4:	66322e30 	.word	0x66322e30
1a0047d8:	3025202c 	.word	0x3025202c
1a0047dc:	0d66322e 	.word	0x0d66322e
1a0047e0:	0000000a 	.word	0x0000000a
1a0047e4:	706d6554 	.word	0x706d6554
1a0047e8:	74617265 	.word	0x74617265
1a0047ec:	3a657275 	.word	0x3a657275
1a0047f0:	00000020 	.word	0x00000020
1a0047f4:	6172470d 	.word	0x6172470d
1a0047f8:	20736f64 	.word	0x20736f64
1a0047fc:	00000043 	.word	0x00000043
1a004800:	696d7548 	.word	0x696d7548
1a004804:	79746964 	.word	0x79746964
1a004808:	0000203a 	.word	0x0000203a
1a00480c:	0000250d 	.word	0x0000250d
1a004810:	73657250 	.word	0x73657250
1a004814:	65727573 	.word	0x65727573
1a004818:	0000203a 	.word	0x0000203a
1a00481c:	0061500d 	.word	0x0061500d
1a004820:	6c6c756e 	.word	0x6c6c756e
1a004824:	7274705f 	.word	0x7274705f
1a004828:	6568635f 	.word	0x6568635f
1a00482c:	28206b63 	.word	0x28206b63
1a004830:	65646f63 	.word	0x65646f63
1a004834:	642b2520 	.word	0x642b2520
1a004838:	000a0d29 	.word	0x000a0d29
1a00483c:	75736552 	.word	0x75736552
1a004840:	6461746c 	.word	0x6461746c
1a004844:	6564206f 	.word	0x6564206f
1a004848:	74656720 	.word	0x74656720
1a00484c:	736e6553 	.word	0x736e6553
1a004850:	6f4d726f 	.word	0x6f4d726f
1a004854:	28206564 	.word	0x28206564
1a004858:	65646f63 	.word	0x65646f63
1a00485c:	642b2520 	.word	0x642b2520
1a004860:	000a0d29 	.word	0x000a0d29
1a004864:	75736552 	.word	0x75736552
1a004868:	6461746c 	.word	0x6461746c
1a00486c:	6564206f 	.word	0x6564206f
1a004870:	74757020 	.word	0x74757020
1a004874:	7665645f 	.word	0x7665645f
1a004878:	5f656369 	.word	0x5f656369
1a00487c:	735f6f74 	.word	0x735f6f74
1a004880:	7065656c 	.word	0x7065656c
1a004884:	6f632820 	.word	0x6f632820
1a004888:	25206564 	.word	0x25206564
1a00488c:	0d29642b 	.word	0x0d29642b
1a004890:	0000000a 	.word	0x0000000a
1a004894:	75736552 	.word	0x75736552
1a004898:	6461746c 	.word	0x6461746c
1a00489c:	6564206f 	.word	0x6564206f
1a0048a0:	74657320 	.word	0x74657320
1a0048a4:	72736f5f 	.word	0x72736f5f
1a0048a8:	7465735f 	.word	0x7465735f
1a0048ac:	676e6974 	.word	0x676e6974
1a0048b0:	63282073 	.word	0x63282073
1a0048b4:	2065646f 	.word	0x2065646f
1a0048b8:	29642b25 	.word	0x29642b25
1a0048bc:	00000a0d 	.word	0x00000a0d
1a0048c0:	75736552 	.word	0x75736552
1a0048c4:	6461746c 	.word	0x6461746c
1a0048c8:	6564206f 	.word	0x6564206f
1a0048cc:	74657320 	.word	0x74657320
1a0048d0:	6c69665f 	.word	0x6c69665f
1a0048d4:	5f726574 	.word	0x5f726574
1a0048d8:	6e617473 	.word	0x6e617473
1a0048dc:	5f796264 	.word	0x5f796264
1a0048e0:	74746573 	.word	0x74746573
1a0048e4:	73676e69 	.word	0x73676e69
1a0048e8:	6f632820 	.word	0x6f632820
1a0048ec:	25206564 	.word	0x25206564
1a0048f0:	0d29642b 	.word	0x0d29642b
1a0048f4:	ffff000a 	.word	0xffff000a

1a0048f8 <ExtRateIn>:
1a0048f8:	00000000                                ....

1a0048fc <GpioButtons>:
1a0048fc:	08000400 09010900                       ........

1a004904 <GpioLeds>:
1a004904:	01050005 0e000205 0c010b01              ............

1a004910 <GpioPorts>:
1a004910:	03030003 0f050403 05031005 07030603     ................
1a004920:	ffff0802                                ....

1a004924 <OscRateIn>:
1a004924:	00b71b00                                ....

1a004928 <InitClkStates>:
1a004928:	01010f01                                ....

1a00492c <pinmuxing>:
1a00492c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00493c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00494c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00495c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00496c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00497c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00498c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00499c:	00570206                                ..W.

1a0049a0 <UART_BClock>:
1a0049a0:	01a201c2 01620182                       ......b.

1a0049a8 <UART_PClock>:
1a0049a8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0049b8:	000000ff                                ....

1a0049bc <periph_to_base>:
1a0049bc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0049cc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0049dc:	000100e0 01000100 01200003 00060120     .......... . ...
1a0049ec:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0049fc:	01820013 00120182 01a201a2 01c20011     ................
1a004a0c:	001001c2 01e201e2 0202000f 000e0202     ................
1a004a1c:	02220222 0223000d 001c0223              "."...#.#...

1a004a28 <InitClkStates>:
1a004a28:	00010100 00010909 0001090a 01010701     ................
1a004a38:	00010902 00010906 0101090c 0001090d     ................
1a004a48:	0001090e 0001090f 00010910 00010911     ................
1a004a58:	00010912 00010913 00011114 00011119     ................
1a004a68:	0001111a 0001111b                       ........

1a004a70 <lpcUarts>:
1a004a70:	40081000 06020406 00180205 40081000     ...@...........@
1a004a80:	09070509 00180706 40082000 00000000     ......... .@....
1a004a90:	00190000 400c1000 07060107 001a0602     .......@........
1a004aa0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004ab0:	02020302 001b0204                       ........

1a004ab8 <gpioPinsInit>:
1a004ab8:	02000104 00050701 05010d03 04080100     ................
1a004ac8:	02020002 02000304 00000403 04070002     ................
1a004ad8:	030c0300 09050402 05040103 04030208     ................
1a004ae8:	04020305 06040504 0802000c 03000b06     ................
1a004af8:	00090607 07060503 060f0504 03030004     ................
1a004b08:	02000404 00050404 06040502 04060200     ................
1a004b18:	0c050408 05040a04 0003010e 14010a00     ................
1a004b28:	010f0000 0d000012 00001101 0010010c     ................
1a004b38:	07070300 000f0300 01000001 00000000     ................
1a004b48:	000a0600 08060603 06100504 04030005     ................
1a004b58:	03000106 04090400 04010d05 010b0000     ................
1a004b68:	0200000f 00000001 00010104 02010800     ................
1a004b78:	01090000 09010006 05040002 04010200     ................
1a004b88:	02020105 02020504 0e00000a 01000b02     ................
1a004b98:	000c020b ffff0c01                       ........

1a004ba0 <rounders>:
1a004ba0:	00000000 3fe00000 9999999a 3fa99999     .......?.......?
1a004bb0:	47ae147b 3f747ae1 d2f1a9fc 3f40624d     {..G.zt?....Mb@?
1a004bc0:	eb1c432d 3f0a36e2 88e368f1 3ed4f8b5     -C...6.?.h.....>
1a004bd0:	a0b5ed8d 3ea0c6f7 9abcaf48 3e6ad7f2     .......>H.....j>
1a004be0:	e2308c3a 3e35798e e826d695 3e012e0b     :.0..y5>..&....>
1a004bf0:	d9d7bdbb 3dcb7cdf                       .....|.=

1a004bf8 <__sf_fake_stderr>:
	...

1a004c18 <__sf_fake_stdin>:
	...

1a004c38 <__sf_fake_stdout>:
	...

1a004c58 <_global_impure_ptr>:
1a004c58:	1000004c 2b302d23 6c680020 6665004c     L...#-0+ .hlL.ef
1a004c68:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004c78:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004c88:	64636261 ff006665                       abcdef..
